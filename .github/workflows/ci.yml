name: üöÄ CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.10'
  NODE_VERSION: '18'

jobs:
  # Backend —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
  backend-tests:
    name: üêç Backend Tests
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üêç Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: üì¶ Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: üì• Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install -r backend/requirements-dev.txt

    - name: üîç Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 backend --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 backend --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: üé® Format check with black
      run: |
        black --check --diff backend/

    - name: üîç Type check with mypy
      run: |
        mypy backend/ --ignore-missing-imports

    - name: üß™ Run tests with pytest
      run: |
        pytest backend/tests/ -v --cov=backend --cov-report=xml --cov-report=html

    - name: üìä Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: backend
        name: backend-coverage

  # Frontend —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
  frontend-tests:
    name: ‚öõÔ∏è Frontend Tests
    runs-on: ubuntu-latest

    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üü¢ Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: üì¶ Install dependencies
      run: |
        cd frontend
        npm ci

    - name: üîç Lint with ESLint
      run: |
        cd frontend
        npm run lint

    - name: üé® Format check with Prettier
      run: |
        cd frontend
        npm run format:check

    - name: üîç Type check with TypeScript
      run: |
        cd frontend
        npm run type-check

    - name: üß™ Run tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false

    - name: üìä Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
  security:
    name: üîí Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üêç Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: üîç Run Bandit security scan
      run: |
        pip install bandit
        bandit -r backend/ -f json -o bandit-report.json || true

    - name: üìä Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: bandit-report.json

  # –°–±–æ—Ä–∫–∞ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
  build:
    name: üèóÔ∏è Build & Test
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, security]

    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üêç Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: üü¢ Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: üì¶ Install dependencies
      run: |
        pip install -r backend/requirements.txt
        cd frontend && npm ci

    - name: üß™ Integration tests
      run: |
        # –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
        pytest backend/tests/integration/ -v

    - name: üì¶ Build frontend
      run: |
        cd frontend
        npm run build

    - name: üìä Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: |
          frontend/build/
          backend/dist/

  # –î–µ–ø–ª–æ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è main –≤–µ—Ç–∫–∏)
  deploy:
    name: üöÄ Deploy
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'

    steps:
    - name: üì• Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts

    - name: üöÄ Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –¥–µ–ø–ª–æ—è

    - name: üìä Health check
      run: |
        echo "Running health checks..."
        # –ó–¥–µ—Å—å –±—É–¥—É—Ç health checks

  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  notify:
    name: üì¢ Notifications
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, security, build]
    if: always()

    steps:
    - name: üìä Test Results Summary
      run: |
        echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "- Backend Tests: ${{ needs.backend-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Frontend Tests: ${{ needs.frontend-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Security Scan: ${{ needs.security.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Build: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY

    - name: üìß Send notification on failure
      if: failure()
      run: |
        echo "One or more jobs failed. Sending notification..."
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π 