import React, { useState, useRef } from "react";
import avatarService from "../services/avatarService";

interface VoiceRecorderProps {
  isConnected: boolean;
  isProcessing: boolean;
  onProcessingChange: (processing: boolean) => void;
  onAudioReady?: (audio: Blob) => void;
  onResponseReceived?: (response: { text: string; audioUrl: string }) => void;
}

const VoiceRecorder: React.FC<VoiceRecorderProps> = ({
  isConnected,
  isProcessing,
  onProcessingChange,
  onAudioReady,
  onResponseReceived,
}) => {
  const [isRecording, setIsRecording] = useState(false);
  const [audioBlob, setAudioBlob] = useState<Blob | null>(null);
  const [error, setError] = useState<string>("");
  const [progress, setProgress] = useState<string>("");
  const mediaRecorderRef = useRef<MediaRecorder | null>(null);

  const handleStartRecording = async () => {
    if (!isConnected || isProcessing) return;

    try {
      setError("");
      setProgress("");
      console.log("[VoiceRecorder] –°—Ç–∞—Ä—Ç –∑–∞–ø–∏—Å–∏...");
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      const mediaRecorder = new MediaRecorder(stream);
      mediaRecorderRef.current = mediaRecorder;
      const chunks: Blob[] = [];

      mediaRecorder.ondataavailable = (event) => {
        chunks.push(event.data);
      };

      mediaRecorder.onstop = () => {
        const blob = new Blob(chunks, { type: "audio/wav" });
        setAudioBlob(blob);
        stream.getTracks().forEach((track) => track.stop());
        console.log("[VoiceRecorder] –ê—É–¥–∏–æ –∑–∞–ø–∏—Å–∞–Ω–æ, blob:", blob);
        if (onAudioReady) onAudioReady(blob);
      };

      mediaRecorder.start();
      setIsRecording(true);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏–æ:", error);
      setError("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É");
    }
  };

  const handleStopRecording = () => {
    setIsRecording(false);
    console.log("[VoiceRecorder] –°—Ç–æ–ø –∑–∞–ø–∏—Å–∏");
    if (mediaRecorderRef.current && mediaRecorderRef.current.state !== "inactive") {
      mediaRecorderRef.current.stop();
    }
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ, –µ—Å–ª–∏ –æ–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–æ
    setTimeout(() => {
      if (audioBlob) {
        console.log("[VoiceRecorder] –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ –Ω–∞ backend...");
        handleSendAudio();
      }
    }, 100); // –Ω–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
  };

  const handleSendAudio = async () => {
    if (!audioBlob || isProcessing) return;

    onProcessingChange(true);
    setError("");
    setProgress("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ...");
    console.log("[VoiceRecorder] handleSendAudio: –æ—Ç–ø—Ä–∞–≤–∫–∞ blob:", audioBlob);

    try {
      // –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ avatarService
      const result = await avatarService.processAudioInput(audioBlob);
      console.log("[VoiceRecorder] –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç backend:", result);

      setProgress("–ì–æ—Ç–æ–≤–æ!");

      // –ü–µ—Ä–µ–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞–≤–µ—Ä—Ö
      if (onResponseReceived) {
        onResponseReceived({
          text: result.aiResponse,
          audioUrl: result.audioUrl,
        });
      }

      setAudioBlob(null);

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞—É–¥–∏–æ
      const audio = new Audio(result.audioUrl);
      audio.play().catch((err) => {
        console.error("–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:", err);
        setError("–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ");
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ:", error);
      setError(
        error instanceof Error ? error.message : "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ",
      );
    } finally {
      onProcessingChange(false);
      setProgress("");
    }
  };

  return (
    <div className="space-y-4">
      {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å—å—é */}
      <div className="flex justify-center space-x-4">
        {!isRecording ? (
          <button
            onClick={handleStartRecording}
            disabled={!isConnected || isProcessing}
            className="btn-primary disabled:opacity-50 disabled:cursor-not-allowed"
          >
            üé§ –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å
          </button>
        ) : (
          <button onClick={handleStopRecording} className="btn-secondary">
            ‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å
          </button>
        )}
      </div>

      {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–ø–∏—Å–∏ */}
      {isRecording && (
        <div className="text-center">
          <div className="inline-flex items-center px-4 py-2 bg-red-100 text-red-800 rounded-full">
            <div className="w-3 h-3 bg-red-500 rounded-full mr-2 animate-pulse"></div>
            –ó–∞–ø–∏—Å—å...
          </div>
        </div>
      )}

      {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ */}
      {progress && (
        <div className="text-center">
          <div className="inline-flex items-center px-4 py-2 bg-blue-100 text-blue-800 rounded-full">
            <div className="loading-spinner w-4 h-4 border-2 border-blue-500 border-t-transparent rounded-full mr-2"></div>
            {progress}
          </div>
        </div>
      )}

      {/* –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ */}
      {error && (
        <div className="text-center">
          <div className="inline-flex items-center px-4 py-2 bg-red-100 text-red-800 rounded-full">
            <span className="mr-2">‚ö†Ô∏è</span>
            {error}
          </div>
        </div>
      )}

      {/* –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ */}
      {audioBlob && (
        <div className="space-y-2">
          <p className="text-sm text-gray-600">–ó–∞–ø–∏—Å–∞–Ω–Ω–æ–µ –∞—É–¥–∏–æ:</p>
          <audio controls className="w-full">
            <source src={URL.createObjectURL(audioBlob)} type="audio/wav" />
            –í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞—É–¥–∏–æ.
          </audio>

          <div className="flex justify-center space-x-2">
            <button
              onClick={handleSendAudio}
              disabled={isProcessing}
              className="btn-primary disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {isProcessing ? "–û–±—Ä–∞–±–æ—Ç–∫–∞..." : "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"}
            </button>

            <button
              onClick={() => {
                setAudioBlob(null);
                setError("");
                setProgress("");
              }}
              disabled={isProcessing}
              className="btn-secondary disabled:opacity-50 disabled:cursor-not-allowed"
            >
              –û—Ç–º–µ–Ω–∏—Ç—å
            </button>
          </div>
        </div>
      )}

      {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ */}
      <div className="text-xs text-gray-500 text-center">
        <p>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∑–∞–ø–∏—Å–∏ –∏ –≥–æ–≤–æ—Ä–∏—Ç–µ —á–µ—Ç–∫–æ –≤ –º–∏–∫—Ä–æ—Ñ–æ–Ω</p>
        <p>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 5 –º–∏–Ω—É—Ç</p>
      </div>
    </div>
  );
};

export default VoiceRecorder;
