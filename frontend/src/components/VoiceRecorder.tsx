import React, { useState } from 'react'

interface VoiceRecorderProps {
  isConnected: boolean
  isProcessing: boolean
  onProcessingChange: (processing: boolean) => void
}

const VoiceRecorder: React.FC<VoiceRecorderProps> = ({ 
  isConnected, 
  isProcessing, 
  onProcessingChange 
}) => {
  const [isRecording, setIsRecording] = useState(false)
  const [audioBlob, setAudioBlob] = useState<Blob | null>(null)

  const handleStartRecording = async () => {
    if (!isConnected || isProcessing) return

    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true })
      const mediaRecorder = new MediaRecorder(stream)
      const chunks: Blob[] = []

      mediaRecorder.ondataavailable = (event) => {
        chunks.push(event.data)
      }

      mediaRecorder.onstop = () => {
        const blob = new Blob(chunks, { type: 'audio/wav' })
        setAudioBlob(blob)
        stream.getTracks().forEach(track => track.stop())
      }

      mediaRecorder.start()
      setIsRecording(true)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏–æ:', error)
    }
  }

  const handleStopRecording = () => {
    setIsRecording(false)
    // TODO: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ
  }

  const handleSendAudio = async () => {
    if (!audioBlob || isProcessing) return

    onProcessingChange(true)
    
    try {
      // TODO: –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ WebSocket
      // TODO: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–≤–∞—Ç–∞—Ä–∞
      
      // –ò–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
      await new Promise(resolve => setTimeout(resolve, 2000))
      
      setAudioBlob(null)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ:', error)
    } finally {
      onProcessingChange(false)
    }
  }

  return (
    <div className="space-y-4">
      {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å—å—é */}
      <div className="flex justify-center space-x-4">
        {!isRecording ? (
          <button
            onClick={handleStartRecording}
            disabled={!isConnected || isProcessing}
            className="btn-primary disabled:opacity-50 disabled:cursor-not-allowed"
          >
            üé§ –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å
          </button>
        ) : (
          <button
            onClick={handleStopRecording}
            className="btn-secondary"
          >
            ‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å
          </button>
        )}
      </div>

      {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–ø–∏—Å–∏ */}
      {isRecording && (
        <div className="text-center">
          <div className="inline-flex items-center px-4 py-2 bg-red-100 text-red-800 rounded-full">
            <div className="w-3 h-3 bg-red-500 rounded-full mr-2 animate-pulse"></div>
            –ó–∞–ø–∏—Å—å...
          </div>
        </div>
      )}

      {/* –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ */}
      {audioBlob && (
        <div className="space-y-2">
          <p className="text-sm text-gray-600">–ó–∞–ø–∏—Å–∞–Ω–Ω–æ–µ –∞—É–¥–∏–æ:</p>
          <audio controls className="w-full">
            <source src={URL.createObjectURL(audioBlob)} type="audio/wav" />
            –í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞—É–¥–∏–æ.
          </audio>
          
          <div className="flex justify-center space-x-2">
            <button
              onClick={handleSendAudio}
              disabled={isProcessing}
              className="btn-primary disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {isProcessing ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å'}
            </button>
            
            <button
              onClick={() => setAudioBlob(null)}
              disabled={isProcessing}
              className="btn-secondary disabled:opacity-50 disabled:cursor-not-allowed"
            >
              –û—Ç–º–µ–Ω–∏—Ç—å
            </button>
          </div>
        </div>
      )}

      {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ */}
      <div className="text-xs text-gray-500 text-center">
        <p>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∑–∞–ø–∏—Å–∏ –∏ –≥–æ–≤–æ—Ä–∏—Ç–µ —á–µ—Ç–∫–æ –≤ –º–∏–∫—Ä–æ—Ñ–æ–Ω</p>
        <p>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 5 –º–∏–Ω—É—Ç</p>
      </div>
    </div>
  )
}

export default VoiceRecorder 