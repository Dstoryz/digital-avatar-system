#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, —á–∞—Å—Ç–æ—Ç—É –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏ –∏ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
"""

import os
import sys
import json
from typing import Dict, List, Any
from datetime import datetime
import subprocess
import re

def get_audio_info(filepath: str) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞—É–¥–∏–æ—Ñ–∞–π–ª–µ —Å –ø–æ–º–æ—â—å—é ffprobe"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º ffprobe –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞—É–¥–∏–æ
        cmd = [
            'ffprobe', 
            '-v', 'quiet',
            '-print_format', 'json',
            '-show_format',
            '-show_streams',
            filepath
        ]
        
        result = subprocess.run(cmd, capture_output=True, text=True, check=True)
        data = json.loads(result.stdout)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        format_info = data.get('format', {})
        audio_stream = None
        
        # –ò—â–µ–º –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫
        for stream in data.get('streams', []):
            if stream.get('codec_type') == 'audio':
                audio_stream = stream
                break
        
        if not audio_stream:
            raise Exception("–ê—É–¥–∏–æ –ø–æ—Ç–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        duration = float(format_info.get('duration', 0))
        file_size = float(format_info.get('size', 0)) / (1024 * 1024)  # MB
        bit_rate = int(format_info.get('bit_rate', 0)) / 1000 if format_info.get('bit_rate') else 0  # kbps
        
        sample_rate = int(audio_stream.get('sample_rate', 0))
        channels = int(audio_stream.get('channels', 1))
        codec = audio_stream.get('codec_name', 'unknown')
        
        return {
            'filename': os.path.basename(filepath),
            'filepath': filepath,
            'duration_seconds': duration,
            'duration_formatted': format_duration(duration),
            'file_size_mb': round(file_size, 2),
            'bit_rate_kbps': round(bit_rate, 1),
            'sample_rate_hz': sample_rate,
            'channels': channels,
            'codec': codec,
            'format': format_info.get('format_name', 'unknown')
        }
        
    except subprocess.CalledProcessError as e:
        return {
            'filename': os.path.basename(filepath),
            'filepath': filepath,
            'error': f"–û—à–∏–±–∫–∞ ffprobe: {e.stderr}"
        }
    except Exception as e:
        return {
            'filename': os.path.basename(filepath),
            'filepath': filepath,
            'error': str(e)
        }

def format_duration(seconds: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    if seconds < 60:
        return f"{seconds:.1f}—Å"
    elif seconds < 3600:
        minutes = int(seconds // 60)
        secs = seconds % 60
        return f"{minutes}–º {secs:.1f}—Å"
    else:
        hours = int(seconds // 3600)
        minutes = int((seconds % 3600) // 60)
        secs = seconds % 60
        return f"{hours}—á {minutes}–º {secs:.1f}—Å"

def analyze_audio_quality(audio_info: Dict[str, Any]) -> Dict[str, Any]:
    """–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞"""
    if 'error' in audio_info:
        return {
            'quality_score': 0,
            'max_score': 6,
            'issues': ['–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞'],
            'recommendations': ['–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞'],
            'status': '‚ùå'
        }
    
    quality_score = 0
    issues = []
    recommendations = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    duration = audio_info['duration_seconds']
    if duration >= 30:  # 30 —Å–µ–∫—É–Ω–¥ –∏–ª–∏ –±–æ–ª—å—à–µ
        quality_score += 2
    elif duration >= 10:  # 10-30 —Å–µ–∫—É–Ω–¥
        quality_score += 1
        issues.append('–ö–æ—Ä–æ—Ç–∫–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å')
        recommendations.append('–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–ø–∏—Å—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é 30+ —Å–µ–∫—É–Ω–¥')
    else:
        issues.append('–û—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∞—è –∑–∞–ø–∏—Å—å')
        recommendations.append('–ó–∞–ø–∏—Å—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è –¥–ª—è –æ–±—É—á–µ–Ω–∏—è')
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Å—Ç–æ—Ç—ã –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
    sample_rate = audio_info['sample_rate_hz']
    if sample_rate >= 44100:
        quality_score += 2
    elif sample_rate >= 22050:
        quality_score += 1
        issues.append('–ù–∏–∑–∫–∞—è —á–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏')
        recommendations.append('–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 44.1kHz –∏–ª–∏ –≤—ã—à–µ')
    else:
        issues.append('–û—á–µ–Ω—å –Ω–∏–∑–∫–∞—è —á–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏')
        recommendations.append('–ö–∞—á–µ—Å—Ç–≤–æ –∑–≤—É–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º')
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏—Ç—Ä–µ–π—Ç–∞
    bit_rate = audio_info['bit_rate_kbps']
    if bit_rate >= 128:
        quality_score += 1
    elif bit_rate >= 64:
        quality_score += 0.5
        issues.append('–ù–∏–∑–∫–∏–π –±–∏—Ç—Ä–µ–π—Ç')
        recommendations.append('–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –±–∏—Ç—Ä–µ–π—Ç 128kbps –∏–ª–∏ –≤—ã—à–µ')
    else:
        issues.append('–û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π –±–∏—Ç—Ä–µ–π—Ç')
        recommendations.append('–ö–∞—á–µ—Å—Ç–≤–æ —Å–∂–∞—Ç–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º')
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞–Ω–∞–ª–æ–≤
    channels = audio_info['channels']
    if channels == 1:
        quality_score += 1
        # –ú–æ–Ω–æ - —Ö–æ—Ä–æ—à–æ –¥–ª—è TTS
    elif channels == 2:
        quality_score += 0.5
        issues.append('–°—Ç–µ—Ä–µ–æ –∑–∞–ø–∏—Å—å')
        recommendations.append('–ú–æ–Ω–æ –∑–∞–ø–∏—Å—å –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–µ–µ –¥–ª—è TTS')
    else:
        issues.append('–ú–Ω–æ–≥–æ–∫–∞–Ω–∞–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å')
        recommendations.append('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–æ–Ω–æ –∏–ª–∏ —Å—Ç–µ—Ä–µ–æ –∑–∞–ø–∏—Å—å')
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    if quality_score >= 4:
        status = '‚úÖ'
    elif quality_score >= 2:
        status = '‚ö†Ô∏è'
    else:
        status = '‚ùå'
    
    return {
        'quality_score': quality_score,
        'max_score': 6,
        'issues': issues,
        'recommendations': recommendations,
        'status': status
    }

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞"""
    audio_dir = 'test_data/audio'
    
    if not os.path.exists(audio_dir):
        print(f"‚ùå –ü–∞–ø–∫–∞ {audio_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    print("üé§ –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ê–£–î–ò–û–§–ê–ô–õ–û–í –î–õ–Ø –¶–ò–§–†–û–í–û–ì–û –ê–í–ê–¢–ê–†–ê")
    print("=" * 60)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
    audio_files = []
    for filename in os.listdir(audio_dir):
        if filename.lower().endswith(('.ogg', '.wav', '.mp3', '.m4a', '.flac')):
            audio_files.append(os.path.join(audio_dir, filename))
    
    if not audio_files:
        print("‚ùå –ê—É–¥–∏–æ—Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    print(f"üéµ –ù–∞–π–¥–µ–Ω–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤: {len(audio_files)}")
    print()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    results = []
    total_duration = 0
    
    for filepath in audio_files:
        audio_info = get_audio_info(filepath)
        quality_analysis = analyze_audio_quality(audio_info)
        
        result = {**audio_info, **quality_analysis}
        results.append(result)
        
        if 'error' not in audio_info:
            total_duration += audio_info['duration_seconds']
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if 'error' in audio_info:
            print(f"{result['status']} {result['filename']}: –û–®–ò–ë–ö–ê - {result['error']}")
        else:
            print(f"{result['status']} {result['filename']}")
            print(f"   ‚è±Ô∏è  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {result['duration_formatted']}")
            print(f"   üì¶ –†–∞–∑–º–µ—Ä: {result['file_size_mb']}MB")
            print(f"   üéµ –ß–∞—Å—Ç–æ—Ç–∞: {result['sample_rate_hz']}Hz")
            print(f"   üîä –ö–∞–Ω–∞–ª—ã: {result['channels']}")
            print(f"   üìä –ë–∏—Ç—Ä–µ–π—Ç: {result['bit_rate_kbps']}kbps")
            print(f"   üéØ –ö–∞—á–µ—Å—Ç–≤–æ: {result['quality_score']}/{result['max_score']}")
            
            if result['issues']:
                print(f"   ‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º—ã: {', '.join(result['issues'])}")
            if result['recommendations']:
                print(f"   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {', '.join(result['recommendations'])}")
        print()
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    valid_results = [r for r in results if 'error' not in r]
    if valid_results:
        print("üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        print("=" * 60)
        
        avg_score = sum(r['quality_score'] for r in valid_results) / len(valid_results)
        excellent = len([r for r in valid_results if r['quality_score'] >= 4])
        good = len([r for r in valid_results if r['quality_score'] >= 3])
        acceptable = len([r for r in valid_results if r['quality_score'] >= 2])
        poor = len([r for r in valid_results if r['quality_score'] < 2])
        
        total_duration_minutes = total_duration / 60
        
        print(f"   üéµ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(results)}")
        print(f"   ‚úÖ –û—Ç–ª–∏—á–Ω—ã—Ö (4-6 –±–∞–ª–ª–æ–≤): {excellent}")
        print(f"   üî∂ –•–æ—Ä–æ—à–∏—Ö (3 –±–∞–ª–ª–∞): {good}")
        print(f"   ‚ö†Ô∏è  –ü—Ä–∏–µ–º–ª–µ–º—ã—Ö (2 –±–∞–ª–ª–∞): {acceptable}")
        print(f"   ‚ùå –ü–ª–æ—Ö–∏—Ö (<2 –±–∞–ª–ª–æ–≤): {poor}")
        print(f"   üéØ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {avg_score:.1f}/6")
        print(f"   ‚è±Ô∏è  –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {total_duration_minutes:.1f} –º–∏–Ω—É—Ç")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
        print()
        print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ:")
        print("=" * 60)
        
        if poor > 0:
            print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∞–π–ª—ã —Ç—Ä–µ–±—É—é—Ç –∑–∞–º–µ–Ω—ã:")
            for r in valid_results:
                if r['quality_score'] < 2:
                    print(f"   - {r['filename']}: {', '.join(r['issues'])}")
        
        if total_duration_minutes < 5:
            print("‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—É–¥–∏–æ–º–∞—Ç–µ—Ä–∏–∞–ª–∞:")
            print(f"   - –¢–µ–∫—É—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {total_duration_minutes:.1f} –º–∏–Ω—É—Ç")
            print("   - –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: 5-10 –º–∏–Ω—É—Ç")
            print("   - –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–µ–π")
        
        if avg_score < 4:
            print("üî∂ –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            print("   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∞—Å—Ç–æ—Ç—É –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏ 44.1kHz –∏–ª–∏ –≤—ã—à–µ")
            print("   - –ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ –≤ –º–æ–Ω–æ —Ñ–æ—Ä–º–∞—Ç–µ")
            print("   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏—Ç—Ä–µ–π—Ç 128kbps –∏–ª–∏ –≤—ã—à–µ")
            print("   - –ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ —Ñ—Ä–∞–∑—ã –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é 30+ —Å–µ–∫—É–Ω–¥")
            print("   - –ò–∑–±–µ–≥–∞–π—Ç–µ —Ñ–æ–Ω–æ–≤–æ–≥–æ —à—É–º–∞")
        
        if excellent >= len(valid_results) * 0.7 and total_duration_minutes >= 5:
            print("‚úÖ –û—Ç–ª–∏—á–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞! –ê—É–¥–∏–æ –≥–æ—Ç–æ–≤–æ –¥–ª—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞.")
        elif good >= len(valid_results) * 0.7 and total_duration_minutes >= 3:
            print("üî∂ –•–æ—Ä–æ—à–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞. –ú–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ TTS.")
        else:
            print("‚ö†Ô∏è  –¢—Ä–µ–±—É–µ—Ç—Å—è —É–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∞—É–¥–∏–æ –ø–µ—Ä–µ–¥ –æ–±—É—á–µ–Ω–∏–µ–º TTS.")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON
    output_file = 'test_data/audio_analysis_results.json'
    os.makedirs(os.path.dirname(output_file), exist_ok=True)
    
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump({
            'analysis_date': datetime.now().isoformat(),
            'total_files': len(results),
            'total_duration_minutes': total_duration / 60 if valid_results else 0,
            'results': results,
            'summary': {
                'avg_score': avg_score if valid_results else 0,
                'excellent_count': excellent if valid_results else 0,
                'good_count': good if valid_results else 0,
                'acceptable_count': acceptable if valid_results else 0,
                'poor_count': poor if valid_results else 0
            }
        }, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_file}")

if __name__ == "__main__":
    main() 