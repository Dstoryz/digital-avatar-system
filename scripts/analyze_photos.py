#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ, –æ—Å–≤–µ—â–µ–Ω–∏–µ, —Ñ–æ–Ω –∏ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
"""

import os
import sys
from PIL import Image, ImageStat
from typing import Dict, List, Tuple, Any
import json
from datetime import datetime

def analyze_brightness(image: Image.Image) -> float:
    """–ê–Ω–∞–ª–∏–∑ —è—Ä–∫–æ—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    stat = ImageStat.Stat(image.convert('L'))
    return stat.mean[0]

def analyze_contrast(image: Image.Image) -> float:
    """–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    stat = ImageStat.Stat(image.convert('L'))
    return stat.stddev[0]

def analyze_color_distribution(image: Image.Image) -> Dict[str, float]:
    """–ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤"""
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if image.mode != 'RGB':
        image = image.convert('RGB')
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–Ω–∞–ª–∞–º
    stat = ImageStat.Stat(image)
    
    return {
        'red_mean': stat.mean[0],
        'green_mean': stat.mean[1], 
        'blue_mean': stat.mean[2],
        'red_std': stat.stddev[0],
        'green_std': stat.stddev[1],
        'blue_std': stat.stddev[2]
    }

def analyze_face_area_estimation(image: Image.Image) -> Dict[str, Any]:
    """–ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –æ–±–ª–∞—Å—Ç–∏ –ª–∏—Ü–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)"""
    width, height = image.size
    
    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ª–∏—Ü–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —á–∞—Å—Ç–∏
    center_x, center_y = width // 2, height // 2
    face_size = min(width, height) // 3
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è—Ä–∫–æ—Å—Ç—å –≤ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
    center_region = image.crop((
        center_x - face_size//2,
        center_y - face_size//2, 
        center_x + face_size//2,
        center_y + face_size//2
    ))
    
    center_brightness = analyze_brightness(center_region)
    overall_brightness = analyze_brightness(image)
    
    return {
        'center_brightness': center_brightness,
        'overall_brightness': overall_brightness,
        'brightness_ratio': center_brightness / overall_brightness if overall_brightness > 0 else 1,
        'face_area_estimated': face_size * face_size
    }

def get_image_format_info(image: Image.Image) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–æ—Ä–º–∞—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    return {
        'format': image.format,
        'mode': image.mode,
        'dpi': image.info.get('dpi', (None, None)),
        'exif': bool(image.getexif())
    }

def analyze_photo(filepath: str) -> Dict[str, Any]:
    """–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
    try:
        with Image.open(filepath) as image:
            width, height = image.size
            file_size = os.path.getsize(filepath) / (1024 * 1024)  # MB
            
            # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            aspect_ratio = width / height
            
            # –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞
            brightness = analyze_brightness(image)
            contrast = analyze_contrast(image)
            colors = analyze_color_distribution(image)
            face_analysis = analyze_face_area_estimation(image)
            format_info = get_image_format_info(image)
            
            # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
            quality_score = 0
            issues = []
            recommendations = []
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
            if width >= 512 and height >= 512:
                quality_score += 2
            elif width >= 256 and height >= 256:
                quality_score += 1
                issues.append('–ù–∏–∑–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ')
                recommendations.append('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ç–æ —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º 512x512 –∏–ª–∏ –≤—ã—à–µ')
            else:
                issues.append('–û—á–µ–Ω—å –Ω–∏–∑–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ')
                recommendations.append('–§–æ—Ç–æ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞')
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
            if file_size >= 0.1:
                quality_score += 1
            else:
                issues.append('–ú–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞')
                recommendations.append('–í–æ–∑–º–æ–∂–Ω–æ, —Ñ–æ—Ç–æ —Å–ª–∏—à–∫–æ–º —Å–∂–∞—Ç–æ')
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω
            if 0.7 <= aspect_ratio <= 1.3:
                quality_score += 1
            else:
                issues.append('–ù–µ–æ–±—ã—á–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω')
                recommendations.append('–õ—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ –∏–ª–∏ –±–ª–∏–∑–∫–∏–µ –∫ –∫–≤–∞–¥—Ä–∞—Ç—É —Ñ–æ—Ç–æ')
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —è—Ä–∫–æ—Å—Ç–∏
            if 50 <= brightness <= 200:
                quality_score += 1
            elif brightness < 30:
                issues.append('–°–ª–∏—à–∫–æ–º —Ç–µ–º–Ω–æ–µ —Ñ–æ—Ç–æ')
                recommendations.append('–§–æ—Ç–æ —Å–ª–∏—à–∫–æ–º —Ç–µ–º–Ω–æ–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª—É—á—à–µ –æ—Å–≤–µ—â–µ–Ω–Ω—ã–µ —Å–Ω–∏–º–∫–∏')
            elif brightness > 220:
                issues.append('–°–ª–∏—à–∫–æ–º —è—Ä–∫–æ–µ —Ñ–æ—Ç–æ')
                recommendations.append('–§–æ—Ç–æ –ø–µ—Ä–µ—Å–≤–µ—á–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ç–æ —Å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º –æ—Å–≤–µ—â–µ–Ω–∏–µ–º')
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏
            if contrast >= 20:
                quality_score += 1
            else:
                issues.append('–ù–∏–∑–∫–∞—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å')
                recommendations.append('–§–æ—Ç–æ —Å–ª–∏—à–∫–æ–º –ø–ª–æ—Å–∫–æ–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ç–æ —Å –ª—É—á—à–∏–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç–æ–º')
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–ª–∞—Å—Ç–∏ –ª–∏—Ü–∞
            if face_analysis['brightness_ratio'] >= 0.8:
                quality_score += 1
            else:
                issues.append('–ü—Ä–æ–±–ª–µ–º—ã —Å –æ—Å–≤–µ—â–µ–Ω–∏–µ–º –ª–∏—Ü–∞')
                recommendations.append('–õ–∏—Ü–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–ª–æ—Ö–æ –æ—Å–≤–µ—â–µ–Ω–æ')
            
            return {
                'filename': os.path.basename(filepath),
                'filepath': filepath,
                'size': f'{width}x{height}',
                'file_size_mb': round(file_size, 2),
                'aspect_ratio': round(aspect_ratio, 2),
                'brightness': round(brightness, 1),
                'contrast': round(contrast, 1),
                'quality_score': quality_score,
                'max_score': 6,
                'issues': issues,
                'recommendations': recommendations,
                'face_analysis': face_analysis,
                'color_analysis': colors,
                'format_info': format_info,
                'status': '‚úÖ' if quality_score >= 4 else '‚ö†Ô∏è' if quality_score >= 3 else '‚ùå'
            }
            
    except Exception as e:
        return {
            'filename': os.path.basename(filepath),
            'filepath': filepath,
            'error': str(e),
            'status': '‚ùå'
        }

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞"""
    photos_dir = 'test_data/photos'
    
    if not os.path.exists(photos_dir):
        print(f"‚ùå –ü–∞–ø–∫–∞ {photos_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    print("üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –§–û–¢–û–ì–†–ê–§–ò–ô –î–õ–Ø –¶–ò–§–†–û–í–û–ì–û –ê–í–ê–¢–ê–†–ê")
    print("=" * 60)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
    photo_files = []
    for filename in os.listdir(photos_dir):
        if filename.lower().endswith(('.jpg', '.jpeg', '.png', '.bmp')):
            photo_files.append(os.path.join(photos_dir, filename))
    
    if not photo_files:
        print("‚ùå –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    print(f"üì∏ –ù–∞–π–¥–µ–Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {len(photo_files)}")
    print()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
    results = []
    for filepath in photo_files:
        result = analyze_photo(filepath)
        results.append(result)
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if 'error' in result:
            print(f"{result['status']} {result['filename']}: –û–®–ò–ë–ö–ê - {result['error']}")
        else:
            print(f"{result['status']} {result['filename']}")
            print(f"   üìè –†–∞–∑–º–µ—Ä: {result['size']}")
            print(f"   üì¶ –í–µ—Å: {result['file_size_mb']}MB")
            print(f"   üìê –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: {result['aspect_ratio']}")
            print(f"   üí° –Ø—Ä–∫–æ—Å—Ç—å: {result['brightness']}")
            print(f"   üé® –ö–æ–Ω—Ç—Ä–∞—Å—Ç: {result['contrast']}")
            print(f"   üéØ –ö–∞—á–µ—Å—Ç–≤–æ: {result['quality_score']}/{result['max_score']}")
            
            if result['issues']:
                print(f"   ‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º—ã: {', '.join(result['issues'])}")
            if result['recommendations']:
                print(f"   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {', '.join(result['recommendations'])}")
        print()
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    valid_results = [r for r in results if 'error' not in r]
    if valid_results:
        print("üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        print("=" * 60)
        
        avg_score = sum(r['quality_score'] for r in valid_results) / len(valid_results)
        excellent = len([r for r in valid_results if r['quality_score'] >= 5])
        good = len([r for r in valid_results if r['quality_score'] >= 4])
        acceptable = len([r for r in valid_results if r['quality_score'] >= 3])
        poor = len([r for r in valid_results if r['quality_score'] < 3])
        
        print(f"   üì∏ –í—Å–µ–≥–æ —Ñ–æ—Ç–æ: {len(results)}")
        print(f"   ‚úÖ –û—Ç–ª–∏—á–Ω—ã—Ö (5-6 –±–∞–ª–ª–æ–≤): {excellent}")
        print(f"   üî∂ –•–æ—Ä–æ—à–∏—Ö (4 –±–∞–ª–ª–∞): {good}")
        print(f"   ‚ö†Ô∏è  –ü—Ä–∏–µ–º–ª–µ–º—ã—Ö (3 –±–∞–ª–ª–∞): {acceptable}")
        print(f"   ‚ùå –ü–ª–æ—Ö–∏—Ö (<3 –±–∞–ª–ª–æ–≤): {poor}")
        print(f"   üéØ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {avg_score:.1f}/6")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
        print()
        print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ:")
        print("=" * 60)
        
        if poor > 0:
            print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–æ—Ç–æ —Ç—Ä–µ–±—É—é—Ç –∑–∞–º–µ–Ω—ã:")
            for r in valid_results:
                if r['quality_score'] < 3:
                    print(f"   - {r['filename']}: {', '.join(r['issues'])}")
        
        if avg_score < 4.5:
            print("üî∂ –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            print("   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ç–æ —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º 512x512 –∏–ª–∏ –≤—ã—à–µ")
            print("   - –û–±–µ—Å–ø–µ—á—å—Ç–µ —Ö–æ—Ä–æ—à–µ–µ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ")
            print("   - –ò–∑–±–µ–≥–∞–π—Ç–µ —Ä–µ–∑–∫–∏—Ö —Ç–µ–Ω–µ–π –Ω–∞ –ª–∏—Ü–µ")
            print("   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Ñ–æ–Ω")
            print("   - –§–æ—Ç–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–µ—Ç–∫–∏–º–∏ –∏ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–º–∏")
        
        if excellent >= len(valid_results) * 0.7:
            print("‚úÖ –û—Ç–ª–∏—á–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞! –§–æ—Ç–æ –≥–æ—Ç–æ–≤—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞.")
        elif good >= len(valid_results) * 0.7:
            print("üî∂ –•–æ—Ä–æ—à–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞. –ú–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –∞–≤–∞—Ç–∞—Ä–æ–º.")
        else:
            print("‚ö†Ô∏è  –¢—Ä–µ–±—É–µ—Ç—Å—è —É–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ —Ñ–æ—Ç–æ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –∞–≤–∞—Ç–∞—Ä–∞.")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON
    output_file = 'test_data/photo_analysis_results.json'
    os.makedirs(os.path.dirname(output_file), exist_ok=True)
    
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump({
            'analysis_date': datetime.now().isoformat(),
            'total_photos': len(results),
            'results': results,
            'summary': {
                'avg_score': avg_score if valid_results else 0,
                'excellent_count': excellent if valid_results else 0,
                'good_count': good if valid_results else 0,
                'acceptable_count': acceptable if valid_results else 0,
                'poor_count': poor if valid_results else 0
            }
        }, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_file}")

if __name__ == "__main__":
    main() 