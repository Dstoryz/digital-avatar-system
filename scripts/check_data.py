#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ –∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python3 scripts/check_data.py
"""

import os
import sys
from pathlib import Path
from typing import List, Dict, Tuple

TEST_DATA_DIR = Path("test_data")

def check_directory_structure() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫."""
    print("üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫...")
    
    required_dirs = [
        "test_data",
        "test_data/photos",
        "test_data/audio", 
        "test_data/processed",
        "test_data/processed/avatars",
        "test_data/processed/voice_clips",
        "test_data/processed/animations"
    ]
    
    missing_dirs = []
    for dir_path in required_dirs:
        if not Path(dir_path).exists():
            missing_dirs.append(dir_path)
    
    if missing_dirs:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞–ø–∫–∏: {', '.join(missing_dirs)}")
        return False
    else:
        print("‚úÖ –í—Å–µ –ø–∞–ø–∫–∏ —Å–æ–∑–¥–∞–Ω—ã")
        return True

def check_photos() -> Tuple[bool, List[str]]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π."""
    print("\nüì∏ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π...")
    
    photos_dir = TEST_DATA_DIR / "photos"
    photo_files = list(photos_dir.glob("*"))
    
    if not photo_files:
        print("‚ö†Ô∏è  –ü–∞–ø–∫–∞ test_data/photos/ –ø—É—Å—Ç–∞")
        print("   –î–æ–±–∞–≤—å—Ç–µ 3-5 –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ –¥–µ–≤–æ—á–∫–∏")
        return False, []
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(photo_files)}")
    
    valid_extensions = {'.jpg', '.jpeg', '.png', '.webp'}
    valid_photos = []
    issues = []
    
    for photo_file in photo_files:
        if photo_file.suffix.lower() in valid_extensions:
            file_size = photo_file.stat().st_size
            size_mb = file_size / (1024 * 1024)
            
            if size_mb > 10:
                issues.append(f"–§–∞–π–ª {photo_file.name} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {size_mb:.1f}MB")
            else:
                valid_photos.append(photo_file.name)
                print(f"   ‚úÖ {photo_file.name} ({size_mb:.1f}MB)")
        else:
            issues.append(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: {photo_file.name}")
    
    if issues:
        print("‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º—ã:")
        for issue in issues:
            print(f"   - {issue}")
    
    if len(valid_photos) >= 3:
        print(f"‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–æ—Ç–æ: {len(valid_photos)} —Ñ–∞–π–ª–æ–≤")
        return True, valid_photos
    else:
        print(f"‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–æ—Ç–æ: {len(valid_photos)} –∏–∑ 3-5")
        return False, valid_photos

def check_audio() -> Tuple[bool, List[str]]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤."""
    print("\nüé§ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤...")
    
    audio_dir = TEST_DATA_DIR / "audio"
    audio_files = list(audio_dir.glob("*"))
    
    if not audio_files:
        print("‚ö†Ô∏è  –ü–∞–ø–∫–∞ test_data/audio/ –ø—É—Å—Ç–∞")
        print("   –î–æ–±–∞–≤—å—Ç–µ 5-10 –º–∏–Ω—É—Ç –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–µ–π –¥–µ–≤–æ—á–∫–∏")
        return False, []
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(audio_files)}")
    
    valid_extensions = {'.wav', '.mp3', '.m4a', '.flac'}
    valid_audio = []
    issues = []
    
    for audio_file in audio_files:
        if audio_file.suffix.lower() in valid_extensions:
            file_size = audio_file.stat().st_size
            size_mb = file_size / (1024 * 1024)
            
            # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (1MB ‚âà 1 –º–∏–Ω—É—Ç–∞ –¥–ª—è WAV)
            estimated_duration = size_mb
            
            valid_audio.append(audio_file.name)
            print(f"   ‚úÖ {audio_file.name} ({size_mb:.1f}MB, ~{estimated_duration:.0f}–º–∏–Ω)")
        else:
            issues.append(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: {audio_file.name}")
    
    if issues:
        print("‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º—ã:")
        for issue in issues:
            print(f"   - {issue}")
    
    total_size_mb = sum((TEST_DATA_DIR / "audio" / f).stat().st_size / (1024 * 1024) for f in valid_audio)
    
    if total_size_mb >= 5:  # –ü—Ä–∏–º–µ—Ä–Ω–æ 5 –º–∏–Ω—É—Ç –∞—É–¥–∏–æ
        print(f"‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—É–¥–∏–æ: {len(valid_audio)} —Ñ–∞–π–ª–æ–≤ (~{total_size_mb:.0f} –º–∏–Ω—É—Ç)")
        return True, valid_audio
    else:
        print(f"‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—É–¥–∏–æ: ~{total_size_mb:.0f} –º–∏–Ω—É—Ç –∏–∑ 5-10")
        return False, valid_audio

def check_processed_files() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤."""
    print("\nüîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
    
    processed_dirs = [
        "test_data/processed/avatars",
        "test_data/processed/voice_clips", 
        "test_data/processed/animations"
    ]
    
    all_empty = True
    for dir_path in processed_dirs:
        files = list(Path(dir_path).glob("*"))
        if files:
            print(f"   üìÅ {dir_path}: {len(files)} —Ñ–∞–π–ª–æ–≤")
            all_empty = False
        else:
            print(f"   üìÅ {dir_path}: –ø—É—Å—Ç–æ (–Ω–æ—Ä–º–∞–ª—å–Ω–æ)")
    
    if all_empty:
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
    else:
        print("‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã")
    
    return True

def generate_summary(photos_ok: bool, audio_ok: bool, photos: List[str], audio: List[str]) -> None:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞."""
    print("\n" + "="*50)
    print("üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("="*50)
    
    if photos_ok and audio_ok:
        print("üéâ –î–ê–ù–ù–´–ï –ì–û–¢–û–í–´ –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!")
        print("\nüì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:")
        for photo in photos:
            print(f"   - {photo}")
        
        print("\nüé§ –ê—É–¥–∏–æ—Ñ–∞–π–ª—ã:")
        for audio_file in audio:
            print(f"   - {audio_file}")
        
        print("\nüöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("   1. –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –∑–∞–≥—Ä—É–∑–∫–∏")
        print("   2. –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
        print("   3. –ù–∞—á–∞—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é AI –º–æ–¥–µ–ª–µ–π")
        
    else:
        print("‚ö†Ô∏è  –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–û–î–ì–û–¢–û–í–ö–ê")
        
        if not photos_ok:
            print("\nüì∏ –î–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω—É–∂–Ω–æ:")
            print("   - –î–æ–±–∞–≤–∏—Ç—å 3-5 –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ –≤ test_data/photos/")
            print("   - –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: –º–∏–Ω–∏–º—É–º 512x512")
            print("   - –§–æ—Ä–º–∞—Ç—ã: JPG, PNG, WEBP")
            print("   - –†–∞–∑–º–µ—Ä: –º–∞–∫—Å–∏–º—É–º 10MB –∫–∞–∂–¥–æ–µ")
        
        if not audio_ok:
            print("\nüé§ –î–ª—è –∞—É–¥–∏–æ –Ω—É–∂–Ω–æ:")
            print("   - –î–æ–±–∞–≤–∏—Ç—å 5-10 –º–∏–Ω—É—Ç –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–µ–π –≤ test_data/audio/")
            print("   - –§–æ—Ä–º–∞—Ç—ã: WAV, MP3, M4A")
            print("   - –ß–∞—Å—Ç–æ—Ç–∞: 16kHz –∏–ª–∏ –≤—ã—à–µ")
            print("   - –†–∞–∑–Ω—ã–µ —ç–º–æ—Ü–∏–∏ –∏ –∏–Ω—Ç–æ–Ω–∞—Ü–∏–∏")
    
    print("\nüìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫:")
    print("   test_data/photos/     - –∏—Å—Ö–æ–¥–Ω—ã–µ —Ñ–æ—Ç–æ")
    print("   test_data/audio/      - –∏—Å—Ö–æ–¥–Ω—ã–µ –∞—É–¥–∏–æ")
    print("   test_data/processed/  - –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞")
    print("="*60)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    if not check_directory_structure():
        print("\n‚ùå –°–æ–∑–¥–∞–π—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞–ø–∫–∏:")
        print("   mkdir -p test_data/{photos,audio,processed/{avatars,voice_clips,animations}}")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ç–æ
    photos_ok, photos = check_photos()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É–¥–∏–æ
    audio_ok, audio = check_audio()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    check_processed_files()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    generate_summary(photos_ok, audio_ok, photos, audio)

if __name__ == "__main__":
    main() 