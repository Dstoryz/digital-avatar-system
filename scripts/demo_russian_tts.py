#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ä—É—Å—Å–∫–æ–π —Ä–µ—á–∏ –±–µ–∑ API –∫–ª—é—á–µ–π.

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä—É—Å—Å–∫–æ–π —Ä–µ—á–∏:
1. espeak (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
2. gtts (Google Text-to-Speech)
3. pitch shifting –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≥–æ–ª–æ—Å—É

–ê–≤—Ç–æ—Ä: AI Assistant
–í–µ—Ä—Å–∏—è: 1.0.0
"""

import os
import subprocess
import tempfile
import shutil
from pathlib import Path
from typing import Optional, Dict, Any

class DemoRussianTTS:
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ä—É—Å—Å–∫–æ–π —Ä–µ—á–∏."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ–º–æ TTS."""
        self.temp_dir = Path("data/temp")
        self.temp_dir.mkdir(parents=True, exist_ok=True)
        
        print("üé§ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ä—É—Å—Å–∫–æ–π —Ä–µ—á–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        self._check_available_tools()
    
    def _check_available_tools(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤."""
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ espeak
        try:
            subprocess.run(["espeak", "--version"], capture_output=True, check=True)
            print("‚úÖ espeak –¥–æ—Å—Ç—É–ø–µ–Ω")
            self.espeak_available = True
        except (subprocess.CalledProcessError, FileNotFoundError):
            print("‚ùå espeak –Ω–µ –Ω–∞–π–¥–µ–Ω")
            self.espeak_available = False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ gtts
        try:
            import gtts
            print("‚úÖ gtts –¥–æ—Å—Ç—É–ø–µ–Ω")
            self.gtts_available = True
        except ImportError:
            print("‚ùå gtts –Ω–µ –Ω–∞–π–¥–µ–Ω")
            self.gtts_available = False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ ffmpeg
        try:
            subprocess.run(["ffmpeg", "-version"], capture_output=True, check=True)
            print("‚úÖ ffmpeg –¥–æ—Å—Ç—É–ø–µ–Ω")
            self.ffmpeg_available = True
        except (subprocess.CalledProcessError, FileNotFoundError):
            print("‚ùå ffmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω")
            self.ffmpeg_available = False
    
    def synthesize_with_espeak(self, text: str, output_path: str) -> bool:
        """–°–∏–Ω—Ç–µ–∑ —Å –ø–æ–º–æ—â—å—é espeak."""
        if not self.espeak_available:
            return False
        
        try:
            cmd = [
                "espeak", 
                "-v", "ru",  # –†—É—Å—Å–∫–∏–π –≥–æ–ª–æ—Å
                "-s", "150",  # –°–∫–æ—Ä–æ—Å—Ç—å
                "-p", "50",   # –ü–∏—Ç—á
                "-a", "100",  # –ì—Ä–æ–º–∫–æ—Å—Ç—å
                f'"{text}"',
                "-w", output_path
            ]
            
            subprocess.run(cmd, check=True, capture_output=True)
            return True
            
        except subprocess.CalledProcessError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ espeak: {e}")
            return False
    
    def synthesize_with_gtts(self, text: str, output_path: str) -> bool:
        """–°–∏–Ω—Ç–µ–∑ —Å –ø–æ–º–æ—â—å—é Google TTS."""
        if not self.gtts_available:
            return False
        
        try:
            from gtts import gTTS
            
            tts = gTTS(text=text, lang='ru', slow=False)
            tts.save(output_path)
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ gtts: {e}")
            return False
    
    def apply_pitch_shift(self, input_path: str, output_path: str, pitch_shift: float = 1.2) -> bool:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ pitch shifting —Å –ø–æ–º–æ—â—å—é ffmpeg."""
        if not self.ffmpeg_available:
            # –ü—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –µ—Å–ª–∏ ffmpeg –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            shutil.copy(input_path, output_path)
            return True
        
        try:
            cmd = [
                "ffmpeg",
                "-i", input_path,
                "-af", f"asetrate=44100*{pitch_shift},aresample=44100",
                "-y",  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
                output_path
            ]
            
            subprocess.run(cmd, check=True, capture_output=True)
            return True
            
        except subprocess.CalledProcessError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ ffmpeg: {e}")
            return False
    
    def synthesize_russian(self, text: str, output_path: str, pitch_shift: float = 1.2) -> Dict[str, Any]:
        """
        –°–∏–Ω—Ç–µ–∑ —Ä—É—Å—Å–∫–æ–π —Ä–µ—á–∏.
        
        Args:
            text: –†—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞
            output_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ
            pitch_shift: –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–¥–≤–∏–≥–∞ –ø–∏—Ç—á–∞ (1.0 = –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ç–µ–∑–∞
        """
        print(f"üá∑üá∫ –°–∏–Ω—Ç–µ–∑ —Ä—É—Å—Å–∫–æ–π —Ä–µ—á–∏: '{text[:50]}...'")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        temp_file = self.temp_dir / "temp_synthesis.wav"
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Å–∏–Ω—Ç–µ–∑–∞
        synthesis_methods = [
            ("espeak", self.synthesize_with_espeak),
            ("gtts", self.synthesize_with_gtts)
        ]
        
        for method_name, method_func in synthesis_methods:
            print(f"üîß –ü–æ–ø—ã—Ç–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Å {method_name}...")
            
            if method_func(text, str(temp_file)):
                print(f"‚úÖ –°–∏–Ω—Ç–µ–∑ —Å {method_name} —É—Å–ø–µ—à–µ–Ω")
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º pitch shifting
                if pitch_shift != 1.0:
                    print(f"üéµ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ pitch shifting (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {pitch_shift})...")
                    self.apply_pitch_shift(str(temp_file), output_path, pitch_shift)
                else:
                    shutil.copy(str(temp_file), output_path)
                
                # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                if temp_file.exists():
                    temp_file.unlink()
                
                print(f"‚úÖ –†—É—Å—Å–∫–∞—è —Ä–µ—á—å —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–∞: {output_path}")
                return {
                    "success": True,
                    "method": method_name,
                    "output_path": output_path,
                    "pitch_shift": pitch_shift
                }
        
        # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –º–µ—Ç–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—á—å –Ω–∏ –æ–¥–Ω–∏–º –º–µ—Ç–æ–¥–æ–º")
        return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—á—å"}
    
    def test_demo_synthesis(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–º–æ —Å–∏–Ω—Ç–µ–∑–∞."""
        print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –î–ï–ú–û –°–ò–ù–¢–ï–ó–ê")
        print("=" * 40)
        
        test_texts = [
            "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?",
            "–°–µ–≥–æ–¥–Ω—è –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞—è –ø–æ–≥–æ–¥–∞.",
            "–Ø –æ—á–µ–Ω—å —Ä–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å!",
            "–≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏–Ω—Ç–µ–∑–∞ —Ä—É—Å—Å–∫–æ–π —Ä–µ—á–∏."
        ]
        
        success_count = 0
        
        for i, text in enumerate(test_texts):
            output_path = f"demo_russian_test_{i+1}.wav"
            print(f"\nüìù –¢–µ—Å—Ç {i+1}: {text}")
            
            result = self.synthesize_russian(text, output_path)
            
            if "success" in result:
                print(f"‚úÖ –¢–µ—Å—Ç {i+1} —É—Å–ø–µ—à–µ–Ω (–º–µ—Ç–æ–¥: {result['method']})")
                success_count += 1
            else:
                print(f"‚ùå –¢–µ—Å—Ç {i+1} –ø—Ä–æ–≤–∞–ª–µ–Ω: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {success_count}/{len(test_texts)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
        return success_count > 0
    
    def create_voice_clone_demo(self, original_audio_path: str) -> Dict[str, Any]:
        """
        –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞.
        
        Args:
            original_audio_path: –ü—É—Ç—å –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É –∞—É–¥–∏–æ—Ñ–∞–π–ª—É
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        """
        print(f"üé≠ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ö–õ–û–ù–ò–†–û–í–ê–ù–ò–Ø –ì–û–õ–û–°–ê")
        print("=" * 40)
        
        if not os.path.exists(original_audio_path):
            return {"error": f"–ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {original_audio_path}"}
        
        print(f"üìÅ –ê–Ω–∞–ª–∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≥–æ–ª–æ—Å–∞: {original_audio_path}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≥–æ–ª–æ—Å–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
        try:
            if self.ffmpeg_available:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—É–¥–∏–æ
                cmd = [
                    "ffprobe",
                    "-v", "quiet",
                    "-print_format", "json",
                    "-show_format",
                    "-show_streams",
                    original_audio_path
                ]
                
                result = subprocess.run(cmd, capture_output=True, text=True, check=True)
                audio_info = result.stdout
                
                print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω")
                print(f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—É–¥–∏–æ: {len(audio_info)} —Å–∏–º–≤–æ–ª–æ–≤")
            else:
                print("‚ö†Ô∏è  ffmpeg –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∞—É–¥–∏–æ")
        
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∞—É–¥–∏–æ: {e}")
        
        # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ —Å–∏–Ω—Ç–µ–∑ —Å –ø–æ—Ö–æ–∂–∏–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
        demo_text = "–≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞ —Å –ø–æ–º–æ—â—å—é –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤."
        output_path = "demo_voice_clone.wav"
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–≤—ã—à–µ–Ω–Ω—ã–π –ø–∏—Ç—á –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –¥–µ—Ç—Å–∫–æ–≥–æ –≥–æ–ª–æ—Å–∞
        result = self.synthesize_russian(demo_text, output_path, pitch_shift=1.3)
        
        if "success" in result:
            print(f"‚úÖ –î–µ–º–æ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: {output_path}")
            return {
                "success": True,
                "original_audio": original_audio_path,
                "demo_output": output_path,
                "method": result["method"]
            }
        else:
            return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–µ–º–æ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"}

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üé§ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–û–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –†–£–°–°–ö–û–ô –†–ï–ß–ò")
    print("=" * 50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    demo_tts = DemoRussianTTS()
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    success = demo_tts.test_demo_synthesis()
    
    if success:
        print("\n‚úÖ –î–µ–º–æ —Å–∏–Ω—Ç–µ–∑ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞
        speaker_wav = "data/audio/audio_1@02-12-2020_23-57-46.ogg"
        clone_result = demo_tts.create_voice_clone_demo(speaker_wav)
        
        if "success" in clone_result:
            print("üé≠ –î–µ–º–æ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞ —Å–æ–∑–¥–∞–Ω–æ!")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {clone_result.get('error')}")
    else:
        print("\n‚ùå –î–µ–º–æ —Å–∏–Ω—Ç–µ–∑ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ espeak –∏–ª–∏ gtts:")
        print("   sudo apt install espeak")
        print("   pip install gtts")
    
    print(f"\n" + "=" * 50)
    print("üìã –†–ï–ó–Æ–ú–ï:")
    print("‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ API –∫–ª—é—á–µ–π")
    print("‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫")
    print("‚ö†Ô∏è  –ö–∞—á–µ—Å—Ç–≤–æ –Ω–∏–∂–µ, —á–µ–º —É ElevenLabs")
    print("üí° –î–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ ElevenLabs API")

if __name__ == "__main__":
    main() 