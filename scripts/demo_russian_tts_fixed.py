#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ä—É—Å—Å–∫–æ–π —Ä–µ—á–∏ –±–µ–∑ API –∫–ª—é—á–µ–π.

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä—É—Å—Å–∫–æ–π —Ä–µ—á–∏:
1. espeak (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
2. gtts (Google Text-to-Speech)
3. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π pitch shifting –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≥–æ–ª–æ—Å—É

–ê–≤—Ç–æ—Ä: AI Assistant
–í–µ—Ä—Å–∏—è: 1.1.0
"""

import os
import subprocess
import tempfile
import shutil
from pathlib import Path
from typing import Optional, Dict, Any

class DemoRussianTTSFixed:
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ä—É—Å—Å–∫–æ–π —Ä–µ—á–∏."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ–º–æ TTS."""
        self.temp_dir = Path("data/temp")
        self.temp_dir.mkdir(parents=True, exist_ok=True)
        
        print("üé§ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ä—É—Å—Å–∫–æ–π —Ä–µ—á–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        self._check_available_tools()
    
    def _check_available_tools(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤."""
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ espeak
        try:
            subprocess.run(["espeak", "--version"], capture_output=True, check=True)
            print("‚úÖ espeak –¥–æ—Å—Ç—É–ø–µ–Ω")
            self.espeak_available = True
        except (subprocess.CalledProcessError, FileNotFoundError):
            print("‚ùå espeak –Ω–µ –Ω–∞–π–¥–µ–Ω")
            self.espeak_available = False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ gtts
        try:
            import gtts
            print("‚úÖ gtts –¥–æ—Å—Ç—É–ø–µ–Ω")
            self.gtts_available = True
        except ImportError:
            print("‚ùå gtts –Ω–µ –Ω–∞–π–¥–µ–Ω")
            self.gtts_available = False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ ffmpeg
        try:
            subprocess.run(["ffmpeg", "-version"], capture_output=True, check=True)
            print("‚úÖ ffmpeg –¥–æ—Å—Ç—É–ø–µ–Ω")
            self.ffmpeg_available = True
        except (subprocess.CalledProcessError, FileNotFoundError):
            print("‚ùå ffmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω")
            self.ffmpeg_available = False
    
    def synthesize_with_espeak(self, text: str, output_path: str) -> bool:
        """–°–∏–Ω—Ç–µ–∑ —Å –ø–æ–º–æ—â—å—é espeak."""
        if not self.espeak_available:
            return False
        
        try:
            cmd = [
                "espeak", 
                "-v", "ru",  # –†—É—Å—Å–∫–∏–π –≥–æ–ª–æ—Å
                "-s", "150",  # –°–∫–æ—Ä–æ—Å—Ç—å
                "-p", "50",   # –ü–∏—Ç—á
                "-a", "100",  # –ì—Ä–æ–º–∫–æ—Å—Ç—å
                f'"{text}"',
                "-w", output_path
            ]
            
            subprocess.run(cmd, check=True, capture_output=True)
            return True
            
        except subprocess.CalledProcessError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ espeak: {e}")
            return False
    
    def synthesize_with_gtts(self, text: str, output_path: str) -> bool:
        """–°–∏–Ω—Ç–µ–∑ —Å –ø–æ–º–æ—â—å—é Google TTS."""
        if not self.gtts_available:
            return False
        
        try:
            from gtts import gTTS
            
            tts = gTTS(text=text, lang='ru', slow=False)
            tts.save(output_path)
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ gtts: {e}")
            return False
    
    def apply_pitch_shift_fixed(self, input_path: str, output_path: str, pitch_shift: float = 1.2) -> bool:
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô pitch shifting —Å –ø–æ–º–æ—â—å—é ffmpeg.
        
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∏—Ç—á–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏.
        """
        if not self.ffmpeg_available:
            # –ü—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –µ—Å–ª–∏ ffmpeg –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            shutil.copy(input_path, output_path)
            return True
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è pitch shifting
            # rubberband –∏–∑–º–µ–Ω—è–µ—Ç –ø–∏—Ç—á –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
            cmd = [
                "ffmpeg",
                "-i", input_path,
                "-af", f"rubberband=pitch={pitch_shift}",
                "-y",  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
                output_path
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            # –ï—Å–ª–∏ rubberband –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
            if result.returncode != 0:
                print("‚ö†Ô∏è  rubberband –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥...")
                
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥: –∏–∑–º–µ–Ω—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –∏ –∑–∞—Ç–µ–º –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                temp_file = self.temp_dir / "temp_pitch.wav"
                
                # –°–Ω–∞—á–∞–ª–∞ –∏–∑–º–µ–Ω—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å
                cmd1 = [
                    "ffmpeg",
                    "-i", input_path,
                    "-af", f"atempo={1/pitch_shift}",
                    "-y",
                    str(temp_file)
                ]
                
                subprocess.run(cmd1, check=True, capture_output=True)
                
                # –ó–∞—Ç–µ–º –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –∏–∑–º–µ–Ω—è—è –ø–∏—Ç—á
                cmd2 = [
                    "ffmpeg",
                    "-i", str(temp_file),
                    "-af", f"asetrate=44100*{pitch_shift}",
                    "-y",
                    output_path
                ]
                
                subprocess.run(cmd2, check=True, capture_output=True)
                
                # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                if temp_file.exists():
                    temp_file.unlink()
            
            return True
            
        except subprocess.CalledProcessError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ ffmpeg: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
            shutil.copy(input_path, output_path)
            return True
    
    def synthesize_russian_fixed(self, text: str, output_path: str, pitch_shift: float = 1.0) -> Dict[str, Any]:
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô —Å–∏–Ω—Ç–µ–∑ —Ä—É—Å—Å–∫–æ–π —Ä–µ—á–∏.
        
        Args:
            text: –†—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞
            output_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ
            pitch_shift: –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–¥–≤–∏–≥–∞ –ø–∏—Ç—á–∞ (1.0 = –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ç–µ–∑–∞
        """
        print(f"üá∑üá∫ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô —Å–∏–Ω—Ç–µ–∑ —Ä—É—Å—Å–∫–æ–π —Ä–µ—á–∏: '{text[:50]}...'")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        temp_file = self.temp_dir / "temp_synthesis.wav"
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Å–∏–Ω—Ç–µ–∑–∞
        synthesis_methods = [
            ("espeak", self.synthesize_with_espeak),
            ("gtts", self.synthesize_with_gtts)
        ]
        
        for method_name, method_func in synthesis_methods:
            print(f"üîß –ü–æ–ø—ã—Ç–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Å {method_name}...")
            
            if method_func(text, str(temp_file)):
                print(f"‚úÖ –°–∏–Ω—Ç–µ–∑ —Å {method_name} —É—Å–ø–µ—à–µ–Ω")
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô pitch shifting
                if pitch_shift != 1.0:
                    print(f"üéµ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û pitch shifting (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {pitch_shift})...")
                    self.apply_pitch_shift_fixed(str(temp_file), output_path, pitch_shift)
                else:
                    shutil.copy(str(temp_file), output_path)
                
                # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                if temp_file.exists():
                    temp_file.unlink()
                
                print(f"‚úÖ –†—É—Å—Å–∫–∞—è —Ä–µ—á—å —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–∞: {output_path}")
                return {
                    "success": True,
                    "method": method_name,
                    "output_path": output_path,
                    "pitch_shift": pitch_shift
                }
        
        # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –º–µ—Ç–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—á—å –Ω–∏ –æ–¥–Ω–∏–º –º–µ—Ç–æ–¥–æ–º")
        return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—á—å"}
    
    def test_demo_synthesis_fixed(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –¥–µ–º–æ —Å–∏–Ω—Ç–µ–∑–∞."""
        print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –î–ï–ú–û –°–ò–ù–¢–ï–ó–ê")
        print("=" * 50)
        
        test_texts = [
            "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?",
            "–°–µ–≥–æ–¥–Ω—è –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞—è –ø–æ–≥–æ–¥–∞.",
            "–Ø –æ—á–µ–Ω—å —Ä–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å!",
            "–≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏–Ω—Ç–µ–∑–∞ —Ä—É—Å—Å–∫–æ–π —Ä–µ—á–∏."
        ]
        
        success_count = 0
        
        for i, text in enumerate(test_texts):
            output_path = f"demo_russian_test_fixed_{i+1}.wav"
            print(f"\nüìù –¢–µ—Å—Ç {i+1}: {text}")
            
            result = self.synthesize_russian_fixed(text, output_path)
            
            if "success" in result:
                print(f"‚úÖ –¢–µ—Å—Ç {i+1} —É—Å–ø–µ—à–µ–Ω (–º–µ—Ç–æ–¥: {result['method']})")
                success_count += 1
            else:
                print(f"‚ùå –¢–µ—Å—Ç {i+1} –ø—Ä–æ–≤–∞–ª–µ–Ω: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {success_count}/{len(test_texts)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
        return success_count > 0

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üé§ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–û–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –†–£–°–°–ö–û–ô –†–ï–ß–ò")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    demo_tts = DemoRussianTTSFixed()
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    success = demo_tts.test_demo_synthesis_fixed()
    
    if success:
        print("\n‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –¥–µ–º–æ —Å–∏–Ω—Ç–µ–∑ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print("üéµ –¢–µ–ø–µ—Ä—å –∞—É–¥–∏–æ –¥–æ–ª–∂–Ω–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é!")
    else:
        print("\n‚ùå –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –¥–µ–º–æ —Å–∏–Ω—Ç–µ–∑ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")

if __name__ == "__main__":
    main() 