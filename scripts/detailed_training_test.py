#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –æ–±—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞ –Ω–∞ –Ω–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import os
import sys
import json
import asyncio
import logging
from pathlib import Path
from typing import List, Dict, Any
import requests
import shutil
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class DetailedTrainingTester:
    """–î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –æ–±—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self):
        self.base_dir = Path(__file__).parent.parent
        self.test_data_dir = self.base_dir / "test_data"
        self.audio_dir = self.test_data_dir / "audio"
        self.training_dir = self.base_dir / "training_data"
        self.training_dir.mkdir(exist_ok=True)
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.config = {
            "backend_url": "http://127.0.0.1:8000",
            "hier_speech_url": "http://127.0.0.1:8001",
            "training_samples": 10,
            "test_phrases": [
                "–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞",
                "–°–µ–≥–æ–¥–Ω—è –º—ã —Ç–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏",
                "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç —Å–æ–∑–¥–∞–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—É—é —Ä–µ—á—å",
                "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –±—É–¥—É—â–µ–≥–æ —É–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã —Å–µ–≥–æ–¥–Ω—è",
                "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –æ—Ç–ª–∏—á–Ω–æ"
            ]
        }
    
    def prepare_training_dataset(self) -> Dict[str, Any]:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
        logger.info("üìÅ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è...")
        
        audio_files = list(self.audio_dir.glob("*.ogg"))
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(audio_files)} –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤")
        
        # –í—ã–±–∏—Ä–∞–µ–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É –∏ –≤—ã–±–∏—Ä–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
        audio_files.sort(key=lambda x: x.stat().st_size)
        
        # –í—ã–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª—ã —Ä–∞–∑–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
        small_files = audio_files[:3]
        medium_files = audio_files[len(audio_files)//2-2:len(audio_files)//2+3]
        large_files = audio_files[-3:]
        
        training_files = small_files + medium_files + large_files
        training_files = training_files[:self.config["training_samples"]]
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫—É –æ–±—É—á–µ–Ω–∏—è
        training_data = {
            "files": [],
            "total_size_mb": 0,
            "formats": set()
        }
        
        for i, file in enumerate(training_files):
            try:
                # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
                new_name = f"training_sample_{i+1:02d}.ogg"
                new_path = self.training_dir / new_name
                shutil.copy2(file, new_path)
                
                size_mb = file.stat().st_size / (1024 * 1024)
                
                file_info = {
                    "original_name": file.name,
                    "training_name": new_name,
                    "path": str(new_path),
                    "size_mb": size_mb,
                    "estimated_duration_min": size_mb  # –ü—Ä–∏–º–µ—Ä–Ω–æ 1MB = 1 –º–∏–Ω—É—Ç–∞
                }
                
                training_data["files"].append(file_info)
                training_data["total_size_mb"] += size_mb
                training_data["formats"].add(file.suffix[1:])
                
                logger.info(f"  - {new_name} ({size_mb:.2f} MB) - {file.name}")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ {file}: {e}")
        
        training_data["formats"] = list(training_data["formats"])
        
        logger.info(f"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(training_data['files'])} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
        logger.info(f"üìä –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {training_data['total_size_mb']:.1f} MB")
        logger.info(f"‚è±Ô∏è –ü—Ä–∏–º–µ—Ä–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {training_data['total_size_mb']:.1f} –º–∏–Ω—É—Ç")
        
        return training_data
    
    async def test_voice_cloning_with_training_data(self, training_data: Dict[str, Any]) -> List[Dict[str, Any]]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞ –Ω–∞ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üé§ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞ –Ω–∞ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        cloning_results = []
        
        for file_info in training_data["files"][:5]:  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ñ–∞–π–ª–æ–≤
            logger.info(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {file_info['training_name']}")
            
            try:
                audio_file = Path(file_info["path"])
                with open(audio_file, 'rb') as f:
                    files = {'audio': (audio_file.name, f, 'audio/ogg')}
                    
                    response = requests.post(
                        f"{self.config['backend_url']}/api/voice/clone",
                        files=files,
                        timeout=60
                    )
                    
                    if response.status_code == 200:
                        result = response.json()
                        logger.info(f"‚úÖ –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ: {file_info['training_name']}")
                        cloning_results.append({
                            "file": file_info["training_name"],
                            "success": True,
                            "voice_id": result.get('voice_id'),
                            "processing_time": result.get('processing_time', 0),
                            "message": result.get('message', 'OK')
                        })
                    else:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {file_info['training_name']}: {response.status_code}")
                        cloning_results.append({
                            "file": file_info["training_name"],
                            "success": False,
                            "error": f"HTTP {response.status_code}"
                        })
                        
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ {file_info['training_name']}: {e}")
                cloning_results.append({
                    "file": file_info["training_name"],
                    "success": False,
                    "error": str(e)
                })
        
        return cloning_results
    
    async def test_tts_with_cloned_voices(self, cloning_results: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TTS —Å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –≥–æ–ª–æ—Å–∞–º–∏"""
        logger.info("üîä –¢–µ—Å—Ç–∏—Ä—É–µ–º TTS —Å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –≥–æ–ª–æ—Å–∞–º–∏...")
        
        tts_results = []
        
        for clone_result in cloning_results:
            if clone_result.get("success"):
                voice_id = clone_result.get("voice_id")
                file_name = clone_result.get("file")
                
                logger.info(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º TTS –¥–ª—è –≥–æ–ª–æ—Å–∞ {voice_id} (–∏–∑ {file_name})")
                
                for phrase in self.config["test_phrases"]:
                    try:
                        response = requests.post(
                            f"{self.config['hier_speech_url']}/synthesize",
                            json={
                                "text": phrase,
                                "voice_id": voice_id,
                                "language": "ru"
                            },
                            timeout=30
                        )
                        
                        if response.status_code == 200:
                            result = response.json()
                            logger.info(f"‚úÖ TTS —É—Å–ø–µ—à–µ–Ω: '{phrase[:30]}...'")
                            tts_results.append({
                                "voice_id": voice_id,
                                "source_file": file_name,
                                "phrase": phrase,
                                "success": True,
                                "audio_path": result.get('audio_path'),
                                "processing_time": result.get('processing_time', 0)
                            })
                        else:
                            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ TTS: {response.status_code}")
                            tts_results.append({
                                "voice_id": voice_id,
                                "source_file": file_name,
                                "phrase": phrase,
                                "success": False,
                                "error": f"HTTP {response.status_code}"
                            })
                            
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ TTS: {e}")
                        tts_results.append({
                            "voice_id": voice_id,
                            "source_file": file_name,
                            "phrase": phrase,
                            "success": False,
                            "error": str(e)
                        })
        
        return tts_results
    
    def analyze_audio_quality(self, tts_results: List[Dict[str, Any]]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∞—É–¥–∏–æ"""
        logger.info("üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∞—É–¥–∏–æ...")
        
        successful_results = [r for r in tts_results if r.get("success")]
        
        if not successful_results:
            return {"quality_score": 0, "message": "–ù–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"}
        
        # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–æ–≤
        processing_times = [r.get("processing_time", 0) for r in successful_results]
        avg_processing_time = sum(processing_times) / len(processing_times)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤
        audio_sizes = []
        for result in successful_results:
            audio_path = result.get("audio_path")
            if audio_path:
                full_path = self.base_dir / "HierSpeech_TTS" / audio_path
                if full_path.exists():
                    size_mb = full_path.stat().st_size / (1024 * 1024)
                    audio_sizes.append(size_mb)
        
        avg_audio_size = sum(audio_sizes) / len(audio_sizes) if audio_sizes else 0
        
        # –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
        quality_score = 0.0
        
        # –û—Ü–µ–Ω–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–±—ã—Å—Ç—Ä–µ–µ = –ª—É—á—à–µ)
        if avg_processing_time < 5000:  # –º–µ–Ω–µ–µ 5 —Å–µ–∫—É–Ω–¥
            quality_score += 0.3
        elif avg_processing_time < 10000:  # –º–µ–Ω–µ–µ 10 —Å–µ–∫—É–Ω–¥
            quality_score += 0.2
        else:
            quality_score += 0.1
        
        # –û—Ü–µ–Ω–∫–∞ –ø–æ —Ä–∞–∑–º–µ—Ä—É –∞—É–¥–∏–æ (–±–æ–ª—å—à–µ = –ª—É—á—à–µ –∫–∞—á–µ—Å—Ç–≤–æ)
        if avg_audio_size > 0.05:  # –±–æ–ª–µ–µ 50KB
            quality_score += 0.3
        elif avg_audio_size > 0.02:  # –±–æ–ª–µ–µ 20KB
            quality_score += 0.2
        else:
            quality_score += 0.1
        
        # –û—Ü–µ–Ω–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É—Å–ø–µ—à–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        success_rate = len(successful_results) / len(tts_results) if tts_results else 0
        quality_score += success_rate * 0.4
        
        return {
            "quality_score": min(quality_score, 1.0),
            "avg_processing_time_ms": avg_processing_time,
            "avg_audio_size_mb": avg_audio_size,
            "success_rate": success_rate,
            "total_tests": len(tts_results),
            "successful_tests": len(successful_results)
        }
    
    async def run_detailed_training_test(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –æ–±—É—á–µ–Ω–∏—è"""
        logger.info("üéØ –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –æ–±—É—á–µ–Ω–∏—è...")
        
        results = {
            "timestamp": datetime.now().isoformat(),
            "training_data": {},
            "voice_cloning": [],
            "tts_synthesis": [],
            "quality_analysis": {},
            "overall_score": 0
        }
        
        try:
            # 1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            results["training_data"] = self.prepare_training_dataset()
            
            # 2. –¢–µ—Å—Ç –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞
            results["voice_cloning"] = await self.test_voice_cloning_with_training_data(results["training_data"])
            
            # 3. –¢–µ—Å—Ç TTS
            results["tts_synthesis"] = await self.test_tts_with_cloned_voices(results["voice_cloning"])
            
            # 4. –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞
            results["quality_analysis"] = self.analyze_audio_quality(results["tts_synthesis"])
            
            # 5. –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –±–∞–ª–ª–∞
            cloning_success_rate = sum(1 for r in results["voice_cloning"] if r.get("success")) / len(results["voice_cloning"]) if results["voice_cloning"] else 0
            tts_success_rate = sum(1 for r in results["tts_synthesis"] if r.get("success")) / len(results["tts_synthesis"]) if results["tts_synthesis"] else 0
            quality_score = results["quality_analysis"].get("quality_score", 0)
            
            results["overall_score"] = (cloning_success_rate + tts_success_rate + quality_score) / 3
            
            logger.info(f"üìä –û–±—â–∏–π –±–∞–ª–ª: {results['overall_score']:.2f}/1.0")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ—Ç–∞–ª—å–Ω–æ–º —Ç–µ—Å—Ç–µ: {e}")
            results["error"] = str(e)
        
        return results
    
    def save_detailed_results(self, results: Dict[str, Any]):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        results_file = self.base_dir / f"detailed_training_results_{timestamp}.json"
        
        with open(results_file, 'w', encoding='utf-8') as f:
            json.dump(results, f, ensure_ascii=False, indent=2)
        
        logger.info(f"‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {results_file}")
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç
        report_file = self.base_dir / f"detailed_training_report_{timestamp}.txt"
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write("–î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –û–ë –û–ë–£–ß–ï–ù–ò–ò –°–ò–°–¢–ï–ú–´ –¶–ò–§–†–û–í–û–ì–û –ê–í–ê–¢–ê–†–ê\n")
            f.write("=" * 60 + "\n\n")
            
            f.write(f"–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
            
            f.write("–î–ê–ù–ù–´–ï –î–õ–Ø –û–ë–£–ß–ï–ù–ò–Ø:\n")
            f.write(f"- –§–∞–π–ª–æ–≤ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ: {len(results['training_data'].get('files', []))}\n")
            f.write(f"- –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {results['training_data'].get('total_size_mb', 0):.1f} MB\n")
            f.write(f"- –§–æ—Ä–º–∞—Ç—ã: {', '.join(results['training_data'].get('formats', []))}\n\n")
            
            f.write("–ö–õ–û–ù–ò–†–û–í–ê–ù–ò–ï –ì–û–õ–û–°–ê:\n")
            cloning_results = results.get('voice_cloning', [])
            successful_cloning = sum(1 for r in cloning_results if r.get('success'))
            f.write(f"- –£—Å–ø–µ—à–Ω–æ: {successful_cloning}/{len(cloning_results)}\n")
            for result in cloning_results:
                status = "‚úÖ" if result.get('success') else "‚ùå"
                f.write(f"  {status} {result.get('file', 'Unknown')}\n")
            f.write("\n")
            
            f.write("–°–ò–ù–¢–ï–ó –†–ï–ß–ò:\n")
            tts_results = results.get('tts_synthesis', [])
            successful_tts = sum(1 for r in tts_results if r.get('success'))
            f.write(f"- –£—Å–ø–µ—à–Ω–æ: {successful_tts}/{len(tts_results)}\n")
            f.write(f"- –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –≥–æ–ª–æ—Å–æ–≤: {len(set(r.get('voice_id') for r in tts_results if r.get('voice_id')))}\n\n")
            
            f.write("–ê–ù–ê–õ–ò–ó –ö–ê–ß–ï–°–¢–í–ê:\n")
            quality = results.get('quality_analysis', {})
            f.write(f"- –ë–∞–ª–ª –∫–∞—á–µ—Å—Ç–≤–∞: {quality.get('quality_score', 0):.2f}/1.0\n")
            f.write(f"- –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {quality.get('avg_processing_time_ms', 0):.0f} –º—Å\n")
            f.write(f"- –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä –∞—É–¥–∏–æ: {quality.get('avg_audio_size_mb', 0):.3f} MB\n")
            f.write(f"- –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {quality.get('success_rate', 0)*100:.1f}%\n\n")
            
            f.write("–ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:\n")
            overall_score = results.get('overall_score', 0)
            f.write(f"- –û–±—â–∏–π –±–∞–ª–ª: {overall_score:.2f}/1.0\n")
            
            if overall_score >= 0.8:
                f.write("- üéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É!\n")
            elif overall_score >= 0.6:
                f.write("- üëç –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å\n")
            elif overall_score >= 0.4:
                f.write("- ‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏\n")
            else:
                f.write("- ‚ùå –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç —Å–µ—Ä—å–µ–∑–Ω–æ–π –¥–æ—Ä–∞–±–æ—Ç–∫–∏\n")
        
        logger.info(f"‚úÖ –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {report_file}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü§ñ –î–ï–¢–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –û–ë–£–ß–ï–ù–ò–Ø –°–ò–°–¢–ï–ú–´ –¶–ò–§–†–û–í–û–ì–û –ê–í–ê–¢–ê–†–ê")
    print("=" * 60)
    
    tester = DetailedTrainingTester()
    results = await tester.run_detailed_training_test()
    tester.save_detailed_results(results)
    
    print(f"\nüìä –û–±—â–∏–π –±–∞–ª–ª —Å–∏—Å—Ç–µ–º—ã: {results.get('overall_score', 0):.2f}/1.0")
    print("üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞")

if __name__ == "__main__":
    asyncio.run(main()) 