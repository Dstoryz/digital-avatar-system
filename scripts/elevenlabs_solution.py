#!/usr/bin/env python3
"""
–†–µ—à–µ–Ω–∏–µ –¥–ª—è —Ä—É—Å—Å–∫–æ–π —Ä–µ—á–∏ —Å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≥–æ–ª–æ—Å–∞ —á–µ—Ä–µ–∑ ElevenLabs API.

ElevenLabs –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç:
- –ü–æ–¥–¥–µ—Ä–∂–∫—É —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
- –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞
- –ü—Ä–æ—Å—Ç–æ–π API
- –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω (10,000 —Å–∏–º–≤–æ–ª–æ–≤/–º–µ—Å—è—Ü)

–ê–≤—Ç–æ—Ä: AI Assistant
–í–µ—Ä—Å–∏—è: 1.0.0
"""

import os
import requests
import json
from pathlib import Path
from typing import Optional, Dict, Any

class ElevenLabsTTS:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å ElevenLabs API –¥–ª—è —Ä—É—Å—Å–∫–æ–π —Ä–µ—á–∏."""
    
    def __init__(self, api_key: Optional[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ElevenLabs TTS.
        
        Args:
            api_key: API –∫–ª—é—á ElevenLabs (–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞ elevenlabs.io)
        """
        self.api_key = api_key or os.getenv("ELEVENLABS_API_KEY")
        self.base_url = "https://api.elevenlabs.io/v1"
        
        if not self.api_key:
            print("‚ö†Ô∏è  API –∫–ª—é—á ElevenLabs –Ω–µ –Ω–∞–π–¥–µ–Ω")
            print("üí° –ü–æ–ª—É—á–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–∞ https://elevenlabs.io")
            print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è: export ELEVENLABS_API_KEY='–≤–∞—à_–∫–ª—é—á'")
        
        print("üé§ ElevenLabs TTS –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def get_available_voices(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤."""
        if not self.api_key:
            return {"error": "API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}
        
        try:
            response = requests.get(
                f"{self.base_url}/voices",
                headers={"xi-api-key": self.api_key}
            )
            
            if response.status_code == 200:
                voices = response.json()
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(voices.get('voices', []))} –≥–æ–ª–æ—Å–æ–≤")
                return voices
            else:
                return {"error": f"–û—à–∏–±–∫–∞ API: {response.status_code}"}
                
        except Exception as e:
            return {"error": str(e)}
    
    def clone_voice(self, voice_name: str, audio_file_path: str) -> Dict[str, Any]:
        """
        –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞ –∏–∑ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞.
        
        Args:
            voice_name: –ù–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –≥–æ–ª–æ—Å–∞
            audio_file_path: –ü—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É –¥–ª—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        if not self.api_key:
            return {"error": "API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}
        
        if not os.path.exists(audio_file_path):
            return {"error": f"–ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {audio_file_path}"}
        
        try:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–∞
            with open(audio_file_path, 'rb') as f:
                files = {'files': f}
                
                data = {
                    'name': voice_name,
                    'description': f'–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥–æ–ª–æ—Å –∏–∑ {audio_file_path}'
                }
                
                response = requests.post(
                    f"{self.base_url}/voices/add",
                    headers={"xi-api-key": self.api_key},
                    data=data,
                    files=files
                )
            
            if response.status_code == 200:
                result = response.json()
                print(f"‚úÖ –ì–æ–ª–æ—Å '{voice_name}' —É—Å–ø–µ—à–Ω–æ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω")
                return result
            else:
                return {"error": f"–û—à–∏–±–∫–∞ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {response.status_code} - {response.text}"}
                
        except Exception as e:
            return {"error": str(e)}
    
    def synthesize_speech(self, text: str, voice_id: str, output_path: str) -> Dict[str, Any]:
        """
        –°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ —Å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≥–æ–ª–æ—Å–æ–º.
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä—É—Å—Å–∫–∏–π)
            voice_id: ID –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≥–æ–ª–æ—Å–∞
            output_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ç–µ–∑–∞
        """
        if not self.api_key:
            return {"error": "API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}
        
        try:
            url = f"{self.base_url}/text-to-speech/{voice_id}"
            
            payload = {
                "text": text,
                "model_id": "eleven_multilingual_v2",  # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä—É—Å—Å–∫–∏–π
                "voice_settings": {
                    "stability": 0.5,
                    "similarity_boost": 0.75
                }
            }
            
            response = requests.post(
                url,
                headers={
                    "xi-api-key": self.api_key,
                    "Content-Type": "application/json"
                },
                json=payload
            )
            
            if response.status_code == 200:
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞—É–¥–∏–æ
                with open(output_path, 'wb') as f:
                    f.write(response.content)
                
                print(f"‚úÖ –†–µ—á—å —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {output_path}")
                return {"success": True, "output_path": output_path}
            else:
                return {"error": f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞: {response.status_code} - {response.text}"}
                
        except Exception as e:
            return {"error": str(e)}
    
    def test_russian_synthesis(self, voice_id: str) -> bool:
        """–¢–µ—Å—Ç —Å–∏–Ω—Ç–µ–∑–∞ —Ä—É—Å—Å–∫–æ–π —Ä–µ—á–∏."""
        test_texts = [
            "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?",
            "–°–µ–≥–æ–¥–Ω—è –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞—è –ø–æ–≥–æ–¥–∞.",
            "–Ø –æ—á–µ–Ω—å —Ä–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å!",
            "–≠—Ç–æ —Ç–µ—Å—Ç —Å–∏–Ω—Ç–µ–∑–∞ —Ä—É—Å—Å–∫–æ–π —Ä–µ—á–∏ —Å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≥–æ–ª–æ—Å–∞."
        ]
        
        print("üß™ –¢–ï–°–¢ –°–ò–ù–¢–ï–ó–ê –†–£–°–°–ö–û–ô –†–ï–ß–ò")
        print("=" * 40)
        
        for i, text in enumerate(test_texts):
            output_path = f"elevenlabs_russian_test_{i+1}.wav"
            print(f"\nüìù –¢–µ—Å—Ç {i+1}: {text}")
            
            result = self.synthesize_speech(text, voice_id, output_path)
            
            if "success" in result:
                print(f"‚úÖ –¢–µ—Å—Ç {i+1} —É—Å–ø–µ—à–µ–Ω")
            else:
                print(f"‚ùå –¢–µ—Å—Ç {i+1} –ø—Ä–æ–≤–∞–ª–µ–Ω: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                return False
        
        return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ElevenLabs."""
    print("üé§ ELEVENLABS TTS –î–õ–Ø –†–£–°–°–ö–û–ô –†–ï–ß–ò")
    print("=" * 50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    tts = ElevenLabsTTS()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤
    print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞:")
    voices = tts.get_available_voices()
    
    if "error" in voices:
        print(f"‚ùå {voices['error']}")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –≥–æ–ª–æ—Å–æ–≤
    for i, voice in enumerate(voices.get('voices', [])[:5]):
        print(f"   {i+1}. {voice.get('name', 'Unknown')} (ID: {voice.get('voice_id', 'Unknown')})")
    
    # –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞
    print(f"\nüé≠ –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞:")
    speaker_wav = "data/audio/audio_1@02-12-2020_23-57-46.ogg"
    
    clone_result = tts.clone_voice("–ì–æ–ª–æ—Å_–¥–µ–≤–æ—á–∫–∏", speaker_wav)
    
    if "error" in clone_result:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {clone_result['error']}")
        print("\nüí° –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≥–æ–ª–æ—Å")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –≥–æ–ª–æ—Å –¥–ª—è —Ç–µ—Å—Ç–∞
        if voices.get('voices'):
            test_voice_id = voices['voices'][0]['voice_id']
            print(f"üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ–ª–æ—Å: {voices['voices'][0]['name']}")
            
            # –¢–µ—Å—Ç —Å–∏–Ω—Ç–µ–∑–∞
            success = tts.test_russian_synthesis(test_voice_id)
            
            if success:
                print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —Ä—É—Å—Å–∫–æ–π —Ä–µ—á–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
            else:
                print("\n‚ùå –¢–µ—Å—Ç—ã —Ä—É—Å—Å–∫–æ–π —Ä–µ—á–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å")
    else:
        voice_id = clone_result.get('voice_id')
        print(f"‚úÖ –ì–æ–ª–æ—Å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω —Å ID: {voice_id}")
        
        # –¢–µ—Å—Ç —Å–∏–Ω—Ç–µ–∑–∞ —Å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≥–æ–ª–æ—Å–æ–º
        success = tts.test_russian_synthesis(voice_id)
        
        if success:
            print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —Ä—É—Å—Å–∫–æ–π —Ä–µ—á–∏ —Å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≥–æ–ª–æ—Å–æ–º –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("\n‚ùå –¢–µ—Å—Ç—ã —Ä—É—Å—Å–∫–æ–π —Ä–µ—á–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å")
    
    print(f"\n" + "=" * 50)
    print("üìã –†–ï–ó–Æ–ú–ï:")
    print("‚úÖ ElevenLabs –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫")
    print("‚úÖ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞")
    print("‚úÖ –ü—Ä–æ—Å—Ç–æ–π API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è")
    print("üí° –¢—Ä–µ–±—É–µ—Ç API –∫–ª—é—á (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω –¥–æ—Å—Ç—É–ø–µ–Ω)")

if __name__ == "__main__":
    main() 