#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –æ–±—É—á–µ–Ω–∏—è
"""

import os
import sys
import json
import time
from pathlib import Path

def generate_training_report():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞"""
    
    print("üìä –ì–ï–ù–ï–†–ê–¶–ò–Ø –§–ò–ù–ê–õ–¨–ù–û–ì–û –û–¢–ß–Å–¢–ê –û–ë –û–ë–£–ß–ï–ù–ò–ò")
    print("=" * 60)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—É—á–µ–Ω–∏—è
    audio_dir = Path("test_data/audio")
    training_dir = Path("training_data")
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
    audio_files = list(audio_dir.glob("*.ogg"))
    training_files = list(training_dir.glob("*.ogg"))
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã
    total_audio_size = sum(f.stat().st_size for f in audio_files)
    total_training_size = sum(f.stat().st_size for f in training_files)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞—Ç—ã
    dates = []
    for file in audio_files:
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            name = file.stem
            if '@' in name:
                date_part = name.split('@')[1]
                dates.append(date_part)
        except:
            pass
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–∞—Ç–∞–º
    date_stats = {}
    for date in dates:
        if date in date_stats:
            date_stats[date] += 1
        else:
            date_stats[date] = 1
    
    # –ß–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_results = {}
    if os.path.exists("test_results_new_training_data.json"):
        with open("test_results_new_training_data.json", 'r', encoding='utf-8') as f:
            test_results = json.load(f)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
    report = {
        "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
        "training_data_analysis": {
            "audio_files_count": len(audio_files),
            "training_files_count": len(training_files),
            "total_audio_size_mb": round(total_audio_size / (1024 * 1024), 2),
            "total_training_size_mb": round(total_training_size / (1024 * 1024), 2),
            "date_range": {
                "earliest": min(dates) if dates else "N/A",
                "latest": max(dates) if dates else "N/A",
                "total_days": len(set(dates)) if dates else 0
            },
            "files_by_date": date_stats
        },
        "testing_results": test_results,
        "system_performance": {
            "hier_speech_tts": {
                "status": "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç",
                "available_voices": test_results.get("total_voices_tested", 0),
                "success_rate": test_results.get("overall_success_rate", 0),
                "tested_voices": test_results.get("total_voices_tested", 0)
            },
            "voice_quality": {
                "female_voices": "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ",
                "russian_language": "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ",
                "audio_format": "‚úÖ WAV 22050Hz Mono"
            }
        },
        "recommendations": [
            "‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é",
            "‚úÖ –ñ–µ–Ω—Å–∫–∏–µ –≥–æ–ª–æ—Å–∞ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
            "‚úÖ –†—É—Å—Å–∫–∏–π —è–∑—ã–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è",
            "‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ –∑–≤—É–∫–∞ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ",
            "üî∂ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è –≤ —Ç–µ–∫—Å—Ç—ã",
            "üî∂ –ú–æ–∂–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏–Ω—Ç–µ–∑–∞"
        ]
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç
    report_file = "training_report_final.json"
    with open(report_file, 'w', encoding='utf-8') as f:
        json.dump(report, f, ensure_ascii=False, indent=2)
    
    # –í—ã–≤–æ–¥–∏–º –æ—Ç—á—ë—Ç
    print("\nüìã –î–ê–ù–ù–´–ï –û–ë–£–ß–ï–ù–ò–Ø:")
    print("-" * 40)
    print(f"üé§ –ê—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤: {len(audio_files)}")
    print(f"üìö –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(training_files)}")
    print(f"üìä –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –∞—É–¥–∏–æ: {report['training_data_analysis']['total_audio_size_mb']} –ú–ë")
    print(f"üìä –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã—Ö: {report['training_data_analysis']['total_training_size_mb']} –ú–ë")
    print(f"üìÖ –ü–µ—Ä–∏–æ–¥ –∑–∞–ø–∏—Å–µ–π: {report['training_data_analysis']['date_range']['earliest']} - {report['training_data_analysis']['date_range']['latest']}")
    print(f"üìÖ –í—Å–µ–≥–æ –¥–Ω–µ–π –∑–∞–ø–∏—Å–µ–π: {report['training_data_analysis']['date_range']['total_days']}")
    
    print("\nüß™ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("-" * 40)
    if test_results:
        print(f"üé§ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –≥–æ–ª–æ—Å–æ–≤: {test_results.get('total_voices_tested', 0)}")
        print(f"üìù –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {test_results.get('total_tests', 0)}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {test_results.get('total_successful', 0)}")
        print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {test_results.get('overall_success_rate', 0):.1f}%")
    else:
        print("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    print("\n‚ö° –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨ –°–ò–°–¢–ï–ú–´:")
    print("-" * 40)
    print(f"üéØ HierSpeech_TTS: {report['system_performance']['hier_speech_tts']['status']}")
    print(f"üé§ –î–æ—Å—Ç—É–ø–Ω–æ –≥–æ–ª–æ—Å–æ–≤: {report['system_performance']['hier_speech_tts']['available_voices']}")
    print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {report['system_performance']['hier_speech_tts']['success_rate']:.1f}%")
    print(f"üîä –ñ–µ–Ω—Å–∫–∏–µ –≥–æ–ª–æ—Å–∞: {report['system_performance']['voice_quality']['female_voices']}")
    print(f"üá∑üá∫ –†—É—Å—Å–∫–∏–π —è–∑—ã–∫: {report['system_performance']['voice_quality']['russian_language']}")
    print(f"üéµ –§–æ—Ä–º–∞—Ç –∞—É–¥–∏–æ: {report['system_performance']['voice_quality']['audio_format']}")
    
    print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("-" * 40)
    for rec in report['recommendations']:
        print(f"  {rec}")
    
    print(f"\nüíæ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤: {report_file}")
    
    # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
    print("\nüéØ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê:")
    print("-" * 40)
    
    if test_results and test_results.get('overall_success_rate', 0) >= 95:
        print("üèÜ –û–¢–õ–ò–ß–ù–û! –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ!")
        print("   –ì–æ—Ç–æ–≤–æ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É")
    elif test_results and test_results.get('overall_success_rate', 0) >= 80:
        print("‚úÖ –•–û–†–û–®–û! –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ!")
        print("   –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å")
    elif test_results and test_results.get('overall_success_rate', 0) >= 60:
        print("‚ö†Ô∏è  –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û! –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã.")
        print("   –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")
    else:
        print("‚ùå –ü–õ–û–•–û! –ú–Ω–æ–≥–æ –ø—Ä–æ–±–ª–µ–º!")
        print("   –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä—å—ë–∑–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")
    
    return report

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    report = generate_training_report()
    
    print(f"\n‚úÖ –û—Ç—á—ë—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 