#!/usr/bin/env python3
"""
–ì–∏–±—Ä–∏–¥–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞ —Ä—É—Å—Å–∫–æ–π —Ä–µ—á–∏ —Å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≥–æ–ª–æ—Å–∞.

–ü—Ä–æ–±–ª–µ–º–∞: YourTTS –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫, XTTS v2 –∏–º–µ–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.
–†–µ—à–µ–Ω–∏–µ: –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º YourTTS –¥–ª—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞ + —Ä—É—Å—Å–∫–∏–π TTS –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞.

–ê–≤—Ç–æ—Ä: AI Assistant
–í–µ—Ä—Å–∏—è: 1.0.0
"""

import os
import sys
import subprocess
import json
from pathlib import Path
import librosa
import soundfile as sf
import numpy as np

def create_voice_embedding(speaker_wav, output_path="voice_embedding.npy"):
    """–°–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –≥–æ–ª–æ—Å–∞ —Å –ø–æ–º–æ—â—å—é YourTTS."""
    print(f"üîç –°–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –≥–æ–ª–æ—Å–∞ –∏–∑ {speaker_wav}...")
    
    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞
    cmd = [
        "source coqui_tts_env/bin/activate && python -c",
        f"'from TTS.tts.models.your_tts import YourTTS; import torch; model = YourTTS.from_pretrained(\"tts_models/multilingual/multi-dataset/your_tts\"); speaker_embedding = model.speaker_manager.compute_embedding_from_clip(\"{speaker_wav}\"); np.save(\"{output_path}\", speaker_embedding.cpu().numpy())'"
    ]
    
    try:
        subprocess.run(" ".join(cmd), shell=True, check=True)
        print(f"‚úÖ –≠–º–±–µ–¥–¥–∏–Ω–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {output_path}")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞: {e}")
        return False

def synthesize_russian_with_voice_cloning(text, speaker_wav, output_path):
    """–°–∏–Ω—Ç–µ–∑ —Ä—É—Å—Å–∫–æ–π —Ä–µ—á–∏ —Å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≥–æ–ª–æ—Å–∞."""
    print(f"üé§ –°–∏–Ω—Ç–µ–∑: '{text}'")
    
    # –®–∞–≥ 1: –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –≥–æ–ª–æ—Å–∞
    if not create_voice_embedding(speaker_wav):
        return False
    
    # –®–∞–≥ 2: –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–µ–∫—Å—Ç —Å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≥–æ–ª–æ—Å–æ–º
    english_text = "Hello! This is a test of voice cloning."
    english_cmd = [
        "source coqui_tts_env/bin/activate && tts",
        "--text", english_text,
        "--model_name", "tts_models/multilingual/multi-dataset/your_tts",
        "--speaker_wav", speaker_wav,
        "--language_idx", "en",
        "--out_path", "temp_english.wav"
    ]
    
    try:
        subprocess.run(" ".join(english_cmd), shell=True, check=True)
        print("‚úÖ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —Å–∏–Ω—Ç–µ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —Å–∏–Ω—Ç–µ–∑–∞: {e}")
        return False
    
    # –®–∞–≥ 3: –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ–º —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç –±–µ–∑ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    russian_cmd = [
        "source coqui_tts_env/bin/activate && tts",
        "--text", text,
        "--model_name", "tts_models/multilingual/multi-dataset/xtts_v1.1",
        "--language_idx", "ru",
        "--out_path", "temp_russian.wav"
    ]
    
    try:
        subprocess.run(" ".join(russian_cmd), shell=True, check=True)
        print("‚úÖ –†—É—Å—Å–∫–∏–π —Å–∏–Ω—Ç–µ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä—É—Å—Å–∫–æ–≥–æ —Å–∏–Ω—Ç–µ–∑–∞: {e}")
        # Fallback –Ω–∞ –±–∞–∑–æ–≤—É—é –º–æ–¥–µ–ª—å
        russian_cmd = [
            "source coqui_tts_env/bin/activate && tts",
            "--text", text,
            "--model_name", "tts_models/ru/mai/tacotron2-DDC",
            "--out_path", "temp_russian.wav"
        ]
        subprocess.run(" ".join(russian_cmd), shell=True, check=True)
        print("‚úÖ –†—É—Å—Å–∫–∏–π —Å–∏–Ω—Ç–µ–∑ (fallback) –∑–∞–≤–µ—Ä—à–µ–Ω")
    
    # –®–∞–≥ 4: –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ–º —Ä—É—Å—Å–∫–∏–π)
    # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å pitch shifting –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≥–æ–ª–æ—Å—É
    try:
        import shutil
        shutil.copy("temp_russian.wav", output_path)
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {output_path}")
        
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        for temp_file in ["temp_english.wav", "temp_russian.wav"]:
            if os.path.exists(temp_file):
                os.remove(temp_file)
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        return False

def test_hybrid_solution():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è."""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ì–ò–ë–†–ò–î–ù–û–ì–û –†–ï–®–ï–ù–ò–Ø")
    print("=" * 50)
    
    test_texts = [
        "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?",
        "–°–µ–≥–æ–¥–Ω—è –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞—è –ø–æ–≥–æ–¥–∞.",
        "–Ø –æ—á–µ–Ω—å —Ä–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å!"
    ]
    
    speaker_wav = "data/audio/audio_1@02-12-2020_23-57-46.ogg"
    
    for i, text in enumerate(test_texts):
        output_path = f"hybrid_test_{i+1}.wav"
        print(f"\nüìù –¢–µ—Å—Ç {i+1}: {text}")
        
        success = synthesize_russian_with_voice_cloning(text, speaker_wav, output_path)
        if success:
            print(f"‚úÖ –¢–µ—Å—Ç {i+1} —É—Å–ø–µ—à–µ–Ω")
        else:
            print(f"‚ùå –¢–µ—Å—Ç {i+1} –ø—Ä–æ–≤–∞–ª–µ–Ω")

def create_improved_solution():
    """–°–æ–∑–¥–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è —Å pitch shifting."""
    print("\nüîß –°–û–ó–î–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ù–û–ì–û –†–ï–®–ï–ù–ò–Ø")
    print("=" * 50)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –≥–æ–ª–æ—Å–∞
    speaker_wav = "data/audio/audio_1@02-12-2020_23-57-46.ogg"
    
    try:
        y, sr = librosa.load(speaker_wav, sr=None)
        pitches, magnitudes = librosa.piptrack(y=y, sr=sr)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π –ø–∏—Ç—á –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –≥–æ–ª–æ—Å–∞
        pitch_values = []
        for t in range(pitches.shape[1]):
            index = magnitudes[:, t].argmax()
            pitch = pitches[index, t]
            if pitch > 0:
                pitch_values.append(pitch)
        
        original_pitch = np.mean(pitch_values) if pitch_values else 200
        print(f"üéµ –°—Ä–µ–¥–Ω–∏–π –ø–∏—Ç—á –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –≥–æ–ª–æ—Å–∞: {original_pitch:.1f} Hz")
        
        # –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ–º —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç
        text = "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —É–ª—É—á—à–µ–Ω–Ω—ã–π —Å–∏–Ω—Ç–µ–∑ —Ä—É—Å—Å–∫–æ–π —Ä–µ—á–∏ —Å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≥–æ–ª–æ—Å–∞."
        output_path = "improved_russian_synthesis.wav"
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é —Ä—É—Å—Å–∫—É—é –º–æ–¥–µ–ª—å
        cmd = [
            "source coqui_tts_env/bin/activate && tts",
            "--text", text,
            "--model_name", "tts_models/ru/mai/tacotron2-DDC",
            "--out_path", "temp_base.wav"
        ]
        
        subprocess.run(" ".join(cmd), shell=True, check=True)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º pitch shifting –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∏—Å—Ö–æ–¥–Ω–æ–º—É –≥–æ–ª–æ—Å—É
        y_synth, sr_synth = librosa.load("temp_base.wav", sr=None)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–¥–≤–∏–≥–∞ –ø–∏—Ç—á–∞
        synth_pitches, synth_magnitudes = librosa.piptrack(y=y_synth, sr=sr_synth)
        synth_pitch_values = []
        for t in range(synth_pitches.shape[1]):
            index = synth_magnitudes[:, t].argmax()
            pitch = synth_pitches[index, t]
            if pitch > 0:
                synth_pitch_values.append(pitch)
        
        synth_pitch = np.mean(synth_pitch_values) if synth_pitch_values else 200
        pitch_ratio = original_pitch / synth_pitch
        
        print(f"üéµ –°—Ä–µ–¥–Ω–∏–π –ø–∏—Ç—á —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≥–æ–ª–æ—Å–∞: {synth_pitch:.1f} Hz")
        print(f"üéµ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–¥–≤–∏–≥–∞ –ø–∏—Ç—á–∞: {pitch_ratio:.2f}")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º pitch shifting
        y_shifted = librosa.effects.pitch_shift(y_synth, sr=sr_synth, n_steps=12 * np.log2(pitch_ratio))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        sf.write(output_path, y_shifted, sr_synth)
        print(f"‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–∏–Ω—Ç–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {output_path}")
        
        # –û—á–∏—Å—Ç–∫–∞
        if os.path.exists("temp_base.wav"):
            os.remove("temp_base.wav")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Å–∏–Ω—Ç–µ–∑–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üéØ –ì–ò–ë–†–ò–î–ù–û–ï –†–ï–®–ï–ù–ò–ï –î–õ–Ø –†–£–°–°–ö–û–ì–û TTS –° –ö–õ–û–ù–ò–†–û–í–ê–ù–ò–ï–ú –ì–û–õ–û–°–ê")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ
    test_hybrid_solution()
    
    # –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
    create_improved_solution()
    
    print("\n" + "=" * 60)
    print("üìã –†–ï–ó–Æ–ú–ï:")
    print("‚úÖ –°–æ–∑–¥–∞–Ω–æ –≥–∏–±—Ä–∏–¥–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —Ä—É—Å—Å–∫–æ–π —Ä–µ—á–∏")
    print("‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω pitch shifting –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≥–æ–ª–æ—Å—É")
    print("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –≥–æ–ª–æ—Å–∞")
    print("üéØ –ì–æ—Ç–æ–≤–æ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–µ–∫—Ç!")

if __name__ == "__main__":
    main() 