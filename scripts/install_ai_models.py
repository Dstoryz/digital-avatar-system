#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AI –º–æ–¥–µ–ª–µ–π –¥–ª—è —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞
–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç SadTalker, Coqui TTS, Whisper, Real-ESRGAN –∏ –¥—Ä—É–≥–∏–µ –º–æ–¥–µ–ª–∏
"""

import os
import sys
import subprocess
import json
import shutil
from pathlib import Path
from typing import Dict, List, Tuple, Optional
import urllib.request
import zipfile
import tarfile

class AIModelInstaller:
    """–ö–ª–∞—Å—Å –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ AI –º–æ–¥–µ–ª–µ–π"""
    
    def __init__(self):
        self.models_dir = Path("models")
        self.models_dir.mkdir(exist_ok=True)
        
        self.models_config = {
            "sadtalker": {
                "name": "SadTalker",
                "repo": "https://github.com/OpenTalker/SadTalker",
                "branch": "main",
                "requirements": [
                    "torch",
                    "torchvision",
                    "torchaudio",
                    "opencv-python",
                    "scipy",
                    "librosa",
                    "soundfile",
                    "yacs",
                    "gfpgan",
                    "facexlib",
                    "basicsr",
                    "face-alignment",
                    "dlib",
                    "gdown",
                    "imageio",
                    "imageio-ffmpeg",
                    "resampy",
                    "sklearn",
                    "scikit-image",
                    "tqdm",
                    "yaml",
                    "tb-nightly",
                    "tensorboardX",
                    "ffmpeg-python"
                ],
                "weights": {
                    "checkpoints": "https://github.com/OpenTalker/SadTalker/releases/download/v0.0.2/checkpoints.zip",
                    "gfpgan": "https://github.com/OpenTalker/SadTalker/releases/download/v0.0.2/GFPGANv1.4.pth",
                    "facexlib": "https://github.com/OpenTalker/SadTalker/releases/download/v0.0.2/detection_Resnet50_Final.pth"
                }
            },
            "coqui_tts": {
                "name": "Coqui TTS",
                "repo": "https://github.com/coqui-ai/TTS",
                "branch": "main",
                "requirements": [
                    "TTS",
                    "torch",
                    "torchaudio",
                    "numpy",
                    "scipy",
                    "librosa",
                    "soundfile",
                    "phonemizer",
                    "espeak-ng",
                    "tensorboard",
                    "matplotlib",
                    "seaborn"
                ]
            },
            "whisper": {
                "name": "OpenAI Whisper",
                "repo": "https://github.com/openai/whisper",
                "branch": "main",
                "requirements": [
                    "openai-whisper",
                    "torch",
                    "torchaudio",
                    "numpy",
                    "ffmpeg-python"
                ]
            },
            "real_esrgan": {
                "name": "Real-ESRGAN",
                "repo": "https://github.com/xinntao/Real-ESRGAN",
                "branch": "master",
                "requirements": [
                    "torch",
                    "torchvision",
                    "opencv-python",
                    "numpy",
                    "Pillow",
                    "scipy",
                    "basicsr",
                    "facexlib",
                    "gfpgan"
                ],
                "weights": {
                    "realesrgan": "https://github.com/xinntao/Real-ESRGAN/releases/download/v0.1.0/RealESRGAN_x4plus.pth",
                    "realesrgan_anime": "https://github.com/xinntao/Real-ESRGAN/releases/download/v0.2.2.4/RealESRGAN_x4plus_anime_6B.pth"
                }
            },
            "wav2lip": {
                "name": "Wav2Lip",
                "repo": "https://github.com/Rudrabha/Wav2Lip",
                "branch": "master",
                "requirements": [
                    "torch",
                    "torchvision",
                    "opencv-python",
                    "numpy",
                    "scipy",
                    "librosa",
                    "soundfile",
                    "resampy",
                    "tqdm",
                    "gdown"
                ],
                "weights": {
                    "wav2lip": "https://github.com/Rudrabha/Wav2Lip/releases/download/v1.0/wav2lip.pth",
                    "wav2lip_gan": "https://github.com/Rudrabha/Wav2Lip/releases/download/v1.0/wav2lip_gan.pth",
                    "face_detection": "https://github.com/Rudrabha/Wav2Lip/releases/download/v1.0/s3fd.pth"
                }
            }
        }
    
    def print_header(self, title: str):
        """–í—ã–≤–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        print(f"\n{'='*60}")
        print(f"ü§ñ {title}")
        print(f"{'='*60}")
    
    def print_step(self, step: str):
        """–í—ã–≤–æ–¥ —à–∞–≥–∞"""
        print(f"\nüìã {step}")
        print("-" * 40)
    
    def run_command(self, command: List[str], cwd: Optional[Path] = None) -> Tuple[bool, str]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"""
        try:
            result = subprocess.run(
                command, 
                capture_output=True, 
                text=True, 
                cwd=cwd,
                check=True
            )
            return True, result.stdout
        except subprocess.CalledProcessError as e:
            return False, e.stderr
    
    def download_file(self, url: str, dest_path: Path) -> bool:
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞"""
        try:
            print(f"–°–∫–∞—á–∏–≤–∞–µ–º {url}...")
            urllib.request.urlretrieve(url, dest_path)
            print(f"‚úÖ –°–∫–∞—á–∞–Ω: {dest_path}")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}")
            return False
    
    def extract_archive(self, archive_path: Path, extract_to: Path) -> bool:
        """–†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∞—Ä—Ö–∏–≤–∞"""
        try:
            print(f"–†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º {archive_path}...")
            
            if archive_path.suffix == '.zip':
                with zipfile.ZipFile(archive_path, 'r') as zip_ref:
                    zip_ref.extractall(extract_to)
            elif archive_path.suffix in ['.tar', '.tar.gz', '.tgz']:
                with tarfile.open(archive_path, 'r:*') as tar_ref:
                    tar_ref.extractall(extract_to)
            
            print(f"‚úÖ –†–∞—Å–ø–∞–∫–æ–≤–∞–Ω –≤ {extract_to}")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏: {e}")
            return False
    
    def clone_repository(self, repo_url: str, branch: str, dest_path: Path) -> bool:
        """–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
        try:
            if dest_path.exists():
                print(f"üìÅ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {dest_path}")
                return True
            
            print(f"–ö–ª–æ–Ω–∏—Ä—É–µ–º {repo_url}...")
            success, output = self.run_command([
                "git", "clone", "-b", branch, repo_url, str(dest_path)
            ])
            
            if success:
                print(f"‚úÖ –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω: {dest_path}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {output}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return False
    
    def install_requirements(self, requirements: List[str], model_name: str) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        self.print_step(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è {model_name}")
        
        for package in requirements:
            print(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º {package}...")
            success, output = self.run_command([
                sys.executable, "-m", "pip", "install", package
            ])
            
            if success:
                print(f"‚úÖ {package} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            else:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {package}: {output}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –¥—Ä—É–≥–∏—Ö –ø–∞–∫–µ—Ç–æ–≤
    
    def install_sadtalker(self) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ SadTalker"""
        self.print_step("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ SadTalker")
        
        sadtalker_dir = self.models_dir / "sadtalker"
        
        # –ö–ª–æ–Ω–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        if not self.clone_repository(
            self.models_config["sadtalker"]["repo"],
            self.models_config["sadtalker"]["branch"],
            sadtalker_dir
        ):
            return False
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        self.install_requirements(
            self.models_config["sadtalker"]["requirements"],
            "SadTalker"
        )
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –≤–µ—Å–æ–≤
        weights_dir = sadtalker_dir / "checkpoints"
        weights_dir.mkdir(exist_ok=True)
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –≤–µ—Å–∞
        for weight_name, weight_url in self.models_config["sadtalker"]["weights"].items():
            if weight_name == "checkpoints":
                weight_path = weights_dir / "checkpoints.zip"
                if self.download_file(weight_url, weight_path):
                    self.extract_archive(weight_path, weights_dir)
                    weight_path.unlink()  # –£–¥–∞–ª—è–µ–º –∞—Ä—Ö–∏–≤
            else:
                weight_path = weights_dir / f"{weight_name}.pth"
                self.download_file(weight_url, weight_path)
        
        print("‚úÖ SadTalker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return True
    
    def install_coqui_tts(self) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Coqui TTS"""
        self.print_step("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Coqui TTS")
        
        coqui_dir = self.models_dir / "coqui_tts"
        
        # –ö–ª–æ–Ω–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        if not self.clone_repository(
            self.models_config["coqui_tts"]["repo"],
            self.models_config["coqui_tts"]["branch"],
            coqui_dir
        ):
            return False
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        self.install_requirements(
            self.models_config["coqui_tts"]["requirements"],
            "Coqui TTS"
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º TTS –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        success, output = self.run_command([
            sys.executable, "-m", "pip", "install", "-e", "."
        ], cwd=coqui_dir)
        
        if success:
            print("‚úÖ Coqui TTS —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {output}")
            return False
    
    def install_whisper(self) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Whisper"""
        self.print_step("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ OpenAI Whisper")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        self.install_requirements(
            self.models_config["whisper"]["requirements"],
            "Whisper"
        )
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –º–æ–¥–µ–ª–∏ (–±–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å)
        print("–°–∫–∞—á–∏–≤–∞–µ–º –±–∞–∑–æ–≤—É—é –º–æ–¥–µ–ª—å Whisper...")
        success, output = self.run_command([
            sys.executable, "-c", "import whisper; whisper.load_model('base')"
        ])
        
        if success:
            print("‚úÖ Whisper —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {output}")
            return False
    
    def install_real_esrgan(self) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Real-ESRGAN"""
        self.print_step("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Real-ESRGAN")
        
        esrgan_dir = self.models_dir / "real_esrgan"
        
        # –ö–ª–æ–Ω–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        if not self.clone_repository(
            self.models_config["real_esrgan"]["repo"],
            self.models_config["real_esrgan"]["branch"],
            esrgan_dir
        ):
            return False
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        self.install_requirements(
            self.models_config["real_esrgan"]["requirements"],
            "Real-ESRGAN"
        )
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –≤–µ—Å–æ–≤
        weights_dir = esrgan_dir / "experiments/pretrained_models"
        weights_dir.mkdir(parents=True, exist_ok=True)
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –≤–µ—Å–∞
        for weight_name, weight_url in self.models_config["real_esrgan"]["weights"].items():
            weight_path = weights_dir / f"{weight_name}.pth"
            self.download_file(weight_url, weight_path)
        
        print("‚úÖ Real-ESRGAN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return True
    
    def install_wav2lip(self) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Wav2Lip"""
        self.print_step("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Wav2Lip")
        
        wav2lip_dir = self.models_dir / "wav2lip"
        
        # –ö–ª–æ–Ω–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        if not self.clone_repository(
            self.models_config["wav2lip"]["repo"],
            self.models_config["wav2lip"]["branch"],
            wav2lip_dir
        ):
            return False
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        self.install_requirements(
            self.models_config["wav2lip"]["requirements"],
            "Wav2Lip"
        )
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –≤–µ—Å–æ–≤
        weights_dir = wav2lip_dir / "checkpoints"
        weights_dir.mkdir(exist_ok=True)
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –≤–µ—Å–∞
        for weight_name, weight_url in self.models_config["wav2lip"]["weights"].items():
            weight_path = weights_dir / f"{weight_name}.pth"
            self.download_file(weight_url, weight_path)
        
        print("‚úÖ Wav2Lip —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return True
    
    def create_model_config(self) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π"""
        self.print_step("–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π")
        
        config = {
            "models": {
                "sadtalker": {
                    "path": str(self.models_dir / "sadtalker"),
                    "checkpoints": str(self.models_dir / "sadtalker" / "checkpoints"),
                    "enabled": True
                },
                "coqui_tts": {
                    "path": str(self.models_dir / "coqui_tts"),
                    "enabled": True
                },
                "whisper": {
                    "model": "base",
                    "enabled": True
                },
                "real_esrgan": {
                    "path": str(self.models_dir / "real_esrgan"),
                    "enabled": True
                },
                "wav2lip": {
                    "path": str(self.models_dir / "wav2lip"),
                    "checkpoints": str(self.models_dir / "wav2lip" / "checkpoints"),
                    "enabled": True
                }
            },
            "gpu": {
                "enabled": True,
                "device": "cuda:0",
                "memory_fraction": 0.8
            },
            "processing": {
                "max_batch_size": 1,
                "timeout": 300,
                "temp_dir": "./temp"
            }
        }
        
        config_path = Path("models_config.json")
        with open(config_path, 'w') as f:
            json.dump(config, f, indent=2)
        
        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {config_path}")
        return True
    
    def run_installation(self) -> None:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        self.print_header("–£–°–¢–ê–ù–û–í–ö–ê AI –ú–û–î–ï–õ–ï–ô")
        
        results = {}
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–¥–µ–ª–∏
        results["SadTalker"] = self.install_sadtalker()
        results["Coqui TTS"] = self.install_coqui_tts()
        results["Whisper"] = self.install_whisper()
        results["Real-ESRGAN"] = self.install_real_esrgan()
        results["Wav2Lip"] = self.install_wav2lip()
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        results["Configuration"] = self.create_model_config()
        
        # –û—Ç—á–µ—Ç
        self.print_step("–û—Ç—á–µ—Ç –æ–± —É—Å—Ç–∞–Ω–æ–≤–∫–µ")
        
        print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏:")
        for model, status in results.items():
            icon = "‚úÖ" if status else "‚ùå"
            print(f"   {icon} {model}")
        
        success_count = sum(results.values())
        total_count = len(results)
        
        print(f"\nüéØ –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{total_count} –º–æ–¥–µ–ª–µ–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        if success_count == total_count:
            print("üéâ –í—Å–µ AI –º–æ–¥–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
        else:
            print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –º–æ–¥–µ–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
            print("   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏")
            print("   2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
            print("   3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã –º–æ–¥–µ–ª–µ–π")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        with open("ai_models_report.json", "w") as f:
            json.dump({
                "installation_results": results,
                "models_dir": str(self.models_dir),
                "total_models": total_count,
                "successful_installations": success_count
            }, f, indent=2)
        
        print(f"\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ ai_models_report.json")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    installer = AIModelInstaller()
    installer.run_installation()

if __name__ == "__main__":
    main() 