#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö AI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç SadTalker, Coqui TTS, Whisper –∏ –¥—Ä—É–≥–∏–µ –º–æ–¥–µ–ª–∏ –≤ –µ–¥–∏–Ω—É—é —Å–∏—Å—Ç–µ–º—É
"""

import os
import sys
import json
import asyncio
import logging
from pathlib import Path
from typing import Dict, List, Optional, Any, Tuple
import subprocess
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('integration.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class AvatarIntegrator:
    """–ö–ª–∞—Å—Å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞"""
    
    def __init__(self):
        self.project_root = Path.cwd()
        self.models_dir = self.project_root / "models"
        self.backend_dir = self.project_root / "backend"
        self.frontend_dir = self.project_root / "frontend"
        
        # –ü—É—Ç–∏ –∫ –º–æ–¥–µ–ª—è–º
        self.model_paths = {
            "sadtalker": self.models_dir / "sadtalker",
            "coqui_tts": self.models_dir / "coqui_tts",
            "voice_clone": self.models_dir / "voice_clone",
            "whisper": "base",  # –ú–æ–¥–µ–ª—å Whisper
            "real_esrgan": self.models_dir / "real_esrgan",
            "wav2lip": self.models_dir / "wav2lip"
        }
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        self.integration_config = {
            "pipeline": {
                "speech_to_text": "whisper",
                "text_to_speech": "coqui_tts",
                "face_animation": "sadtalker",
                "lip_sync": "wav2lip",
                "image_enhancement": "real_esrgan"
            },
            "processing": {
                "max_audio_length": 30.0,
                "video_fps": 25,
                "image_size": 512,
                "batch_size": 1
            },
            "gpu": {
                "enabled": True,
                "device": "cuda:0",
                "memory_fraction": 0.8
            }
        }
    
    def print_header(self, title: str):
        """–í—ã–≤–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        print(f"\n{'='*60}")
        print(f"üîó {title}")
        print(f"{'='*60}")
    
    def print_step(self, step: str):
        """–í—ã–≤–æ–¥ —à–∞–≥–∞"""
        print(f"\nüìã {step}")
        print("-" * 40)
    
    def check_model_availability(self) -> Dict[str, bool]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π"""
        self.print_step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π")
        
        availability = {}
        
        for model_name, model_path in self.model_paths.items():
            if isinstance(model_path, Path):
                if model_path.exists():
                    availability[model_name] = True
                    logger.info(f"‚úÖ {model_name}: {model_path}")
                else:
                    availability[model_name] = False
                    logger.warning(f"‚ùå {model_name}: –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {model_path}")
            else:
                # –î–ª—è Whisper –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ Python
                availability[model_name] = True
                logger.info(f"‚úÖ {model_name}: {model_path}")
        
        return availability
    
    def create_ai_service(self) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ AI —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π"""
        self.print_step("–°–æ–∑–¥–∞–Ω–∏–µ AI —Å–µ—Ä–≤–∏—Å–∞")
        
        ai_service_file = self.backend_dir / "services" / "ai_service.py"
        ai_service_file.parent.mkdir(exist_ok=True)
        
        service_code = '''
"""
AI —Å–µ—Ä–≤–∏—Å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞
"""

import os
import sys
import asyncio
import logging
import torch
import numpy as np
from pathlib import Path
from typing import Optional, Dict, Any, Tuple
import whisper
import cv2
from PIL import Image
import soundfile as sf
import librosa

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –º–æ–¥–µ–ª—è–º
models_dir = Path(__file__).parent.parent.parent / "models"
sys.path.append(str(models_dir / "sadtalker"))
sys.path.append(str(models_dir / "coqui_tts"))
sys.path.append(str(models_dir / "real_esrgan"))
sys.path.append(str(models_dir / "wav2lip"))

logger = logging.getLogger(__name__)

class AIService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å AI –º–æ–¥–µ–ª—è–º–∏"""
    
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π
        self.whisper_model = None
        self.tts_model = None
        self.sadtalker_model = None
        self.esrgan_model = None
        self.wav2lip_model = None
        
        self._load_models()
    
    def _load_models(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º Whisper
            logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ Whisper –º–æ–¥–µ–ª–∏...")
            self.whisper_model = whisper.load_model(self.config["whisper_model"])
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º TTS (–µ—Å–ª–∏ –µ—Å—Ç—å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥–æ–ª–æ—Å)
            voice_clone_path = models_dir / "voice_clone" / "voice_config.json"
            if voice_clone_path.exists():
                logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≥–æ–ª–æ—Å–∞...")
                # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏ Coqui TTS —Å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≥–æ–ª–æ—Å–æ–º
                pass
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º SadTalker
            logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ SadTalker –º–æ–¥–µ–ª–∏...")
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏ SadTalker
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º Real-ESRGAN
            logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ Real-ESRGAN –º–æ–¥–µ–ª–∏...")
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏ Real-ESRGAN
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º Wav2Lip
            logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ Wav2Lip –º–æ–¥–µ–ª–∏...")
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏ Wav2Lip
            
            logger.info("–í—Å–µ –º–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π: {e}")
    
    async def speech_to_text(self, audio_path: str) -> Optional[str]:
        """–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –≤ —Ç–µ–∫—Å—Ç"""
        try:
            logger.info(f"–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏: {audio_path}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ
            audio, sr = librosa.load(audio_path, sr=16000)
            
            # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å
            result = self.whisper_model.transcribe(audio)
            text = result["text"].strip()
            
            logger.info(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {text}")
            return text
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏: {e}")
            return None
    
    async def text_to_speech(self, text: str, output_path: str) -> bool:
        """–°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        try:
            logger.info(f"–°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏: {text}")
            
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏ —Å –ø–æ–º–æ—â—å—é Coqui TTS
            # –ü–æ–∫–∞ —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            logger.info(f"–ê—É–¥–∏–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output_path}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏: {e}")
            return False
    
    async def animate_face(self, image_path: str, audio_path: str, output_path: str) -> bool:
        """–ê–Ω–∏–º–∞—Ü–∏—è –ª–∏—Ü–∞ –ø–æ –∞—É–¥–∏–æ"""
        try:
            logger.info(f"–ê–Ω–∏–º–∞—Ü–∏—è –ª–∏—Ü–∞: {image_path} + {audio_path}")
            
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –∞–Ω–∏–º–∞—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é SadTalker
            # –ü–æ–∫–∞ —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            logger.info(f"–í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output_path}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ –ª–∏—Ü–∞: {e}")
            return False
    
    async def enhance_image(self, image_path: str, output_path: str) -> bool:
        """–£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            logger.info(f"–£–ª—É—á—à–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_path}")
            
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ —É–ª—É—á—à–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é Real-ESRGAN
            # –ü–æ–∫–∞ —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            logger.info(f"–£–ª—É—á—à–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output_path}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return False
    
    async def sync_lips(self, video_path: str, audio_path: str, output_path: str) -> bool:
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≥—É–±"""
        try:
            logger.info(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≥—É–±: {video_path} + {audio_path}")
            
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é Wav2Lip
            # –ü–æ–∫–∞ —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            logger.info(f"–í–∏–¥–µ–æ —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output_path}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≥—É–±: {e}")
            return False
    
    async def process_avatar_pipeline(self, 
                                    user_audio: str,
                                    avatar_image: str,
                                    output_dir: str) -> Dict[str, Any]:
        """–ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞"""
        try:
            logger.info("–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ –∞–≤–∞—Ç–∞—Ä–∞")
            
            output_path = Path(output_dir)
            output_path.mkdir(exist_ok=True)
            
            results = {}
            
            # 1. –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏
            text = await self.speech_to_text(user_audio)
            if not text:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å")
            results["recognized_text"] = text
            
            # 2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ (–∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å LLM)
            response_text = f"–ü—Ä–∏–≤–µ—Ç! –í—ã —Å–∫–∞–∑–∞–ª–∏: {text}"
            results["response_text"] = response_text
            
            # 3. –°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏
            response_audio = output_path / "response.wav"
            success = await self.text_to_speech(response_text, str(response_audio))
            if not success:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—á—å")
            results["response_audio"] = str(response_audio)
            
            # 4. –ê–Ω–∏–º–∞—Ü–∏—è –ª–∏—Ü–∞
            animated_video = output_path / "animated.mp4"
            success = await self.animate_face(avatar_image, str(response_audio), str(animated_video))
            if not success:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∞–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å –ª–∏—Ü–æ")
            results["animated_video"] = str(animated_video)
            
            # 5. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≥—É–± (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            final_video = output_path / "final.mp4"
            success = await self.sync_lips(str(animated_video), str(response_audio), str(final_video))
            if success:
                results["final_video"] = str(final_video)
            else:
                results["final_video"] = str(animated_video)
            
            logger.info("–ü–∞–π–ø–ª–∞–π–Ω –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return results
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–∞–π–ø–ª–∞–π–Ω–µ: {e}")
            return {"error": str(e)}
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º GPU –ø–∞–º—è—Ç—å
            if torch.cuda.is_available():
                torch.cuda.empty_cache()
            
            logger.info("–†–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")

# –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞
ai_service = None

def get_ai_service(config: Dict[str, Any]) -> AIService:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ AI —Å–µ—Ä–≤–∏—Å–∞"""
    global ai_service
    if ai_service is None:
        ai_service = AIService(config)
    return ai_service
'''
        
        with open(ai_service_file, 'w', encoding='utf-8') as f:
            f.write(service_code)
        
        logger.info(f"AI —Å–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω: {ai_service_file}")
        return True
    
    def create_avatar_api(self) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–≤–∞—Ç–∞—Ä–æ–º"""
        self.print_step("–°–æ–∑–¥–∞–Ω–∏–µ Avatar API")
        
        api_file = self.backend_dir / "routers" / "avatar.py"
        api_file.parent.mkdir(exist_ok=True)
        
        api_code = '''
"""
API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ü–∏—Ñ—Ä–æ–≤—ã–º –∞–≤–∞—Ç–∞—Ä–æ–º
"""

from fastapi import APIRouter, UploadFile, File, HTTPException, BackgroundTasks
from fastapi.responses import FileResponse
from pydantic import BaseModel
from typing import Optional, Dict, Any
import asyncio
import logging
from pathlib import Path
import uuid

from ..services.ai_service import get_ai_service
from ..config import settings

logger = logging.getLogger(__name__)
router = APIRouter(prefix="/avatar", tags=["avatar"])

class AvatarRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∞–≤–∞—Ç–∞—Ä–∞"""
    user_audio_path: str
    avatar_image_path: str
    response_type: str = "video"  # video, audio, text

class AvatarResponse(BaseModel):
    """–û—Ç–≤–µ—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞"""
    request_id: str
    status: str
    results: Dict[str, Any]
    error: Optional[str] = None

@router.post("/process", response_model=AvatarResponse)
async def process_avatar(
    request: AvatarRequest,
    background_tasks: BackgroundTasks
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∞–≤–∞—Ç–∞—Ä–∞"""
    try:
        request_id = str(uuid.uuid4())
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∞–≤–∞—Ç–∞—Ä–∞: {request_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
        if not Path(request.user_audio_path).exists():
            raise HTTPException(status_code=404, detail="–ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        if not Path(request.avatar_image_path).exists():
            raise HTTPException(status_code=404, detail="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        output_dir = Path(settings.PROCESSED_DIR) / request_id
        output_dir.mkdir(parents=True, exist_ok=True)
        
        # –ü–æ–ª—É—á–∞–µ–º AI —Å–µ—Ä–≤–∏—Å
        ai_service = get_ai_service({
            "whisper_model": "base",
            "use_gpu": settings.USE_GPU
        })
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ —Ñ–æ–Ω–µ
        background_tasks.add_task(
            process_avatar_background,
            request_id,
            request.user_audio_path,
            request.avatar_image_path,
            str(output_dir),
            ai_service
        )
        
        return AvatarResponse(
            request_id=request_id,
            status="processing",
            results={}
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

async def process_avatar_background(
    request_id: str,
    user_audio: str,
    avatar_image: str,
    output_dir: str,
    ai_service
):
    """–§–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞"""
    try:
        logger.info(f"–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {request_id}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω
        results = await ai_service.process_avatar_pipeline(
            user_audio,
            avatar_image,
            output_dir
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results_file = Path(output_dir) / "results.json"
        with open(results_file, 'w') as f:
            import json
            json.dump(results, f, indent=2)
        
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {request_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É
        error_file = Path(output_dir) / "error.json"
        with open(error_file, 'w') as f:
            import json
            json.dump({"error": str(e)}, f, indent=2)

@router.get("/status/{request_id}")
async def get_avatar_status(request_id: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    try:
        output_dir = Path(settings.PROCESSED_DIR) / request_id
        
        if not output_dir.exists():
            raise HTTPException(status_code=404, detail="–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results_file = output_dir / "results.json"
        error_file = output_dir / "error.json"
        
        if error_file.exists():
            with open(error_file, 'r') as f:
                import json
                error_data = json.load(f)
            return {
                "request_id": request_id,
                "status": "error",
                "error": error_data.get("error", "Unknown error")
            }
        
        if results_file.exists():
            with open(results_file, 'r') as f:
                import json
                results = json.load(f)
            return {
                "request_id": request_id,
                "status": "completed",
                "results": results
            }
        
        return {
            "request_id": request_id,
            "status": "processing"
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/video/{request_id}")
async def get_avatar_video(request_id: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∏–¥–µ–æ –∞–≤–∞—Ç–∞—Ä–∞"""
    try:
        output_dir = Path(settings.PROCESSED_DIR) / request_id
        
        if not output_dir.exists():
            raise HTTPException(status_code=404, detail="–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ò—â–µ–º –≤–∏–¥–µ–æ—Ñ–∞–π–ª
        video_files = list(output_dir.glob("*.mp4"))
        if not video_files:
            raise HTTPException(status_code=404, detail="–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤–∏–¥–µ–æ
        video_file = max(video_files, key=lambda x: x.stat().st_mtime)
        
        return FileResponse(
            path=str(video_file),
            media_type="video/mp4",
            filename=f"avatar_{request_id}.mp4"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–µ–æ: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/audio/{request_id}")
async def get_avatar_audio(request_id: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –∞–≤–∞—Ç–∞—Ä–∞"""
    try:
        output_dir = Path(settings.PROCESSED_DIR) / request_id
        
        if not output_dir.exists():
            raise HTTPException(status_code=404, detail="–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ò—â–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
        audio_files = list(output_dir.glob("*.wav"))
        if not audio_files:
            raise HTTPException(status_code=404, detail="–ê—É–¥–∏–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∞—É–¥–∏–æ
        audio_file = max(audio_files, key=lambda x: x.stat().st_mtime)
        
        return FileResponse(
            path=str(audio_file),
            media_type="audio/wav",
            filename=f"avatar_{request_id}.wav"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—É–¥–∏–æ: {e}")
        raise HTTPException(status_code=500, detail=str(e))
'''
        
        with open(api_file, 'w', encoding='utf-8') as f:
            f.write(api_code)
        
        logger.info(f"Avatar API —Å–æ–∑–¥–∞–Ω: {api_file}")
        return True
    
    def create_websocket_service(self) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ WebSocket —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è real-time –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏"""
        self.print_step("–°–æ–∑–¥–∞–Ω–∏–µ WebSocket —Å–µ—Ä–≤–∏—Å–∞")
        
        ws_file = self.backend_dir / "services" / "websocket_service.py"
        ws_file.parent.mkdir(exist_ok=True)
        
        ws_code = '''
"""
WebSocket —Å–µ—Ä–≤–∏—Å –¥–ª—è real-time –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ —Å –∞–≤–∞—Ç–∞—Ä–æ–º
"""

import asyncio
import json
import logging
from typing import Dict, Set, Optional
from fastapi import WebSocket, WebSocketDisconnect
from ..services.ai_service import get_ai_service

logger = logging.getLogger(__name__)

class WebSocketManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
    
    def __init__(self):
        self.active_connections: Set[WebSocket] = set()
        self.ai_service = None
    
    async def connect(self, websocket: WebSocket):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞"""
        await websocket.accept()
        self.active_connections.add(websocket)
        logger.info(f"–ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω. –í—Å–µ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {len(self.active_connections)}")
    
    def disconnect(self, websocket: WebSocket):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞"""
        self.active_connections.remove(websocket)
        logger.info(f"–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω. –í—Å–µ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {len(self.active_connections)}")
    
    async def send_personal_message(self, message: str, websocket: WebSocket):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        await websocket.send_text(message)
    
    async def broadcast(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º"""
        for connection in self.active_connections:
            try:
                await connection.send_text(message)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                self.active_connections.remove(connection)
    
    async def handle_avatar_message(self, websocket: WebSocket, message: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∞–≤–∞—Ç–∞—Ä–∞"""
        try:
            message_type = message.get("type")
            
            if message_type == "speech":
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—á–∏
                audio_data = message.get("audio")
                # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ
                response = {
                    "type": "response",
                    "text": "–ü—Ä–∏–≤–µ—Ç! –Ø —Å–ª—ã—à—É –≤–∞—Å.",
                    "status": "processing"
                }
                await self.send_personal_message(json.dumps(response), websocket)
            
            elif message_type == "text":
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
                text = message.get("text", "")
                response = {
                    "type": "response",
                    "text": f"–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {text}",
                    "status": "completed"
                }
                await self.send_personal_message(json.dumps(response), websocket)
            
            else:
                # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
                error_response = {
                    "type": "error",
                    "message": f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {message_type}"
                }
                await self.send_personal_message(json.dumps(error_response), websocket)
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            error_response = {
                "type": "error",
                "message": str(e)
            }
            await self.send_personal_message(json.dumps(error_response), websocket)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
manager = WebSocketManager()

async def websocket_endpoint(websocket: WebSocket):
    """WebSocket endpoint"""
    await manager.connect(websocket)
    try:
        while True:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            data = await websocket.receive_text()
            message = json.loads(data)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await manager.handle_avatar_message(websocket, message)
    
    except WebSocketDisconnect:
        manager.disconnect(websocket)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ WebSocket: {e}")
        manager.disconnect(websocket)
'''
        
        with open(ws_file, 'w', encoding='utf-8') as f:
            f.write(ws_code)
        
        logger.info(f"WebSocket —Å–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω: {ws_file}")
        return True
    
    def create_integration_config(self) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        self.print_step("–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
        
        config_file = self.project_root / "integration_config.json"
        
        with open(config_file, 'w') as f:
            json.dump(self.integration_config, f, indent=2)
        
        logger.info(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {config_file}")
        return True
    
    def run_integration_tests(self) -> bool:
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        self.print_step("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç
        test_file = self.project_root / "test_integration.py"
        
        test_code = '''
#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏
sys.path.append(str(Path(__file__).parent / "backend"))

async def test_ai_service():
    """–¢–µ—Å—Ç AI —Å–µ—Ä–≤–∏—Å–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI —Å–µ—Ä–≤–∏—Å–∞...")
    
    try:
        from services.ai_service import AIService
        
        config = {
            "whisper_model": "base",
            "use_gpu": True
        }
        
        service = AIService(config)
        print("‚úÖ AI —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        print("‚úÖ –ë–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç")
        
        service.cleanup()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ AI —Å–µ—Ä–≤–∏—Å–∞: {e}")
        return False

async def test_avatar_api():
    """–¢–µ—Å—Ç Avatar API"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Avatar API...")
    
    try:
        from routers.avatar import router
        print("‚úÖ Avatar API –∑–∞–≥—Ä—É–∂–µ–Ω")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Avatar API: {e}")
        return False

async def test_websocket():
    """–¢–µ—Å—Ç WebSocket"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WebSocket...")
    
    try:
        from services.websocket_service import manager
        print("‚úÖ WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ WebSocket: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
    print("=" * 50)
    
    results = {}
    
    results["AI Service"] = await test_ai_service()
    results["Avatar API"] = await test_avatar_api()
    results["WebSocket"] = await test_websocket()
    
    print("\\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:")
    for test, result in results.items():
        icon = "‚úÖ" if result else "‚ùå"
        print(f"   {icon} {test}")
    
    success_count = sum(results.values())
    total_count = len(results)
    
    print(f"\\nüéØ –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{total_count} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if success_count == total_count:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")

if __name__ == "__main__":
    asyncio.run(main())
'''
        
        with open(test_file, 'w') as f:
            f.write(test_code)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
        success = subprocess.run([
            sys.executable, str(test_file)
        ], capture_output=True, text=True)
        
        if success.returncode == 0:
            logger.info("‚úÖ –¢–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ–π–¥–µ–Ω—ã")
            return True
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤: {success.stderr}")
            return False
    
    def run_integration(self) -> None:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        self.print_header("–ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ö–û–ú–ü–û–ù–ï–ù–¢–û–í –¶–ò–§–†–û–í–û–ì–û –ê–í–ê–¢–ê–†–ê")
        
        results = {}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª–∏
        model_availability = self.check_model_availability()
        results["–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π"] = all(model_availability.values())
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        results["AI —Å–µ—Ä–≤–∏—Å"] = self.create_ai_service()
        results["Avatar API"] = self.create_avatar_api()
        results["WebSocket —Å–µ—Ä–≤–∏—Å"] = self.create_websocket_service()
        results["–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"] = self.create_integration_config()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        results["–¢–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"] = self.run_integration_tests()
        
        # –û—Ç—á–µ—Ç
        self.print_step("–û—Ç—á–µ—Ç –æ–± –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
        
        print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        for step, status in results.items():
            icon = "‚úÖ" if status else "‚ùå"
            print(f"   {icon} {step}")
        
        success_count = sum(results.values())
        total_count = len(results)
        
        print(f"\nüéØ –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{total_count} —ç—Ç–∞–ø–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
        
        if success_count == total_count:
            print("üéâ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
            print("   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ backend —Å–µ—Ä–≤–µ—Ä")
            print("   2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ frontend –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
            print("   3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –ø–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω")
        else:
            print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —ç—Ç–∞–ø—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        with open("integration_report.json", "w") as f:
            json.dump({
                "results": results,
                "model_availability": model_availability,
                "integration_config": self.integration_config,
                "total_steps": total_count,
                "successful_steps": success_count
            }, f, indent=2)
        
        print(f"\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ integration_report.json")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    integrator = AvatarIntegrator()
    integrator.run_integration()

if __name__ == "__main__":
    main() 