#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏
"""

import os
import subprocess
import json
import random
from pathlib import Path
import logging
from typing import List, Dict, Tuple

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class TrainingDataPreparator:
    def __init__(self, input_dir: str = "test_data/audio", output_dir: str = "training_data"):
        self.input_dir = Path(input_dir)
        self.output_dir = Path(output_dir)
        self.wav_dir = self.output_dir / "wav"
        self.metadata_dir = self.output_dir / "metadata"
        
        # –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        self.wav_dir.mkdir(parents=True, exist_ok=True)
        self.metadata_dir.mkdir(parents=True, exist_ok=True)
        
    def convert_ogg_to_wav(self) -> List[str]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç .ogg —Ñ–∞–π–ª—ã –≤ .wav"""
        logger.info("üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è .ogg –≤ .wav...")
        
        converted_files = []
        ogg_files = list(self.input_dir.glob("*.ogg"))
        
        for i, ogg_file in enumerate(ogg_files, 1):
            wav_file = self.wav_dir / f"{ogg_file.stem}.wav"
            
            logger.info(f"–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º {i}/{len(ogg_files)}: {ogg_file.name}")
            
            try:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è TTS
                cmd = [
                    "ffmpeg", "-i", str(ogg_file),
                    "-ar", "22050",  # –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
                    "-ac", "1",      # –ú–æ–Ω–æ
                    "-sample_fmt", "s16",  # 16-bit
                    "-y",  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
                    str(wav_file)
                ]
                
                result = subprocess.run(cmd, capture_output=True, text=True)
                
                if result.returncode == 0:
                    converted_files.append(str(wav_file))
                    logger.info(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω: {wav_file.name}")
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ {ogg_file.name}: {result.stderr}")
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ {ogg_file.name}: {e}")
        
        logger.info(f"üéâ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(converted_files)} —Ñ–∞–π–ª–æ–≤")
        return converted_files
    
    def create_dummy_transcriptions(self, wav_files: List[str]) -> List[Dict]:
        """–°–æ–∑–¥–∞—ë—Ç –∑–∞–≥–ª—É—à–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)"""
        logger.info("üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π...")
        
        # –ü—Ä–∏–º–µ—Ä—ã —Ñ—Ä–∞–∑ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        sample_phrases = [
            "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?",
            "–°–µ–≥–æ–¥–Ω—è –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞—è –ø–æ–≥–æ–¥–∞.",
            "–Ø –æ—á–µ–Ω—å —Ä–∞–¥–∞ –≤–∞—Å –≤–∏–¥–µ—Ç—å.",
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–Ω–∏–º–∞–Ω–∏–µ.",
            "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!",
            "–ö–∞–∫ –ø—Ä–æ—à—ë–ª —Ç–≤–æ–π –¥–µ–Ω—å?",
            "–ß—Ç–æ –Ω–æ–≤–æ–≥–æ?",
            "–û—Ç–ª–∏—á–Ω–∞—è –∏–¥–µ—è!",
            "–Ø —Å–æ–≥–ª–∞—Å–Ω–∞ —Å —Ç–æ–±–æ–π.",
            "–≠—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ.",
            "–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ.",
            "–Ø –ø–æ–Ω–∏–º–∞—é —Ç–µ–±—è.",
            "–í—Å—ë –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–æ.",
            "–ù–µ –≤–æ–ª–Ω—É–π—Å—è.",
            "–Ø –∑–¥–µ—Å—å –¥–ª—è —Ç–µ–±—è."
        ]
        
        transcriptions = []
        
        for wav_file in wav_files:
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ñ—Ä–∞–∑—É
            phrase = random.choice(sample_phrases)
            
            transcription = {
                "file": Path(wav_file).name,
                "text": phrase,
                "duration": self.get_audio_duration(wav_file)
            }
            
            transcriptions.append(transcription)
        
        logger.info(f"üìù –°–æ–∑–¥–∞–Ω–æ {len(transcriptions)} —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π")
        return transcriptions
    
    def get_audio_duration(self, wav_file: str) -> float:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞"""
        try:
            cmd = [
                "ffprobe", "-v", "quiet", "-show_entries", "format=duration",
                "-of", "default=noprint_wrappers=1:nokey=1", wav_file
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            if result.returncode == 0:
                return float(result.stdout.strip())
            else:
                return 0.0
                
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å {wav_file}: {e}")
            return 0.0
    
    def split_train_val(self, transcriptions: List[Dict], train_ratio: float = 0.8) -> Tuple[List[Dict], List[Dict]]:
        """–†–∞–∑–¥–µ–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—É—é –≤—ã–±–æ—Ä–∫–∏"""
        logger.info("üìä –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ train/val...")
        
        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        random.shuffle(transcriptions)
        
        # –†–∞–∑–¥–µ–ª—è–µ–º
        split_idx = int(len(transcriptions) * train_ratio)
        train_data = transcriptions[:split_idx]
        val_data = transcriptions[split_idx:]
        
        logger.info(f"üìä Train: {len(train_data)}, Val: {len(val_data)}")
        return train_data, val_data
    
    def save_metadata(self, train_data: List[Dict], val_data: List[Dict]):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        logger.info("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö...")
        
        # –§–æ—Ä–º–∞—Ç –¥–ª—è Coqui TTS
        train_metadata = []
        val_metadata = []
        
        for item in train_data:
            train_metadata.append(f"{item['file']}|{item['text']}")
        
        for item in val_data:
            val_metadata.append(f"{item['file']}|{item['text']}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã
        train_file = self.metadata_dir / "train_metadata.csv"
        val_file = self.metadata_dir / "val_metadata.csv"
        
        with open(train_file, 'w', encoding='utf-8') as f:
            f.write('\n'.join(train_metadata))
        
        with open(val_file, 'w', encoding='utf-8') as f:
            f.write('\n'.join(val_metadata))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = {
            "total_files": len(train_data) + len(val_data),
            "train_files": len(train_data),
            "val_files": len(val_data),
            "total_duration": sum(item['duration'] for item in train_data + val_data),
            "avg_duration": sum(item['duration'] for item in train_data + val_data) / (len(train_data) + len(val_data))
        }
        
        stats_file = self.metadata_dir / "stats.json"
        with open(stats_file, 'w', encoding='utf-8') as f:
            json.dump(stats, f, indent=2, ensure_ascii=False)
        
        logger.info(f"üíæ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:")
        logger.info(f"   Train: {train_file}")
        logger.info(f"   Val: {val_file}")
        logger.info(f"   Stats: {stats_file}")
        
        return stats
    
    def create_training_config(self, stats: Dict):
        """–°–æ–∑–¥–∞—ë—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
        logger.info("‚öôÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ–±—É—á–µ–Ω–∏—è...")
        
        config = {
            "model_name": "tts_models/multilingual/multi-dataset/your_tts",
            "run_name": "voice_cloning_finetune",
            "run_description": "Fine-tuning YourTTS –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö",
            "data_path": str(self.wav_dir),
            "train_metadata": str(self.metadata_dir / "train_metadata.csv"),
            "val_metadata": str(self.metadata_dir / "val_metadata.csv"),
            "stats": stats,
            "training_params": {
                "batch_size": 8,
                "epochs": 1000,
                "learning_rate": 1e-4,
                "save_step": 1000,
                "eval_step": 500,
                "save_n_checkpoints": 5,
                "save_best_after": 10000,
                "target_loss": 0.5,
                "print_step": 25,
                "print_eval": True,
                "mixed_precision": True,
                "output_path": "tts_train_output",
                "datasets": [
                    {
                        "name": "voice_cloning",
                        "path": str(self.wav_dir),
                        "meta_file_train": str(self.metadata_dir / "train_metadata.csv"),
                        "meta_file_val": str(self.metadata_dir / "val_metadata.csv"),
                        "language": "ru"
                    }
                ]
            }
        }
        
        config_file = self.output_dir / "training_config.json"
        with open(config_file, 'w', encoding='utf-8') as f:
            json.dump(config, f, indent=2, ensure_ascii=False)
        
        logger.info(f"‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {config_file}")
        return config_file
    
    def run_preparation(self) -> Dict:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è...")
        
        # 1. –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
        wav_files = self.convert_ogg_to_wav()
        
        if not wav_files:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã!")
        
        # 2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π
        transcriptions = self.create_dummy_transcriptions(wav_files)
        
        # 3. –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        train_data, val_data = self.split_train_val(transcriptions)
        
        # 4. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        stats = self.save_metadata(train_data, val_data)
        
        # 5. –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config_file = self.create_training_config(stats)
        
        logger.info("üéâ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
        return {
            "wav_files": wav_files,
            "train_data": train_data,
            "val_data": val_data,
            "stats": stats,
            "config_file": str(config_file)
        }

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üé§ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏")
    print("=" * 60)
    
    try:
        preparator = TrainingDataPreparator()
        results = preparator.run_preparation()
        
        print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:")
        print(f"   üìÅ WAV —Ñ–∞–π–ª–æ–≤: {len(results['wav_files'])}")
        print(f"   üìù Train –∑–∞–ø–∏—Å–µ–π: {len(results['train_data'])}")
        print(f"   üìù Val –∑–∞–ø–∏—Å–µ–π: {len(results['val_data'])}")
        print(f"   ‚è±Ô∏è –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {results['stats']['total_duration']:.1f} —Å–µ–∫")
        print(f"   ‚è±Ô∏è –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {results['stats']['avg_duration']:.1f} —Å–µ–∫")
        print(f"   ‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {results['config_file']}")
        
        print("\nüéØ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("   1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å YourTTS: pip install TTS")
        print("   2. –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ:")
        print(f"      tts --config_path {results['config_file']}")
        print("   3. –î–æ–∂–¥–∞—Ç—å—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è")
        print("   4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    exit(main()) 