#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö TTS
"""

import os
import sys
import json
import subprocess
from pathlib import Path
from datetime import datetime

def setup_directories():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    print("üîß –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...")
    
    dirs = [
        "models/tts_data",
        "models/tts_data/wavs", 
        "models/tts_data/metadata",
        "models/tts_output"
    ]
    
    for dir_path in dirs:
        os.makedirs(dir_path, exist_ok=True)
        print(f"‚úÖ {dir_path}")
    
    return True

def convert_audio_files():
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã —Å –ø–æ–º–æ—â—å—é FFmpeg"""
    print("üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤...")
    
    input_dir = Path("data/audio")
    output_dir = Path("models/tts_data/wavs")
    
    if not input_dir.exists():
        print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è data/audio –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    ogg_files = list(input_dir.glob("*.ogg"))
    if not ogg_files:
        print("‚ùå OGG —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return False
    
    converted_count = 0
    for ogg_file in ogg_files:
        wav_file = output_dir / f"{ogg_file.stem}.wav"
        
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é FFmpeg
            cmd = [
                "ffmpeg", "-i", str(ogg_file),
                "-ar", "22050",  # Sample rate
                "-ac", "1",      # Mono
                "-y",            # Overwrite
                str(wav_file)
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            if result.returncode == 0:
                print(f"‚úÖ {ogg_file.name} -> {wav_file.name}")
                converted_count += 1
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ {ogg_file.name}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {converted_count} —Ñ–∞–π–ª–æ–≤")
    return converted_count > 0

def create_metadata():
    """–°–æ–∑–¥–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
    print("üìù –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö...")
    
    wav_dir = Path("models/tts_data/wavs")
    metadata_file = Path("models/tts_data/metadata/metadata.csv")
    
    if not wav_dir.exists():
        print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å WAV —Ñ–∞–π–ª–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    wav_files = list(wav_dir.glob("*.wav"))
    if not wav_files:
        print("‚ùå WAV —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return False
    
    # –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    metadata_lines = []
    sample_texts = [
        "–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –∞—É–¥–∏–æ—Å—ç–º–ø–ª –¥–ª—è –æ–±—É—á–µ–Ω–∏—è TTS –º–æ–¥–µ–ª–∏.",
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —Å–µ–≥–æ–¥–Ω—è –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –æ–±—É—á–µ–Ω–∏—è.",
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞.",
        "–≠—Ç–æ –≥–æ–ª–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –º—ã –±—É–¥–µ–º –∫–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å.",
        "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏ —Ä–∞–∑–≤–∏–≤–∞—é—Ç—Å—è –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ.",
        "–ù–∞—à–∞ –º–æ–¥–µ–ª—å –±—É–¥–µ—Ç –≥–æ–≤–æ—Ä–∏—Ç—å –∫–∞–∫ –≤—ã.",
        "–ö–∞—á–µ—Å—Ç–≤–æ —Å–∏–Ω—Ç–µ–∑–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö.",
        "–ß–µ–º –±–æ–ª—å—à–µ –æ–±—Ä–∞–∑—Ü–æ–≤, —Ç–µ–º –ª—É—á—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.",
        "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –º–µ–Ω—è–µ—Ç –º–∏—Ä.",
        "–ë—É–¥—É—â–µ–µ —É–∂–µ –Ω–∞—Å—Ç—É–ø–∏–ª–æ."
    ]
    
    for i, wav_file in enumerate(wav_files):
        # –í—ã–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ –∫—Ä—É–≥—É
        text = sample_texts[i % len(sample_texts)]
        
        # –§–æ—Ä–º–∞—Ç: filename|text|normalized_text
        line = f"{wav_file.name}|{text}|{text}"
        metadata_lines.append(line)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    with open(metadata_file, 'w', encoding='utf-8') as f:
        f.write('\n'.join(metadata_lines))
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω—ã –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è {len(wav_files)} —Ñ–∞–π–ª–æ–≤")
    return True

def create_training_script():
    """–°–æ–∑–¥–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
    print("üìú –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –æ–±—É—á–µ–Ω–∏—è...")
    
    script_content = '''#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è TTS –º–æ–¥–µ–ª–∏
–ó–∞–ø—É—Å–∫–∞—Ç—å –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏: source ai_env/bin/activate
"""

import os
import sys
from pathlib import Path

def main():
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ TTS
    try:
        from TTS.api import TTS
        print("‚úÖ TTS —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except ImportError:
        print("‚ùå TTS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install TTS")
        return 1
    
    # –ü—É—Ç–∏ –∫ –¥–∞–Ω–Ω—ã–º
    metadata_path = "models/tts_data/metadata/metadata.csv"
    output_path = "models/tts_output"
    
    if not os.path.exists(metadata_path):
        print(f"‚ùå –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {metadata_path}")
        return 1
    
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ TTS...")
    print("üí° –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤")
    
    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
    cmd = [
        sys.executable, "-m", "TTS.bin.train_tts",
        "--config_path", "models/tts_data/config.json",
        "--coqpit.datasets.0.path", metadata_path,
        "--coqpit.output_path", output_path,
        "--coqpit.audio.sample_rate", "22050",
        "--coqpit.training.batch_size", "8",  # –ú–∞–ª–µ–Ω—å–∫–∏–π batch –¥–ª—è RTX 3060
        "--coqpit.training.epochs", "50",
        "--coqpit.training.mixed_precision", "True"
    ]
    
    print(" ".join(cmd))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ
    os.system(" ".join(cmd))
    
    print("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    return 0

if __name__ == "__main__":
    sys.exit(main())
'''
    
    script_file = Path("scripts/train_tts_model.py")
    with open(script_file, 'w', encoding='utf-8') as f:
        f.write(script_content)
    
    # –î–µ–ª–∞–µ–º –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
    os.chmod(script_file, 0o755)
    
    print("‚úÖ –°–∫—Ä–∏–ø—Ç –æ–±—É—á–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω: scripts/train_tts_model.py")
    return True

def create_config():
    """–°–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
    print("‚öôÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    config = {
        "model": "tts_models/multilingual/multi-dataset/your_tts",
        "run_name": "custom_voice_training",
        "run_description": "–û–±—É—á–µ–Ω–∏–µ TTS –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∞—É–¥–∏–æ—Å—ç–º–ø–ª–∞—Ö",
        
        "audio": {
            "sample_rate": 22050,
            "max_wav_value": 32768.0,
            "mel_channels": 80,
            "mel_fmin": 0.0,
            "mel_fmax": 8000.0,
            "hop_length": 256,
            "win_length": 1024,
            "fft_size": 1024,
            "preemphasis": 0.0,
            "ref_level_db": 20,
            "signal_norm": True,
            "symmetric_norm": True,
            "max_norm": 4.0,
            "clip_norm": True,
            "griffin_lim_iters": 60,
            "do_trim_silence": True,
            "trim_silence_threshold": 0.1,
            "trim_silence_ratio": 0.5,
        },
        
        "training": {
            "batch_size": 8,  # –£–º–µ–Ω—å—à–µ–Ω–æ –¥–ª—è RTX 3060
            "eval_batch_size": 4,
            "num_loader_workers": 2,
            "num_eval_loader_workers": 2,
            "run_eval": True,
            "test_delay_epochs": -1,
            "epochs": 50,
            "text_cleaner": "multilingual_cleaners",
            "use_phonemes": False,
            "phoneme_language": "ru",
            "phoneme_cache_path": "models/tts_data/phoneme_cache",
            "print_step": 10,
            "print_eval": True,
            "mixed_precision": True,
            "output_path": "models/tts_output",
            "datasets": [
                {
                    "name": "custom_voice",
                    "path": "models/tts_data/metadata/metadata.csv",
                    "meta_file_train": "",
                    "meta_file_val": ""
                }
            ]
        },
        
        "optimizer": {
            "type": "AdamW",
            "params": {
                "lr": 0.001,
                "weight_decay": 0.01,
                "betas": [0.9, 0.998]
            }
        },
        
        "scheduler": {
            "type": "NoamLR",
            "params": {
                "warmup_steps": 1000,
                "last_epoch": -1
            }
        }
    }
    
    config_file = Path("models/tts_data/config.json")
    with open(config_file, 'w', encoding='utf-8') as f:
        json.dump(config, f, indent=2, ensure_ascii=False)
    
    print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞")
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üé§ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è TTS")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤
    audio_dir = Path("data/audio")
    if not audio_dir.exists():
        print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è data/audio –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ data/audio/")
        return 1
    
    ogg_files = list(audio_dir.glob("*.ogg"))
    if not ogg_files:
        print("‚ùå OGG —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ data/audio/")
        return 1
    
    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(ogg_files)} –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not setup_directories():
        return 1
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∞—É–¥–∏–æ
    if not convert_audio_files():
        return 1
    
    # –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    if not create_metadata():
        return 1
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if not create_config():
        return 1
    
    # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –æ–±—É—á–µ–Ω–∏—è
    if not create_training_script():
        return 1
    
    print("\nüéâ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TTS: pip install TTS")
    print("2. –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ: source ai_env/bin/activate")
    print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ: python scripts/train_tts_model.py")
    print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("   - –ú–∏–Ω–∏–º—É–º 10-20 –∞—É–¥–∏–æ—Å—ç–º–ø–ª–æ–≤")
    print("   - –ö–∞—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–∏ 16kHz+")
    print("   - –†–∞–∑–Ω–∞—è –∏–Ω—Ç–æ–Ω–∞—Ü–∏—è –∏ —ç–º–æ—Ü–∏–∏")
    print("   - –ß–∏—Å—Ç–∞—è —Ä–µ—á—å –±–µ–∑ —à—É–º–æ–≤")
    
    return 0

if __name__ == "__main__":
    sys.exit(main()) 