#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞
"""

import os
import sys
import json
import asyncio
import logging
from pathlib import Path
from typing import List, Dict, Any
import requests
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class QuickSystemTester:
    """–ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self):
        self.base_dir = Path(__file__).parent.parent
        self.test_data_dir = self.base_dir / "test_data"
        self.audio_dir = self.test_data_dir / "audio"
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.config = {
            "backend_url": "http://127.0.0.1:8000",
            "hier_speech_url": "http://127.0.0.1:8001",
            "test_phrases": [
                "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?",
                "–°–µ–≥–æ–¥–Ω—è –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞—è –ø–æ–≥–æ–¥–∞",
                "–Ø –∏–∑—É—á–∞—é –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç"
            ]
        }
    
    def analyze_audio_files(self) -> Dict[str, Any]:
        """–ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤"""
        logger.info("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã...")
        
        audio_files = list(self.audio_dir.glob("*.ogg"))
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(audio_files)} –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤")
        
        # –í—ã–±–∏—Ä–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_files = audio_files[:5]  # –ü–µ—Ä–≤—ã–µ 5 —Ñ–∞–π–ª–æ–≤
        
        analysis = {
            "total_files": len(audio_files),
            "test_files": [f.name for f in test_files],
            "test_file_paths": [str(f) for f in test_files]
        }
        
        return analysis
    
    async def test_connections(self) -> Dict[str, bool]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
        logger.info("üîó –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
        
        connections = {}
        
        # –¢–µ—Å—Ç HierSpeech TTS
        try:
            response = requests.get(f"{self.config['hier_speech_url']}/health", timeout=5)
            connections["hier_speech"] = response.status_code == 200
            logger.info(f"HierSpeech TTS: {'‚úÖ' if connections['hier_speech'] else '‚ùå'}")
        except Exception as e:
            connections["hier_speech"] = False
            logger.error(f"HierSpeech TTS: ‚ùå {e}")
        
        # –¢–µ—Å—Ç Backend
        try:
            response = requests.get(f"{self.config['backend_url']}/health", timeout=5)
            connections["backend"] = response.status_code == 200
            logger.info(f"Backend: {'‚úÖ' if connections['backend'] else '‚ùå'}")
        except Exception as e:
            connections["backend"] = False
            logger.error(f"Backend: ‚ùå {e}")
        
        return connections
    
    async def test_voice_cloning(self, audio_file_path: str) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞"""
        logger.info(f"üé§ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞...")
        
        try:
            audio_file = Path(audio_file_path)
            with open(audio_file, 'rb') as f:
                files = {'audio': (audio_file.name, f, 'audio/ogg')}
                
                response = requests.post(
                    f"{self.config['backend_url']}/api/voice/clone",
                    files=files,
                    timeout=30
                )
                
                if response.status_code == 200:
                    result = response.json()
                    logger.info("‚úÖ –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞ —É—Å–ø–µ—à–Ω–æ")
                    return {
                        "success": True,
                        "voice_id": result.get('voice_id'),
                        "message": result.get('message', 'OK')
                    }
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {response.status_code}")
                    return {"success": False, "error": f"HTTP {response.status_code}"}
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            return {"success": False, "error": str(e)}
    
    async def test_tts_synthesis(self, text: str, voice_id: str = "default") -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏"""
        logger.info(f"üîä –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏: '{text[:30]}...'")
        
        try:
            response = requests.post(
                f"{self.config['hier_speech_url']}/synthesize",
                json={
                    "text": text,
                    "voice_id": voice_id,
                    "language": "ru"
                },
                timeout=30
            )
            
            if response.status_code == 200:
                result = response.json()
                logger.info("‚úÖ –°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ —É—Å–ø–µ—à–µ–Ω")
                return {
                    "success": True,
                    "audio_path": result.get('audio_path'),
                    "processing_time": result.get('processing_time', 0)
                }
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞: {response.status_code}")
                return {"success": False, "error": f"HTTP {response.status_code}"}
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ç–µ–∑–µ: {e}")
            return {"success": False, "error": str(e)}
    
    async def run_quick_test(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...")
        
        results = {
            "timestamp": datetime.now().isoformat(),
            "analysis": {},
            "connections": {},
            "voice_cloning": {},
            "tts_synthesis": [],
            "overall_score": 0
        }
        
        # 1. –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤
        results["analysis"] = self.analyze_audio_files()
        
        # 2. –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        results["connections"] = await self.test_connections()
        
        # 3. –¢–µ—Å—Ç –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª—ã)
        if results["analysis"]["test_file_paths"]:
            audio_file = results["analysis"]["test_file_paths"][0]
            results["voice_cloning"] = await self.test_voice_cloning(audio_file)
        
        # 4. –¢–µ—Å—Ç —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏
        voice_id = results["voice_cloning"].get("voice_id", "default")
        for phrase in self.config["test_phrases"]:
            tts_result = await self.test_tts_synthesis(phrase, voice_id)
            tts_result["phrase"] = phrase
            results["tts_synthesis"].append(tts_result)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π –±–∞–ª–ª
        connection_score = sum(results["connections"].values()) / len(results["connections"])
        cloning_score = 1.0 if results["voice_cloning"].get("success") else 0.0
        tts_score = sum(1 for r in results["tts_synthesis"] if r.get("success")) / len(results["tts_synthesis"]) if results["tts_synthesis"] else 0
        
        results["overall_score"] = (connection_score + cloning_score + tts_score) / 3
        
        logger.info(f"üìä –û–±—â–∏–π –±–∞–ª–ª: {results['overall_score']:.2f}/1.0")
        
        return results
    
    def save_results(self, results: Dict[str, Any]):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        results_file = self.base_dir / f"quick_test_results_{timestamp}.json"
        
        with open(results_file, 'w', encoding='utf-8') as f:
            json.dump(results, f, ensure_ascii=False, indent=2)
        
        logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {results_file}")
        
        # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç
        print("\n" + "="*50)
        print("–û–¢–ß–ï–¢ –û –ë–´–°–¢–†–û–ú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò")
        print("="*50)
        print(f"–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {results['analysis']['total_files']}")
        print(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {sum(results['connections'].values())}/{len(results['connections'])}")
        print(f"–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞: {'‚úÖ' if results['voice_cloning'].get('success') else '‚ùå'}")
        print(f"–°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏: {sum(1 for r in results['tts_synthesis'] if r.get('success'))}/{len(results['tts_synthesis'])}")
        print(f"–û–±—â–∏–π –±–∞–ª–ª: {results['overall_score']:.2f}/1.0")
        
        if results['overall_score'] >= 0.8:
            print("üéâ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!")
        elif results['overall_score'] >= 0.6:
            print("üëç –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ")
        else:
            print("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü§ñ –ë–´–°–¢–†–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –¶–ò–§–†–û–í–û–ì–û –ê–í–ê–¢–ê–†–ê")
    print("=" * 50)
    
    tester = QuickSystemTester()
    results = await tester.run_quick_test()
    tester.save_results(results)

if __name__ == "__main__":
    asyncio.run(main()) 