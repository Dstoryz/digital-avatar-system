#!/usr/bin/env python3
"""
–ì–∏–±—Ä–∏–¥–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —Ä—É—Å—Å–∫–æ–π —Ä–µ—á–∏ —Å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≥–æ–ª–æ—Å–∞.

–≠—Ç–æ —Ä–µ—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–æ–∫:
1. YourTTS –¥–ª—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞ (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π)
2. Pitch shifting –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≥–æ–ª–æ—Å—É
3. –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –±–∞–∑–æ–≤—ã–º —Ä—É—Å—Å–∫–∏–º TTS

–ê–≤—Ç–æ—Ä: AI Assistant
–í–µ—Ä—Å–∏—è: 1.0.0
"""

import os
import subprocess
import shutil
import librosa
import soundfile as sf
import numpy as np
from pathlib import Path
from typing import Dict, Tuple, Optional

class RussianTTSHybrid:
    """–ì–∏–±—Ä–∏–¥–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —Ä—É—Å—Å–∫–æ–π —Ä–µ—á–∏ —Å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≥–æ–ª–æ—Å–∞."""
    
    def __init__(self, coqui_env: str = "coqui_tts_env"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è.
        
        Args:
            coqui_env: –ü—É—Ç—å –∫ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º—É –æ–∫—Ä—É–∂–µ–Ω–∏—é Coqui TTS
        """
        self.coqui_env = coqui_env
        print("üé§ –ì–∏–±—Ä–∏–¥–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —Ä—É—Å—Å–∫–æ–π —Ä–µ—á–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
    
    def analyze_voice_characteristics(self, audio_path: str) -> Dict[str, float]:
        """–ê–Ω–∞–ª–∏–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –≥–æ–ª–æ—Å–∞."""
        try:
            y, sr = librosa.load(audio_path, sr=None)
            
            # –ü–∏—Ç—á (–≤—ã—Å–æ—Ç–∞ –≥–æ–ª–æ—Å–∞)
            pitches, magnitudes = librosa.piptrack(y=y, sr=sr)
            pitch_values = []
            for t in range(pitches.shape[1]):
                index = magnitudes[:, t].argmax()
                pitch = pitches[index, t]
                if pitch > 0:
                    pitch_values.append(pitch)
            
            avg_pitch = np.mean(pitch_values) if pitch_values else 200
            
            return {
                "avg_pitch": avg_pitch,
                "pitch_std": np.std(pitch_values) if pitch_values else 0,
                "duration": len(y) / sr,
                "sample_rate": sr
            }
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≥–æ–ª–æ—Å–∞: {e}")
            return {"avg_pitch": 200, "pitch_std": 0, "duration": 0, "sample_rate": 16000}
    
    def create_voice_embedding(self, speaker_wav: str) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –≥–æ–ª–æ—Å–∞ —Å YourTTS."""
        print(f"üîç –°–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –≥–æ–ª–æ—Å–∞ –∏–∑ {speaker_wav}...")
        
        # –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–µ–∫—Å—Ç —Å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
        english_text = "Hello! This is a test of voice cloning."
        output_path = "voice_embedding_test.wav"
        
        cmd = [
            f"source {self.coqui_env}/bin/activate && tts",
            "--text", english_text,
            "--model_name", "tts_models/multilingual/multi-dataset/your_tts",
            "--speaker_wav", speaker_wav,
            "--language_idx", "en",
            "--out_path", output_path
        ]
        
        try:
            subprocess.run(" ".join(cmd), shell=True, check=True)
            print("‚úÖ –≠–º–±–µ–¥–¥–∏–Ω–≥ –≥–æ–ª–æ—Å–∞ —Å–æ–∑–¥–∞–Ω")
            return True
        except subprocess.CalledProcessError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞: {e}")
            return False
    
    def synthesize_russian_with_pitch_matching(self, text: str, speaker_wav: str, output_path: str) -> bool:
        """
        –°–∏–Ω—Ç–µ–∑ —Ä—É—Å—Å–∫–æ–π —Ä–µ—á–∏ —Å –ø–æ–¥–±–æ—Ä–æ–º –ø–∏—Ç—á–∞ –ø–æ–¥ –∏—Å—Ö–æ–¥–Ω—ã–π –≥–æ–ª–æ—Å.
        
        Args:
            text: –†—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞
            speaker_wav: –ü—É—Ç—å –∫ –∞—É–¥–∏–æ—Å—ç–º–ø–ª—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≥–æ–ª–æ—Å–∞
            output_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            
        Returns:
            True –µ—Å–ª–∏ —Å–∏–Ω—Ç–µ–∑ —É—Å–ø–µ—à–µ–Ω
        """
        print(f"üá∑üá∫ –°–∏–Ω—Ç–µ–∑ —Ä—É—Å—Å–∫–æ–π —Ä–µ—á–∏: '{text[:50]}...'")
        
        # –®–∞–≥ 1: –ê–Ω–∞–ª–∏–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –≥–æ–ª–æ—Å–∞
        print("üìä –ê–Ω–∞–ª–∏–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –≥–æ–ª–æ—Å–∞...")
        original_chars = self.analyze_voice_characteristics(speaker_wav)
        original_pitch = original_chars["avg_pitch"]
        
        print(f"üéµ –°—Ä–µ–¥–Ω–∏–π –ø–∏—Ç—á –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –≥–æ–ª–æ—Å–∞: {original_pitch:.1f} Hz")
        
        # –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ —Ä—É—Å—Å–∫–æ–≥–æ —Å–∏–Ω—Ç–µ–∑–∞
        print("üé§ –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ —Ä—É—Å—Å–∫–æ–≥–æ —Å–∏–Ω—Ç–µ–∑–∞...")
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —Å–∏–Ω—Ç–µ–∑–∞
        approaches = [
            # –ü–æ–¥—Ö–æ–¥ 1: –ò—Å–ø–æ–ª—å–∑—É–µ–º YourTTS —Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
            {
                "type": "english_clone",
                "text": "Hello! This is a test of voice cloning.",
                "language": "en",
                "description": "YourTTS —Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º (–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –≥–æ–ª–æ—Å–∞)"
            },
            # –ü–æ–¥—Ö–æ–¥ 2: –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ä—É—Å—Å–∫–∏–π —Å–∏–Ω—Ç–µ–∑
            {
                "type": "russian_basic",
                "text": text,
                "language": "ru",
                "description": "–ë–∞–∑–æ–≤—ã–π —Ä—É—Å—Å–∫–∏–π —Å–∏–Ω—Ç–µ–∑"
            }
        ]
        
        cloned_audio_path = None
        
        for i, approach in enumerate(approaches):
            print(f"\nüîß –ü–æ–ø—ã—Ç–∫–∞ {i+1}: {approach['description']}")
            
            temp_output = f"temp_{approach['type']}_{i}.wav"
            
            if approach["type"] == "english_clone":
                # –°–æ–∑–¥–∞–µ–º –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥–æ–ª–æ—Å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
                success = self._synthesize_with_yourtts(
                    approach["text"], speaker_wav, temp_output, approach["language"]
                )
                if success:
                    cloned_audio_path = temp_output
                    break
            else:
                # –ü—Ä–æ–±—É–µ–º —Ä—É—Å—Å–∫–∏–π —Å–∏–Ω—Ç–µ–∑ (–º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å)
                success = self._synthesize_with_yourtts(
                    approach["text"], speaker_wav, temp_output, approach["language"]
                )
                if success:
                    # –ö–æ–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    shutil.copy(temp_output, output_path)
                    print(f"‚úÖ –†—É—Å—Å–∫–∏–π —Å–∏–Ω—Ç–µ–∑ —Å–æ–∑–¥–∞–Ω: {output_path}")
                    
                    # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                    for temp_file in [f"temp_english_clone_{i}.wav", f"temp_russian_basic_{i}.wav"]:
                        if os.path.exists(temp_file):
                            os.remove(temp_file)
                    
                    return True
        
        # –®–∞–≥ 3: –ï—Å–ª–∏ —Ä—É—Å—Å–∫–∏–π —Å–∏–Ω—Ç–µ–∑ –Ω–µ —É–¥–∞–ª—Å—è, —Å–æ–∑–¥–∞–µ–º –≥–∏–±—Ä–∏–¥–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
        if cloned_audio_path:
            print("üîß –°–æ–∑–¥–∞–Ω–∏–µ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è...")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥–æ–ª–æ—Å
            cloned_chars = self.analyze_voice_characteristics(cloned_audio_path)
            cloned_pitch = cloned_chars["avg_pitch"]
            
            print(f"üéµ –°—Ä–µ–¥–Ω–∏–π –ø–∏—Ç—á –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≥–æ–ª–æ—Å–∞: {cloned_pitch:.1f} Hz")
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ä—É—Å—Å–∫–∏–π —Å–∏–Ω—Ç–µ–∑ —Å –ø–æ–º–æ—â—å—é espeak –∏–ª–∏ –¥—Ä—É–≥–æ–π —Å–∏—Å—Ç–µ–º—ã
            russian_audio_path = self._create_simple_russian_synthesis(text)
            
            if russian_audio_path and os.path.exists(russian_audio_path):
                # –ü—Ä–∏–º–µ–Ω—è–µ–º pitch shifting –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –≥–æ–ª–æ—Å—É
                success = self._apply_pitch_shifting(
                    russian_audio_path, cloned_pitch, output_path
                )
                
                if success:
                    print(f"‚úÖ –ì–∏–±—Ä–∏–¥–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: {output_path}")
                    
                    # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                    for temp_file in [cloned_audio_path, russian_audio_path]:
                        if os.path.exists(temp_file):
                            os.remove(temp_file)
                    
                    return True
        
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä—É—Å—Å–∫–∏–π —Å–∏–Ω—Ç–µ–∑")
        return False
    
    def _synthesize_with_yourtts(self, text: str, speaker_wav: str, output_path: str, language: str) -> bool:
        """–°–∏–Ω—Ç–µ–∑ —Å –ø–æ–º–æ—â—å—é YourTTS."""
        cmd = [
            f"source {self.coqui_env}/bin/activate && tts",
            "--text", text,
            "--model_name", "tts_models/multilingual/multi-dataset/your_tts",
            "--speaker_wav", speaker_wav,
            "--language_idx", language,
            "--out_path", output_path
        ]
        
        try:
            subprocess.run(" ".join(cmd), shell=True, check=True, capture_output=True)
            return True
        except subprocess.CalledProcessError:
            return False
    
    def _create_simple_russian_synthesis(self, text: str) -> Optional[str]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ä—É—Å—Å–∫–æ–≥–æ —Å–∏–Ω—Ç–µ–∑–∞."""
        output_path = "temp_russian_simple.wav"
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        methods = [
            # –ú–µ—Ç–æ–¥ 1: espeak (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
            f"espeak -v ru '{text}' -w {output_path}",
            # –ú–µ—Ç–æ–¥ 2: festival (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
            f"echo '{text}' | festival --tts --output {output_path}",
            # –ú–µ—Ç–æ–¥ 3: gtts (Google Text-to-Speech)
            f"python -c \"from gtts import gTTS; tts = gTTS('{text}', lang='ru'); tts.save('{output_path}')\""
        ]
        
        for method in methods:
            try:
                subprocess.run(method, shell=True, check=True, capture_output=True)
                if os.path.exists(output_path):
                    return output_path
            except (subprocess.CalledProcessError, FileNotFoundError):
                continue
        
        return None
    
    def _apply_pitch_shifting(self, input_path: str, target_pitch: float, output_path: str) -> bool:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ pitch shifting –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ü–µ–ª–µ–≤–æ–º—É –ø–∏—Ç—á—É."""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ
            y, sr = librosa.load(input_path, sr=None)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π –ø–∏—Ç—á
            pitches, magnitudes = librosa.piptrack(y=y, sr=sr)
            pitch_values = []
            for t in range(pitches.shape[1]):
                index = magnitudes[:, t].argmax()
                pitch = pitches[index, t]
                if pitch > 0:
                    pitch_values.append(pitch)
            
            current_pitch = np.mean(pitch_values) if pitch_values else 200
            
            # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–¥–≤–∏–≥–∞
            pitch_ratio = target_pitch / current_pitch
            n_steps = 12 * np.log2(pitch_ratio)
            
            print(f"üéµ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ pitch shifting: {current_pitch:.1f} Hz ‚Üí {target_pitch:.1f} Hz")
            print(f"üéµ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–¥–≤–∏–≥–∞: {pitch_ratio:.2f} ({n_steps:.1f} –ø–æ–ª—É—Ç–æ–Ω–æ–≤)")
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º pitch shifting
            y_shifted = librosa.effects.pitch_shift(y, sr=sr, n_steps=n_steps)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            sf.write(output_path, y_shifted, sr)
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ pitch shifting: {e}")
            return False
    
    def test_hybrid_solution(self, speaker_wav: str) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è."""
        print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ì–ò–ë–†–ò–î–ù–û–ì–û –†–ï–®–ï–ù–ò–Ø")
        print("=" * 50)
        
        test_texts = [
            "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?",
            "–°–µ–≥–æ–¥–Ω—è –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞—è –ø–æ–≥–æ–¥–∞.",
            "–Ø –æ—á–µ–Ω—å —Ä–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å!",
            "–≠—Ç–æ —Ç–µ—Å—Ç —Å–∏–Ω—Ç–µ–∑–∞ —Ä—É—Å—Å–∫–æ–π —Ä–µ—á–∏ —Å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≥–æ–ª–æ—Å–∞."
        ]
        
        success_count = 0
        
        for i, text in enumerate(test_texts):
            output_path = f"hybrid_russian_test_{i+1}.wav"
            print(f"\nüìù –¢–µ—Å—Ç {i+1}: {text}")
            
            success = self.synthesize_russian_with_pitch_matching(text, speaker_wav, output_path)
            
            if success:
                print(f"‚úÖ –¢–µ—Å—Ç {i+1} —É—Å–ø–µ—à–µ–Ω")
                success_count += 1
            else:
                print(f"‚ùå –¢–µ—Å—Ç {i+1} –ø—Ä–æ–≤–∞–ª–µ–Ω")
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {success_count}/{len(test_texts)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
        return success_count > 0

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è."""
    print("üé§ –ì–ò–ë–†–ò–î–ù–û–ï –†–ï–®–ï–ù–ò–ï –î–õ–Ø –†–£–°–°–ö–û–ô –†–ï–ß–ò")
    print("=" * 50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    hybrid_tts = RussianTTSHybrid()
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    speaker_wav = "data/audio/audio_1@02-12-2020_23-57-46.ogg"
    
    success = hybrid_tts.test_hybrid_solution(speaker_wav)
    
    if success:
        print("\n‚úÖ –ì–∏–±—Ä–∏–¥–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print("üéØ –ì–æ—Ç–æ–≤–æ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–µ–∫—Ç")
    else:
        print("\n‚ùå –ì–∏–±—Ä–∏–¥–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
        print("üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å ElevenLabs API")
    
    print(f"\n" + "=" * 50)
    print("üìã –†–ï–ó–Æ–ú–ï:")
    print("‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–æ–∫")
    print("‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≥–æ–ª–æ—Å–∞")
    print("‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫")
    print("‚ö†Ô∏è  –ö–∞—á–µ—Å—Ç–≤–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∏–∂–µ, —á–µ–º —É —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π")

if __name__ == "__main__":
    main() 