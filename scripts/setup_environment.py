#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
"""

import os
import sys
import subprocess
import platform
import json
from typing import Dict, List, Tuple, Any
from pathlib import Path

class EnvironmentSetup:
    """–ö–ª–∞—Å—Å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
    
    def __init__(self):
        self.system = platform.system().lower()
        self.is_linux = self.system == "linux"
        self.is_windows = self.system == "windows"
        self.is_macos = self.system == "darwin"
        
        self.requirements = {
            "python": "3.10",
            "node": "18.0.0",
            "ffmpeg": "4.0",
            "cuda": "11.8",
            "redis": "6.0"
        }
        
        self.python_packages = [
            "fastapi",
            "uvicorn",
            "pydantic",
            "python-multipart",
            "pillow",
            "opencv-python",
            "numpy",
            "torch",
            "torchvision",
            "torchaudio",
            "transformers",
            "diffusers",
            "accelerate",
            "safetensors",
            "scipy",
            "librosa",
            "soundfile",
            "pydub",
            "redis",
            "websockets",
            "aiofiles",
            "python-jose[cryptography]",
            "passlib[bcrypt]",
            "python-dotenv",
            "requests",
            "httpx",
            "tqdm",
            "matplotlib",
            "seaborn",
            "jupyter"
        ]
        
        self.node_packages = [
            "react",
            "react-dom",
            "react-router-dom",
            "axios",
            "tailwindcss",
            "@tailwindcss/forms",
            "@headlessui/react",
            "@heroicons/react",
            "framer-motion",
            "react-dropzone",
            "react-hot-toast",
            "zustand",
            "typescript",
            "@types/react",
            "@types/react-dom",
            "@types/node",
            "vite",
            "@vitejs/plugin-react",
            "autoprefixer",
            "postcss"
        ]
        
        self.ai_models = {
            "sadtalker": "https://github.com/OpenTalker/SadTalker",
            "coqui_tts": "https://github.com/coqui-ai/TTS",
            "whisper": "openai-whisper",
            "real_esrgan": "https://github.com/xinntao/Real-ESRGAN",
            "wav2lip": "https://github.com/Rudrabha/Wav2Lip"
        }
    
    def print_header(self, title: str):
        """–í—ã–≤–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        print(f"\n{'='*60}")
        print(f"üîß {title}")
        print(f"{'='*60}")
    
    def print_step(self, step: str):
        """–í—ã–≤–æ–¥ —à–∞–≥–∞"""
        print(f"\nüìã {step}")
        print("-" * 40)
    
    def run_command(self, command: List[str], check: bool = True) -> Tuple[bool, str]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"""
        try:
            result = subprocess.run(
                command, 
                capture_output=True, 
                text=True, 
                check=check
            )
            return True, result.stdout
        except subprocess.CalledProcessError as e:
            return False, e.stderr
    
    def check_python(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ Python"""
        self.print_step("–ü—Ä–æ–≤–µ—Ä–∫–∞ Python")
        
        version = sys.version_info
        print(f"–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è Python: {version.major}.{version.minor}.{version.micro}")
        
        if version.major >= 3 and version.minor >= 10:
            print("‚úÖ Python –≤–µ—Ä—Å–∏—è –ø–æ–¥—Ö–æ–¥–∏—Ç")
            return True
        else:
            print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.10 –∏–ª–∏ –≤—ã—à–µ")
            return False
    
    def check_cuda(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ CUDA"""
        self.print_step("–ü—Ä–æ–≤–µ—Ä–∫–∞ CUDA")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º nvidia-smi
        success, output = self.run_command(["nvidia-smi"], check=False)
        if success:
            print("‚úÖ CUDA –¥–æ—Å—Ç—É–ø–µ–Ω")
            print(output.split('\n')[0])  # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –≤–µ—Ä—Å–∏–µ–π
            return True
        else:
            print("‚ö†Ô∏è  CUDA –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            print("   –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –µ—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç GPU –∏–ª–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ CPU")
            return False
    
    def check_ffmpeg(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ FFmpeg"""
        self.print_step("–ü—Ä–æ–≤–µ—Ä–∫–∞ FFmpeg")
        
        success, output = self.run_command(["ffmpeg", "-version"], check=False)
        if success:
            print("‚úÖ FFmpeg —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            version_line = output.split('\n')[0]
            print(f"   {version_line}")
            return True
        else:
            print("‚ùå FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω")
            if self.is_linux:
                print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: sudo apt install ffmpeg")
            elif self.is_macos:
                print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: brew install ffmpeg")
            elif self.is_windows:
                print("   –°–∫–∞—á–∞–π—Ç–µ —Å: https://ffmpeg.org/download.html")
            return False
    
    def check_node(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ Node.js"""
        self.print_step("–ü—Ä–æ–≤–µ—Ä–∫–∞ Node.js")
        
        success, output = self.run_command(["node", "--version"], check=False)
        if success:
            version = output.strip()
            print(f"‚úÖ Node.js —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {version}")
            return True
        else:
            print("‚ùå Node.js –Ω–µ –Ω–∞–π–¥–µ–Ω")
            print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å: https://nodejs.org/")
            return False
    
    def check_npm(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ npm"""
        self.print_step("–ü—Ä–æ–≤–µ—Ä–∫–∞ npm")
        
        success, output = self.run_command(["npm", "--version"], check=False)
        if success:
            version = output.strip()
            print(f"‚úÖ npm —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {version}")
            return True
        else:
            print("‚ùå npm –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
    
    def check_redis(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ Redis"""
        self.print_step("–ü—Ä–æ–≤–µ—Ä–∫–∞ Redis")
        
        try:
            success, output = self.run_command(["redis-server", "--version"], check=False)
            if success:
                print("‚úÖ Redis —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                print(f"   {output.strip()}")
                return True
            else:
                print("‚ö†Ô∏è  Redis –Ω–µ –Ω–∞–π–¥–µ–Ω")
                if self.is_linux:
                    print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: sudo apt install redis-server")
                elif self.is_macos:
                    print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: brew install redis")
                elif self.is_windows:
                    print("   –°–∫–∞—á–∞–π—Ç–µ —Å: https://redis.io/download")
                return False
        except FileNotFoundError:
            print("‚ö†Ô∏è  Redis –Ω–µ –Ω–∞–π–¥–µ–Ω")
            if self.is_linux:
                print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: sudo apt install redis-server")
            elif self.is_macos:
                print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: brew install redis")
            elif self.is_windows:
                print("   –°–∫–∞—á–∞–π—Ç–µ —Å: https://redis.io/download")
            return False
    
    def install_python_packages(self) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –ø–∞–∫–µ—Ç–æ–≤"""
        self.print_step("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –ø–∞–∫–µ—Ç–æ–≤")
        
        print("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞–∫–µ—Ç—ã...")
        
        # –°–æ–∑–¥–∞–µ–º requirements.txt
        requirements_file = "requirements.txt"
        with open(requirements_file, 'w') as f:
            for package in self.python_packages:
                f.write(f"{package}\n")
        
        print(f"–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª {requirements_file}")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞–∫–µ—Ç—ã
        success, output = self.run_command([
            sys.executable, "-m", "pip", "install", "-r", requirements_file
        ])
        
        if success:
            print("‚úÖ Python –ø–∞–∫–µ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Python –ø–∞–∫–µ—Ç–æ–≤")
            print(output)
            return False
    
    def setup_frontend(self) -> bool:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Frontend"""
        self.print_step("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Frontend")
        
        frontend_dir = Path("frontend")
        if not frontend_dir.exists():
            print("–°–æ–∑–¥–∞–µ–º React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...")
            
            # –°–æ–∑–¥–∞–µ–º React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å Vite
            success, output = self.run_command([
                "npm", "create", "vite@latest", "frontend", "--", "--template", "react-ts"
            ])
            
            if not success:
                print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
                print(output)
                return False
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ø–∞–ø–∫—É frontend
        os.chdir(frontend_dir)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        print("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º npm –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...")
        success, output = self.run_command(["npm", "install"])
        
        if success:
            print("‚úÖ Frontend –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            os.chdir("..")  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ npm –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
            print(output)
            os.chdir("..")
            return False
    
    def create_env_files(self) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        self.print_step("–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        # Backend .env
        backend_env = """# Backend Environment Variables
DEBUG=True
HOST=0.0.0.0
PORT=8000

# Database
DATABASE_URL=sqlite:///./digital_avatar.db

# Redis
REDIS_URL=redis://localhost:6379

# Security
SECRET_KEY=your-secret-key-change-this-in-production
ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=30

# File Upload
MAX_FILE_SIZE=10485760  # 10MB
UPLOAD_DIR=./uploads
PROCESSED_DIR=./processed

# AI Models
SADTALKER_PATH=./models/sadtalker
COQUI_TTS_PATH=./models/coqui_tts
WHISPER_MODEL=base
OLLAMA_URL=http://localhost:11434

# GPU Settings
USE_GPU=True
CUDA_VISIBLE_DEVICES=0
"""
        
        with open("backend/.env", "w") as f:
            f.write(backend_env)
        
        # Frontend .env
        frontend_env = """# Frontend Environment Variables
VITE_API_URL=http://localhost:8000
VITE_WS_URL=ws://localhost:8000/ws
VITE_APP_NAME=Digital Avatar
VITE_APP_VERSION=1.0.0
"""
        
        with open("frontend/.env", "w") as f:
            f.write(frontend_env)
        
        print("‚úÖ –§–∞–π–ª—ã –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω—ã")
        return True
    
    def create_directories(self) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
        self.print_step("–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π")
        
        directories = [
            "uploads",
            "processed",
            "models",
            "logs",
            "cache",
            "temp"
        ]
        
        for directory in directories:
            Path(directory).mkdir(exist_ok=True)
            print(f"   üìÅ {directory}/")
        
        print("‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã")
        return True
    
    def generate_setup_report(self, results: Dict[str, bool]) -> None:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ"""
        self.print_step("–û—Ç—á–µ—Ç –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:")
        for component, status in results.items():
            icon = "‚úÖ" if status else "‚ùå"
            print(f"   {icon} {component}")
        
        success_count = sum(results.values())
        total_count = len(results)
        
        print(f"\nüéØ –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{total_count} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≥–æ—Ç–æ–≤–æ")
        
        if success_count == total_count:
            print("üéâ –û–∫—Ä—É–∂–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ!")
        else:
            print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ç—Ä–µ–±—É—é—Ç —Ä—É—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
            print("   1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã")
            print("   2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ AI –º–æ–¥–µ–ª–∏")
            print("   3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã")
    
    def run_setup(self) -> None:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        self.print_header("–ù–ê–°–¢–†–û–ô–ö–ê –û–ö–†–£–ñ–ï–ù–ò–Ø –¶–ò–§–†–û–í–û–ì–û –ê–í–ê–¢–ê–†–ê")
        
        results = {}
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        results["Python"] = self.check_python()
        results["CUDA"] = self.check_cuda()
        results["FFmpeg"] = self.check_ffmpeg()
        results["Node.js"] = self.check_node()
        results["npm"] = self.check_npm()
        results["Redis"] = self.check_redis()
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∏
        if results["Python"]:
            results["Python Packages"] = self.install_python_packages()
        
        if results["Node.js"] and results["npm"]:
            results["Frontend"] = self.setup_frontend()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        results["Environment Files"] = self.create_env_files()
        results["Directories"] = self.create_directories()
        
        # –û—Ç—á–µ—Ç
        self.generate_setup_report(results)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        with open("setup_report.json", "w") as f:
            json.dump({
                "timestamp": str(Path().cwd()),
                "system": self.system,
                "results": results
            }, f, indent=2)
        
        print(f"\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ setup_report.json")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    setup = EnvironmentSetup()
    setup.run_setup()

if __name__ == "__main__":
    main() 