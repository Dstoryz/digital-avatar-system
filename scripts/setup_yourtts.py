#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ YourTTS
"""

import subprocess
import sys
import os
from pathlib import Path

def run_command(cmd, description):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É —Å –≤—ã–≤–æ–¥–æ–º"""
    print(f"üîÑ {description}...")
    print(f"   –ö–æ–º–∞–Ω–¥–∞: {' '.join(cmd)}")
    
    try:
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            print(f"‚úÖ {description} –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            if result.stdout:
                print(f"   –í—ã–≤–æ–¥: {result.stdout.strip()}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ {description.lower()}:")
            print(f"   {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ {description.lower()}: {e}")
        return False
    
    return True

def check_gpu():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å GPU"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ GPU...")
    
    try:
        import torch
        if torch.cuda.is_available():
            gpu_count = torch.cuda.device_count()
            gpu_name = torch.cuda.get_device_name(0)
            gpu_memory = torch.cuda.get_device_properties(0).total_memory / 1024**3
            
            print(f"‚úÖ GPU –¥–æ—Å—Ç—É–ø–µ–Ω:")
            print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {gpu_count}")
            print(f"   –ú–æ–¥–µ–ª—å: {gpu_name}")
            print(f"   –ü–∞–º—è—Ç—å: {gpu_memory:.1f} GB")
            
            if gpu_memory < 8:
                print("‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ: –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è GPU —Å 8GB+ VRAM")
            
            return True
        else:
            print("‚ùå GPU –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
            
    except ImportError:
        print("‚ùå PyTorch –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False

def setup_environment():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ"""
    print("üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è YourTTS...")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not run_command([sys.executable, "-m", "venv", "yourtts_env"], 
                      "–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"):
        return False
    
    # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è (–¥–ª—è Linux)
    activate_script = "yourtts_env/bin/activate"
    if not os.path.exists(activate_script):
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–∫—Ä–∏–ø—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏")
        return False
    
    print("‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ")
    return True

def install_dependencies():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
    print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip
    if not run_command([sys.executable, "-m", "pip", "install", "--upgrade", "pip"], 
                      "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip"):
        return False
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ PyTorch —Å CUDA
    if not run_command([sys.executable, "-m", "pip", "install", 
                       "torch", "torchaudio", "--index-url", "https://download.pytorch.org/whl/cu118"], 
                      "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ PyTorch"):
        return False
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ TTS
    if not run_command([sys.executable, "-m", "pip", "install", "TTS"], 
                      "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Coqui TTS"):
        return False
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    additional_packages = [
        "transformers",
        "datasets",
        "accelerate",
        "wandb",
        "tensorboard",
        "librosa",
        "soundfile"
    ]
    
    for package in additional_packages:
        if not run_command([sys.executable, "-m", "pip", "install", package], 
                          f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ {package}"):
            return False
    
    return True

def download_pretrained_model():
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å YourTTS"""
    print("üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ YourTTS...")
    
    try:
        from TTS.api import TTS
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TTS –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏
        tts = TTS("tts_models/multilingual/multi-dataset/your_tts")
        
        print("‚úÖ –ú–æ–¥–µ–ª—å YourTTS –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {e}")
        return False

def create_training_script():
    """–°–æ–∑–¥–∞—ë—Ç —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–±—É—á–µ–Ω–∏—è"""
    print("üìù –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –æ–±—É—á–µ–Ω–∏—è...")
    
    training_script = """#!/usr/bin/env python3
\"\"\"
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–±—É—á–µ–Ω–∏—è YourTTS
\"\"\"

import os
import sys
from pathlib import Path

def main():
    # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    activate_script = "yourtts_env/bin/activate"
    if os.path.exists(activate_script):
        print("‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ")
    else:
        print("‚ùå –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return 1
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö
    config_file = "training_data/training_config.json"
    if not os.path.exists(config_file):
        print(f"‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_file}")
        return 1
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è YourTTS...")
    print("‚è±Ô∏è  –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è: 4-8 —á–∞—Å–æ–≤")
    print("üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ tts_train_output/")
    
    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
    cmd = [
        sys.executable, "-m", "TTS.bin.train_tts",
        "--config_path", config_file,
        "--coqpit.datasets.0.path", "training_data/wav",
        "--coqpit.datasets.0.meta_file_train", "training_data/metadata/train_metadata.csv",
        "--coqpit.datasets.0.meta_file_val", "training_data/metadata/val_metadata.csv"
    ]
    
    print(f"–ö–æ–º–∞–Ω–¥–∞: {' '.join(cmd)}")
    
    try:
        import subprocess
        result = subprocess.run(cmd)
        return result.returncode
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ–±—É—á–µ–Ω–∏—è: {e}")
        return 1

if __name__ == "__main__":
    exit(main())
"""
    
    with open("scripts/start_training.py", "w", encoding="utf-8") as f:
        f.write(training_script)
    
    # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
    os.chmod("scripts/start_training.py", 0o755)
    
    print("‚úÖ –°–∫—Ä–∏–ø—Ç –æ–±—É—á–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω: scripts/start_training.py")
    return True

def create_test_script():
    """–°–æ–∑–¥–∞—ë—Ç —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏"""
    print("üìù –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    test_script = """#!/usr/bin/env python3
\"\"\"
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ YourTTS
\"\"\"

import os
import sys
from pathlib import Path

def main():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
    model_path = "tts_train_output/best_model.pth"
    if not os.path.exists(model_path):
        print(f"‚ùå –û–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {model_path}")
        return 1
    
    print("üé§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã
    test_phrases = [
        "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?",
        "–°–µ–≥–æ–¥–Ω—è –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞—è –ø–æ–≥–æ–¥–∞.",
        "–Ø –æ—á–µ–Ω—å —Ä–∞–¥–∞ –≤–∞—Å –≤–∏–¥–µ—Ç—å.",
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–Ω–∏–º–∞–Ω–∏–µ.",
        "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!"
    ]
    
    try:
        from TTS.api import TTS
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
        tts = TTS(model_path=model_path)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        output_dir = Path("test_results")
        output_dir.mkdir(exist_ok=True)
        
        for i, phrase in enumerate(test_phrases, 1):
            output_file = output_dir / f"test_{i:02d}.wav"
            
            print(f"–°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ–º {i}/{len(test_phrases)}: '{phrase}'")
            
            # –°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏
            tts.tts_to_file(
                text=phrase,
                file_path=str(output_file),
                speaker_wav="training_data/wav/audio_104@04-11-2021_22-32-49.wav",
                language="ru"
            )
            
            print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output_file}")
        
        print("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {output_dir}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    exit(main())
"""
    
    with open("scripts/test_trained_model.py", "w", encoding="utf-8") as f:
        f.write(test_script)
    
    # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
    os.chmod("scripts/test_trained_model.py", 0o755)
    
    print("‚úÖ –°–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω: scripts/test_trained_model.py")
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üé§ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ YourTTS –¥–ª—è –¥–æ–æ–±—É—á–µ–Ω–∏—è")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ GPU
    if not check_gpu():
        print("‚ö†Ô∏è  –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –±–µ–∑ GPU (–±—É–¥–µ—Ç –º–µ–¥–ª–µ–Ω–Ω–µ–µ)")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not setup_environment():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–∫—Ä—É–∂–µ–Ω–∏–µ")
        return 1
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if not install_dependencies():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
        return 1
    
    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
    if not download_pretrained_model():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –º–æ–¥–µ–ª—å")
        return 1
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤
    if not create_training_script():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–ø—Ç –æ–±—É—á–µ–Ω–∏—è")
        return 1
    
    if not create_test_script():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return 1
    
    print("\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ YourTTS –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –æ–∫—Ä—É–∂–µ–Ω–∏–µ:")
    print("   source yourtts_env/bin/activate")
    print("2. –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ:")
    print("   python scripts/start_training.py")
    print("3. –î–æ–∂–¥–∞—Ç—å—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (4-8 —á–∞—Å–æ–≤)")
    print("4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å:")
    print("   python scripts/test_trained_model.py")
    
    return 0

if __name__ == "__main__":
    exit(main()) 