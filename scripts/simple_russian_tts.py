#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —Ä—É—Å—Å–∫–æ–π —Ä–µ—á–∏ —Å ElevenLabs API.

–≠—Ç–æ —Ä–µ—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –±—ã—Å—Ç—Ä–æ –∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Å–ª–æ–∂–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏.
–ü—Ä–æ—Å—Ç–æ –ø–æ–ª—É—á–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π API –∫–ª—é—á –Ω–∞ https://elevenlabs.io

–ê–≤—Ç–æ—Ä: AI Assistant
–í–µ—Ä—Å–∏—è: 1.0.0
"""

import os
import requests
import json
from typing import Optional, Dict, Any

class SimpleRussianTTS:
    """–ü—Ä–æ—Å—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —Ä—É—Å—Å–∫–æ–π —Ä–µ—á–∏ —Å ElevenLabs."""
    
    def __init__(self, api_key: Optional[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è.
        
        Args:
            api_key: API –∫–ª—é—á ElevenLabs (–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞ elevenlabs.io)
        """
        self.api_key = api_key or os.getenv("ELEVENLABS_API_KEY")
        self.base_url = "https://api.elevenlabs.io/v1"
        
        if not self.api_key:
            print("‚ö†Ô∏è  API –∫–ª—é—á ElevenLabs –Ω–µ –Ω–∞–π–¥–µ–Ω")
            print("üí° –ü–æ–ª—É—á–∏—Ç–µ –ë–ï–°–ü–õ–ê–¢–ù–´–ô –∫–ª—é—á –Ω–∞ https://elevenlabs.io")
            print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: export ELEVENLABS_API_KEY='–≤–∞—à_–∫–ª—é—á'")
            print("üí° –ò–ª–∏ –ø–µ—Ä–µ–¥–∞–π—Ç–µ –∫–ª—é—á –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä: SimpleRussianTTS('–≤–∞—à_–∫–ª—é—á')")
        
        print("üé§ SimpleRussianTTS –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def get_available_voices(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤."""
        if not self.api_key:
            return {"error": "API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}
        
        try:
            response = requests.get(
                f"{self.base_url}/voices",
                headers={"xi-api-key": self.api_key}
            )
            
            if response.status_code == 200:
                voices = response.json()
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(voices.get('voices', []))} –≥–æ–ª–æ—Å–æ–≤")
                return voices
            else:
                return {"error": f"–û—à–∏–±–∫–∞ API: {response.status_code}"}
                
        except Exception as e:
            return {"error": str(e)}
    
    def clone_voice(self, voice_name: str, audio_file_path: str) -> Dict[str, Any]:
        """
        –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞ –∏–∑ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞.
        
        Args:
            voice_name: –ù–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –≥–æ–ª–æ—Å–∞
            audio_file_path: –ü—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É –¥–ª—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        if not self.api_key:
            return {"error": "API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}
        
        if not os.path.exists(audio_file_path):
            return {"error": f"–ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {audio_file_path}"}
        
        try:
            with open(audio_file_path, 'rb') as f:
                files = {'files': f}
                data = {
                    'name': voice_name,
                    'description': f'–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥–æ–ª–æ—Å –∏–∑ {audio_file_path}'
                }
                
                response = requests.post(
                    f"{self.base_url}/voices/add",
                    headers={"xi-api-key": self.api_key},
                    data=data,
                    files=files
                )
            
            if response.status_code == 200:
                result = response.json()
                print(f"‚úÖ –ì–æ–ª–æ—Å '{voice_name}' —É—Å–ø–µ—à–Ω–æ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω")
                return result
            else:
                return {"error": f"–û—à–∏–±–∫–∞ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {response.status_code} - {response.text}"}
                
        except Exception as e:
            return {"error": str(e)}
    
    def synthesize_russian(self, text: str, voice_id: str, output_path: str) -> Dict[str, Any]:
        """
        –°–∏–Ω—Ç–µ–∑ —Ä—É—Å—Å–∫–æ–π —Ä–µ—á–∏.
        
        Args:
            text: –†—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞
            voice_id: ID –≥–æ–ª–æ—Å–∞ (–∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ)
            output_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ
        """
        if not self.api_key:
            return {"error": "API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}
        
        try:
            url = f"{self.base_url}/text-to-speech/{voice_id}"
            
            payload = {
                "text": text,
                "model_id": "eleven_multilingual_v2",  # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä—É—Å—Å–∫–∏–π
                "voice_settings": {
                    "stability": 0.5,
                    "similarity_boost": 0.75
                }
            }
            
            response = requests.post(
                url,
                headers={
                    "xi-api-key": self.api_key,
                    "Content-Type": "application/json"
                },
                json=payload
            )
            
            if response.status_code == 200:
                with open(output_path, 'wb') as f:
                    f.write(response.content)
                
                print(f"‚úÖ –†—É—Å—Å–∫–∞—è —Ä–µ—á—å —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–∞: {output_path}")
                return {"success": True, "output_path": output_path}
            else:
                return {"error": f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞: {response.status_code} - {response.text}"}
                
        except Exception as e:
            return {"error": str(e)}
    
    def test_without_api_key(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–µ–∑ API –∫–ª—é—á–∞."""
        print("üß™ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ë–ï–ó API –ö–õ–Æ–ß–ê")
        print("=" * 40)
        
        test_texts = [
            "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?",
            "–°–µ–≥–æ–¥–Ω—è –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞—è –ø–æ–≥–æ–¥–∞.",
            "–Ø –æ—á–µ–Ω—å —Ä–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å!",
            "–≠—Ç–æ —Ç–µ—Å—Ç —Å–∏–Ω—Ç–µ–∑–∞ —Ä—É—Å—Å–∫–æ–π —Ä–µ—á–∏ —Å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≥–æ–ª–æ—Å–∞."
        ]
        
        print("üìù –ü—Ä–∏–º–µ—Ä—ã —Ä—É—Å—Å–∫–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞:")
        for i, text in enumerate(test_texts, 1):
            print(f"   {i}. {text}")
        
        print(f"\nüí° –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print("   1. –ü–æ–ª—É—á–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π API –∫–ª—é—á –Ω–∞ https://elevenlabs.io")
        print("   2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: export ELEVENLABS_API_KEY='–≤–∞—à_–∫–ª—é—á'")
        print("   3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python scripts/simple_russian_tts.py")
        
        return False
    
    def test_with_api_key(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å API –∫–ª—é—á–æ–º."""
        print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –° API –ö–õ–Æ–ß–û–ú")
        print("=" * 40)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞
        voices = self.get_available_voices()
        if "error" in voices:
            print(f"‚ùå {voices['error']}")
            return False
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –≥–æ–ª–æ—Å–∞
        print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞:")
        for i, voice in enumerate(voices.get('voices', [])[:3]):
            print(f"   {i+1}. {voice.get('name', 'Unknown')} (ID: {voice.get('voice_id', 'Unknown')})")
        
        # –ö–ª–æ–Ω–∏—Ä—É–µ–º –≥–æ–ª–æ—Å
        speaker_wav = "../data/audio/audio_1@02-12-2020_23-57-46.ogg"
        print(f"\nüé≠ –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞ –∏–∑ {speaker_wav}...")
        
        clone_result = self.clone_voice("–ì–æ–ª–æ—Å_–¥–µ–≤–æ—á–∫–∏", speaker_wav)
        
        if "error" in clone_result:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {clone_result['error']}")
            print("\nüí° –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≥–æ–ª–æ—Å –¥–ª—è —Ç–µ—Å—Ç–∞")
            
            if voices.get('voices'):
                test_voice_id = voices['voices'][0]['voice_id']
                print(f"üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ–ª–æ—Å: {voices['voices'][0]['name']}")
            else:
                print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤")
                return False
        else:
            test_voice_id = clone_result.get('voice_id')
            print(f"‚úÖ –ì–æ–ª–æ—Å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω —Å ID: {test_voice_id}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä—É—Å—Å–∫–∏–π —Å–∏–Ω—Ç–µ–∑
        test_texts = [
            "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?",
            "–°–µ–≥–æ–¥–Ω—è –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞—è –ø–æ–≥–æ–¥–∞.",
            "–Ø –æ—á–µ–Ω—å —Ä–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å!",
            "–≠—Ç–æ —Ç–µ—Å—Ç —Å–∏–Ω—Ç–µ–∑–∞ —Ä—É—Å—Å–∫–æ–π —Ä–µ—á–∏ —Å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≥–æ–ª–æ—Å–∞."
        ]
        
        success_count = 0
        
        for i, text in enumerate(test_texts):
            output_path = f"elevenlabs_russian_test_{i+1}.wav"
            print(f"\nüìù –¢–µ—Å—Ç {i+1}: {text}")
            
            result = self.synthesize_russian(text, test_voice_id, output_path)
            
            if "success" in result:
                print(f"‚úÖ –¢–µ—Å—Ç {i+1} —É—Å–ø–µ—à–µ–Ω")
                success_count += 1
            else:
                print(f"‚ùå –¢–µ—Å—Ç {i+1} –ø—Ä–æ–≤–∞–ª–µ–Ω: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {success_count}/{len(test_texts)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
        return success_count > 0

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üé§ –ü–†–û–°–¢–û–ï –†–ï–®–ï–ù–ò–ï –î–õ–Ø –†–£–°–°–ö–û–ô –†–ï–ß–ò")
    print("=" * 50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    tts = SimpleRussianTTS()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    if not tts.api_key:
        tts.test_without_api_key()
    else:
        success = tts.test_with_api_key()
        
        if success:
            print("\n‚úÖ ElevenLabs API —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!")
            print("üéØ –ì–æ—Ç–æ–≤–æ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ –ø—Ä–æ–µ–∫—Ç")
        else:
            print("\n‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å API")
    
    print(f"\n" + "=" * 50)
    print("üìã –†–ï–ó–Æ–ú–ï:")
    print("‚úÖ ElevenLabs –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫")
    print("‚úÖ –û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞")
    print("‚úÖ –ü—Ä–æ—Å—Ç–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è")
    print("‚úÖ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω (10,000 —Å–∏–º–≤–æ–ª–æ–≤/–º–µ—Å—è—Ü)")
    print("üí° –¢—Ä–µ–±—É–µ—Ç API –∫–ª—é—á (–ø–æ–ª—É—á–∏—Ç—å –Ω–∞ elevenlabs.io)")

if __name__ == "__main__":
    main() 