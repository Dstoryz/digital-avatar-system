#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–±—É—á–µ–Ω–∏—è YourTTS –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import os
import subprocess
import json
import logging
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def create_training_config():
    """–°–æ–∑–¥–∞—ë—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –æ–±—É—á–µ–Ω–∏—è YourTTS"""
    config = {
        "run_name": "voice_cloning_finetune",
        "run_description": "Fine-tuning YourTTS –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö",
        "model": "tts_models/multilingual/multi-dataset/your_tts",
        "datasets": [
            {
                "name": "voice_cloning",
                "path": "training_data/wav",
                "meta_file_train": "training_data/metadata/train_metadata.csv",
                "meta_file_val": "training_data/metadata/val_metadata.csv",
                "language": "en"  # YourTTS –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ en, fr-fr, pt-br
            }
        ],
        "training_params": {
            "batch_size": 8,
            "epochs": 1000,
            "learning_rate": 1e-4,
            "save_step": 1000,
            "eval_step": 500,
            "save_n_checkpoints": 5,
            "save_best_after": 10000,
            "target_loss": 0.5,
            "print_step": 25,
            "print_eval": True,
            "mixed_precision": True,
            "output_path": "tts_train_output"
        }
    }
    
    config_path = "training_data/yourtts_config.json"
    with open(config_path, 'w', encoding='utf-8') as f:
        json.dump(config, f, indent=2, ensure_ascii=False)
    
    logger.info(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {config_path}")
    return config_path

def start_training(config_path):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—É—á–µ–Ω–∏–µ YourTTS"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è YourTTS...")
    
    cmd = [
        "python", "-m", "TTS.bin.train_tts",
        "--config_path", config_path,
        "--coqpit.datasets.0.path", "training_data/wav",
        "--coqpit.datasets.0.meta_file_train", "training_data/metadata/train_metadata.csv",
        "--coqpit.datasets.0.meta_file_val", "training_data/metadata/val_metadata.csv",
        "--coqpit.training_params.batch_size", "8",
        "--coqpit.training_params.epochs", "1000",
        "--coqpit.training_params.learning_rate", "1e-4",
        "--coqpit.training_params.save_step", "1000",
        "--coqpit.training_params.eval_step", "500",
        "--coqpit.training_params.print_step", "25",
        "--coqpit.training_params.mixed_precision", "true",
        "--coqpit.output_path", "tts_train_output"
    ]
    
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞: {' '.join(cmd)}")
    
    try:
        result = subprocess.run(cmd, check=True, capture_output=False)
        logger.info("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        return True
    except subprocess.CalledProcessError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üé§ –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è YourTTS –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
    logger.info("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
    if not Path("training_data/wav").exists():
        logger.error("‚ùå –ü–∞–ø–∫–∞ training_data/wav –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return False
    
    if not Path("training_data/metadata/train_metadata.csv").exists():
        logger.error("‚ùå –§–∞–π–ª train_metadata.csv –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    # –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config_path = create_training_config()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ
    success = start_training(config_path)
    
    if success:
        logger.info("üéâ –û–±—É—á–µ–Ω–∏–µ YourTTS –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        logger.info("üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: tts_train_output/")
        logger.info("üé§ –ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    else:
        logger.error("‚ùå –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π!")
    
    return success

if __name__ == "__main__":
    main() 