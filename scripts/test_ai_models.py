#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö AI –º–æ–¥–µ–ª–µ–π
"""

import os
import sys
import json
import subprocess
from pathlib import Path
from datetime import datetime

def test_pytorch_cuda():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç PyTorch —Å CUDA –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"""
    try:
        import torch
        print(f"‚úÖ PyTorch –≤–µ—Ä—Å–∏—è: {torch.__version__}")
        
        if torch.cuda.is_available():
            print(f"‚úÖ CUDA –¥–æ—Å—Ç—É–ø–µ–Ω: {torch.cuda.get_device_name(0)}")
            print(f"‚úÖ CUDA –≤–µ—Ä—Å–∏—è: {torch.version.cuda}")
            print(f"‚úÖ GPU –ø–∞–º—è—Ç—å: {torch.cuda.get_device_properties(0).total_memory / 1024**3:.1f} GB")
            return True
        else:
            print("‚ùå CUDA –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
    except ImportError:
        print("‚ùå PyTorch –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False

def test_whisper():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Whisper"""
    try:
        import whisper
        print(f"‚úÖ Whisper —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {whisper.__version__}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥–µ–ª–∏
        model = whisper.load_model("tiny")
        print("‚úÖ Whisper –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return True
    except ImportError:
        print("‚ùå Whisper –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Whisper: {e}")
        return False

def test_transformers():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Transformers"""
    try:
        import transformers
        print(f"‚úÖ Transformers —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {transformers.__version__}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä–∞
        from transformers import AutoTokenizer
        tokenizer = AutoTokenizer.from_pretrained("gpt2")
        print("‚úÖ Transformers —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω")
        return True
    except ImportError:
        print("‚ùå Transformers –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Transformers: {e}")
        return False

def test_librosa():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Librosa"""
    try:
        import librosa
        print(f"‚úÖ Librosa —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {librosa.__version__}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        import numpy as np
        y = np.random.random(22050)  # 1 —Å–µ–∫—É–Ω–¥–∞ –∞—É–¥–∏–æ
        sr = librosa.get_samplerate("test.wav") if os.path.exists("test.wav") else 22050
        print("‚úÖ Librosa —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç")
        return True
    except ImportError:
        print("‚ùå Librosa –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Librosa: {e}")
        return False

def test_soundfile():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç SoundFile"""
    try:
        import soundfile as sf
        print(f"‚úÖ SoundFile —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {sf.__version__}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å/—á—Ç–µ–Ω–∏–µ
        import numpy as np
        data = np.random.random(22050)
        sf.write("test.wav", data, 22050)
        data_read, sr = sf.read("test.wav")
        print("‚úÖ SoundFile —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        if os.path.exists("test.wav"):
            os.remove("test.wav")
        return True
    except ImportError:
        print("‚ùå SoundFile –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ SoundFile: {e}")
        return False

def test_espeak():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç eSpeak"""
    try:
        result = subprocess.run(["espeak-ng", "--version"], 
                              capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ eSpeak —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {result.stdout.strip()}")
            return True
        else:
            print("‚ùå eSpeak –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return False
    except FileNotFoundError:
        print("‚ùå eSpeak –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False

def test_ffmpeg():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç FFmpeg"""
    try:
        result = subprocess.run(["ffmpeg", "-version"], 
                              capture_output=True, text=True)
        if result.returncode == 0:
            version_line = result.stdout.split('\n')[0]
            print(f"‚úÖ FFmpeg —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {version_line}")
            return True
        else:
            print("‚ùå FFmpeg –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return False
    except FileNotFoundError:
        print("‚ùå FFmpeg –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False

def test_redis():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Redis"""
    try:
        import redis
        r = redis.Redis(host='localhost', port=6379, db=0)
        r.ping()
        print("‚úÖ Redis —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return True
    except ImportError:
        print("‚ùå Redis Python –∫–ª–∏–µ–Ω—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Redis: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI –º–æ–¥–µ–ª–µ–π –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
    print("=" * 50)
    
    results = {}
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    print("\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PyTorch –∏ CUDA")
    print("-" * 30)
    results['pytorch_cuda'] = test_pytorch_cuda()
    
    print("\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Whisper")
    print("-" * 30)
    results['whisper'] = test_whisper()
    
    print("\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Transformers")
    print("-" * 30)
    results['transformers'] = test_transformers()
    
    print("\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Librosa")
    print("-" * 30)
    results['librosa'] = test_librosa()
    
    print("\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SoundFile")
    print("-" * 30)
    results['soundfile'] = test_soundfile()
    
    print("\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ eSpeak")
    print("-" * 30)
    results['espeak'] = test_espeak()
    
    print("\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ FFmpeg")
    print("-" * 30)
    results['ffmpeg'] = test_ffmpeg()
    
    print("\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Redis")
    print("-" * 30)
    results['redis'] = test_redis()
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    total_tests = len(results)
    passed_tests = sum(results.values())
    
    print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("=" * 50)
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}/{total_tests}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total_tests - passed_tests}/{total_tests}")
    print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {passed_tests/total_tests*100:.1f}%")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    report = {
        'timestamp': datetime.now().isoformat(),
        'results': results,
        'summary': {
            'total_tests': total_tests,
            'passed_tests': passed_tests,
            'failed_tests': total_tests - passed_tests,
            'success_rate': passed_tests/total_tests*100
        }
    }
    
    with open('ai_models_test_report.json', 'w', encoding='utf-8') as f:
        json.dump(report, f, indent=2, ensure_ascii=False)
    
    print(f"\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ ai_models_test_report.json")
    
    if passed_tests == total_tests:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! AI –º–æ–¥–µ–ª–∏ –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ.")
        return 0
    else:
        print("\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É.")
        return 1

if __name__ == "__main__":
    sys.exit(main()) 