#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏ —Å –∂–µ–Ω—Å–∫–∏–º–∏ –≥–æ–ª–æ—Å–∞–º–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
"""

import os
import sys
import requests
import json
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

def test_hier_speech_female_voices():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HierSpeech_TTS —Å –∂–µ–Ω—Å–∫–∏–º–∏ –≥–æ–ª–æ—Å–∞–º–∏"""
    
    print("üé§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏ —Å –∂–µ–Ω—Å–∫–∏–º–∏ –≥–æ–ª–æ—Å–∞–º–∏")
    print("=" * 60)
    
    # URL –¥–ª—è HierSpeech_TTS API
    hier_url = "http://127.0.0.1:8001"
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–µ–∫—Å—Ç—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
    test_texts = [
        "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?",
        "–°–µ–≥–æ–¥–Ω—è –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞—è –ø–æ–≥–æ–¥–∞.",
        "–Ø –æ—á–µ–Ω—å —Ä–∞–¥–∞ –≤–∞—Å –≤–∏–¥–µ—Ç—å.",
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–Ω–∏–º–∞–Ω–∏–µ.",
        "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!"
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
    try:
        response = requests.get(f"{hier_url}/health", timeout=5)
        if response.status_code == 200:
            health_data = response.json()
            print(f"‚úÖ HierSpeech_TTS —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
            print(f"   –î–æ—Å—Ç—É–ø–Ω–æ –∂–µ–Ω—Å–∫–∏—Ö –≥–æ–ª–æ—Å–æ–≤: {health_data.get('available_female_voices', 0)}")
            print(f"   –í—Å–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤: {health_data.get('total_female_voices', 0)}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É: {response.status_code}")
            return False
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É: {e}")
        return False
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤
    try:
        response = requests.get(f"{hier_url}/voices", timeout=5)
        if response.status_code == 200:
            voices_data = response.json()
            print(f"üìã –ù–∞–π–¥–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤: {voices_data['available_voices']}")
            
            if voices_data['available_voices'] == 0:
                print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∂–µ–Ω—Å–∫–∏—Ö –≥–æ–ª–æ—Å–æ–≤!")
                return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≥–æ–ª–æ—Å–æ–≤: {response.status_code}")
            return False
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤: {e}")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏
    print("\nüéµ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏:")
    print("-" * 40)
    
    results = []
    
    for i, text in enumerate(test_texts, 1):
        print(f"\n{i}. –¢–µ–∫—Å—Ç: '{text}'")
        
        try:
            # –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–∏–Ω—Ç–µ–∑
            payload = {
                "text": text,
                "language": "ru"
            }
            
            response = requests.post(
                f"{hier_url}/synthesize",
                json=payload,
                timeout=30
            )
            
            if response.status_code == 200:
                result = response.json()
                audio_path = result['audio_path']
                duration = result['duration']
                sample_rate = result['sample_rate']
                
                print(f"   ‚úÖ –°–∏–Ω—Ç–µ–∑ —É—Å–ø–µ—à–µ–Ω")
                print(f"   üìÅ –§–∞–π–ª: {audio_path}")
                print(f"   ‚è±Ô∏è  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration:.2f} —Å–µ–∫")
                print(f"   üîä –ß–∞—Å—Ç–æ—Ç–∞: {sample_rate} Hz")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
                # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É (–¥–æ–±–∞–≤–ª—è–µ–º HierSpeech_TTS/ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
                actual_path = audio_path
                if not os.path.exists(actual_path) and not actual_path.startswith('HierSpeech_TTS/'):
                    actual_path = f"HierSpeech_TTS/{audio_path}"
                
                if os.path.exists(actual_path):
                    file_size = os.path.getsize(actual_path)
                    print(f"   üìä –†–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç")
                    
                    results.append({
                        "text": text,
                        "success": True,
                        "audio_path": actual_path,
                        "duration": duration,
                        "file_size": file_size
                    })
                else:
                    print(f"   ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {audio_path}")
                    print(f"   üîç –ü—Ä–æ–≤–µ—Ä—è–ª –ø—É—Ç–∏: {audio_path}, {actual_path}")
                    results.append({
                        "text": text,
                        "success": False,
                        "error": "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
                    })
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞: {response.status_code}")
                print(f"   üìù –û—Ç–≤–µ—Ç: {response.text}")
                results.append({
                    "text": text,
                    "success": False,
                    "error": f"HTTP {response.status_code}"
                })
                
        except requests.exceptions.RequestException as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            results.append({
                "text": text,
                "success": False,
                "error": str(e)
            })
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        time.sleep(1)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print("-" * 40)
    
    successful = sum(1 for r in results if r['success'])
    total = len(results)
    
    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {successful}/{total}")
    print(f"‚ùå –û—à–∏–±–æ–∫: {total - successful}/{total}")
    print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {successful/total*100:.1f}%")
    
    if successful > 0:
        avg_duration = sum(r['duration'] for r in results if r['success']) / successful
        avg_size = sum(r['file_size'] for r in results if r['success']) / successful
        print(f"‚è±Ô∏è  –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {avg_duration:.2f} —Å–µ–∫")
        print(f"üìä –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä: {avg_size:.0f} –±–∞–π—Ç")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    output_file = "test_results_female_voices.json"
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump({
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
            "test_type": "female_voice_synthesis",
            "results": results,
            "statistics": {
                "successful": successful,
                "total": total,
                "success_rate": successful/total*100 if total > 0 else 0
            }
        }, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_file}")
    
    return successful > 0

def test_backend_integration():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º backend"""
    
    print("\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å backend:")
    print("-" * 40)
    
    backend_url = "http://127.0.0.1:8000"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å backend
    try:
        response = requests.get(f"{backend_url}/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Backend –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            print(f"‚ùå Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            return False
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ backend: {e}")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä—É—Å—Å–∫–∏–π TTS —á–µ—Ä–µ–∑ backend
    test_text = "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç –∂–µ–Ω—Å–∫–æ–≥–æ –≥–æ–ª–æ—Å–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
    
    try:
        payload = {
            "text": test_text,
            "language": "ru",
            "voice_type": "female"
        }
        
        response = requests.post(
            f"{backend_url}/api/tts/synthesize",
            json=payload,
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –°–∏–Ω—Ç–µ–∑ —á–µ—Ä–µ–∑ backend —É—Å–ø–µ—à–µ–Ω")
            print(f"   üìÅ –§–∞–π–ª: {result.get('audio_path', 'N/A')}")
            print(f"   ‚è±Ô∏è  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {result.get('duration', 'N/A')}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —á–µ—Ä–µ–∑ backend: {response.status_code}")
            print(f"   üìù –û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ backend: {e}")
        return False
    
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üé§ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ñ–ï–ù–°–ö–ò–• –ì–û–õ–û–°–û–í –ù–ê –†–£–°–°–ö–û–ú –Ø–ó–´–ö–ï")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º HierSpeech_TTS
    hier_success = test_hier_speech_female_voices()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å backend
    backend_success = test_backend_integration()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\nüéØ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print("-" * 40)
    
    if hier_success:
        print("‚úÖ HierSpeech_TTS —Å –∂–µ–Ω—Å–∫–∏–º–∏ –≥–æ–ª–æ—Å–∞–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    else:
        print("‚ùå HierSpeech_TTS —Å –∂–µ–Ω—Å–∫–∏–º–∏ –≥–æ–ª–æ—Å–∞–º–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    if backend_success:
        print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å backend —Ä–∞–±–æ—Ç–∞–µ—Ç")
    else:
        print("‚ùå –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å backend –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    if hier_success and backend_success:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Å –∂–µ–Ω—Å–∫–∏–º–∏ –≥–æ–ª–æ—Å–∞–º–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ")
    else:
        print("\n‚ö†Ô∏è  –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´, –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê")
    
    return hier_success and backend_success

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 