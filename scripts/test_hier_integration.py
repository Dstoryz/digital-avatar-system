#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å HierSpeech_TTS API
"""

import asyncio
import aiohttp
import json
import logging
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_hier_tts_api():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HierSpeech_TTS API"""
    
    api_url = "http://127.0.0.1:8001"
    
    async with aiohttp.ClientSession() as session:
        
        # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API
        logger.info("–¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API")
        try:
            async with session.get(f"{api_url}/health") as response:
                if response.status == 200:
                    health_data = await response.json()
                    logger.info(f"‚úÖ API –∑–¥–æ—Ä–æ–≤: {health_data}")
                else:
                    logger.error(f"‚ùå API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç: {response.status}")
                    return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
            return False
        
        # –¢–µ—Å—Ç 2: –°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏
        logger.info("–¢–µ—Å—Ç 2: –°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏")
        try:
            payload = {
                "text": "–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å HierSpeech_TTS –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞",
                "language": "ru"
            }
            
            async with session.post(
                f"{api_url}/synthesize",
                json=payload,
                headers={"Content-Type": "application/json"}
            ) as response:
                
                if response.status == 200:
                    result = await response.json()
                    logger.info(f"‚úÖ –°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ —É—Å–ø–µ—à–µ–Ω: {result}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω
                    audio_path = result.get("audio_path")
                    if audio_path and Path(audio_path).exists():
                        logger.info(f"‚úÖ –ê—É–¥–∏–æ—Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {audio_path}")
                    else:
                        logger.warning(f"‚ö†Ô∏è –ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {audio_path}")
                else:
                    error_text = await response.text()
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏: {response.status} - {error_text}")
                    return False
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏: {e}")
            return False
        
        # –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
        logger.info("–¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞")
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ temp_output
            temp_output_dir = Path("HierSpeech_TTS/temp_output")
            if temp_output_dir.exists():
                audio_files = list(temp_output_dir.glob("*.wav"))
                if audio_files:
                    filename = audio_files[0].name
                    
                    async with session.get(f"{api_url}/audio/{filename}") as response:
                        if response.status == 200:
                            logger.info(f"‚úÖ –ê—É–¥–∏–æ—Ñ–∞–π–ª –ø–æ–ª—É—á–µ–Ω: {filename}")
                        else:
                            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª: {response.status}")
                else:
                    logger.warning("‚ö†Ô∏è –ù–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            else:
                logger.warning("‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è temp_output –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        
        logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
        return True

async def test_main_backend_integration():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º backend"""
    
    backend_url = "http://127.0.0.1:8000"
    
    async with aiohttp.ClientSession() as session:
        
        # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ backend
        logger.info("–¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ backend")
        try:
            async with session.get(f"{backend_url}/health") as response:
                if response.status == 200:
                    health_data = await response.json()
                    logger.info(f"‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π backend –∑–¥–æ—Ä–æ–≤: {health_data}")
                else:
                    logger.warning(f"‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω–æ–π backend –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç: {response.status}")
                    return False
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É backend: {e}")
            return False
        
        # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ HierSpeech_TTS —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π backend
        logger.info("–¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ HierSpeech_TTS —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π backend")
        try:
            async with session.get(f"{backend_url}/hier-tts/health") as response:
                if response.status == 200:
                    hier_health = await response.json()
                    logger.info(f"‚úÖ HierSpeech_TTS —á–µ—Ä–µ–∑ backend: {hier_health}")
                else:
                    logger.warning(f"‚ö†Ô∏è HierSpeech_TTS —á–µ—Ä–µ–∑ backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ HierSpeech_TTS —á–µ—Ä–µ–∑ backend: {e}")
        
        logger.info("üéâ –¢–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
        return True

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ HierSpeech_TTS")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º API —Å–µ—Ä–≤–µ—Ä HierSpeech_TTS
    logger.info("\n" + "="*50)
    logger.info("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï HIERSPEECH_TTS API")
    logger.info("="*50)
    
    hier_success = await test_hier_tts_api()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –æ—Å–Ω–æ–≤–Ω—ã–º backend
    logger.info("\n" + "="*50)
    logger.info("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –° –û–°–ù–û–í–ù–´–ú BACKEND")
    logger.info("="*50)
    
    backend_success = await test_main_backend_integration()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç
    logger.info("\n" + "="*50)
    logger.info("–ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢")
    logger.info("="*50)
    
    if hier_success:
        logger.info("‚úÖ HierSpeech_TTS API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        logger.error("‚ùå HierSpeech_TTS API –∏–º–µ–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã")
    
    if backend_success:
        logger.info("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ—Å–Ω–æ–≤–Ω—ã–º backend —Ä–∞–±–æ—Ç–∞–µ—Ç")
    else:
        logger.warning("‚ö†Ô∏è –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ—Å–Ω–æ–≤–Ω—ã–º backend —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è")
    
    logger.info("\nüéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    if hier_success and backend_success:
        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    elif hier_success:
        logger.info("üîß –ù—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π backend")
    else:
        logger.info("üîß –ù—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å HierSpeech_TTS API")

if __name__ == "__main__":
    asyncio.run(main()) 