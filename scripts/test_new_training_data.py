#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –æ–±—É—á–µ–Ω–∏—è
"""

import os
import sys
import requests
import json
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

def test_new_training_data():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –æ–±—É—á–µ–Ω–∏—è"""
    
    print("üé§ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –° –ù–û–í–´–ú–ò –î–ê–ù–ù–´–ú–ò –û–ë–£–ß–ï–ù–ò–Ø")
    print("=" * 60)
    
    # URL –¥–ª—è HierSpeech_TTS API
    hier_url = "http://127.0.0.1:8001"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
    try:
        response = requests.get(f"{hier_url}/health", timeout=5)
        if response.status_code == 200:
            health_data = response.json()
            print(f"‚úÖ HierSpeech_TTS —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
            print(f"   –î–æ—Å—Ç—É–ø–Ω–æ –∂–µ–Ω—Å–∫–∏—Ö –≥–æ–ª–æ—Å–æ–≤: {health_data.get('available_female_voices', 0)}")
            print(f"   –í—Å–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤: {health_data.get('total_female_voices', 0)}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É: {response.status_code}")
            return False
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É: {e}")
        return False
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤
    try:
        response = requests.get(f"{hier_url}/voices", timeout=5)
        if response.status_code == 200:
            voices_data = response.json()
            print(f"üìã –ù–∞–π–¥–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤: {voices_data['available_voices']}")
            
            if voices_data['available_voices'] == 0:
                print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∂–µ–Ω—Å–∫–∏—Ö –≥–æ–ª–æ—Å–æ–≤!")
                return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≥–æ–ª–æ—Å–æ–≤: {response.status_code}")
            return False
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤: {e}")
        return False
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–µ–∫—Å—Ç—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
    test_texts = [
        "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?",
        "–°–µ–≥–æ–¥–Ω—è –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞—è –ø–æ–≥–æ–¥–∞.",
        "–Ø –æ—á–µ–Ω—å —Ä–∞–¥–∞ –≤–∞—Å –≤–∏–¥–µ—Ç—å.",
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–Ω–∏–º–∞–Ω–∏–µ.",
        "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!"
    ]
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –≥–æ–ª–æ—Å–∞–º–∏
    print("\nüéµ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏ —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:")
    print("-" * 50)
    
    results = []
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 5 –≥–æ–ª–æ—Å–æ–≤ –∏–∑ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    test_voices = voices_data['voices'][:5]
    
    for voice_idx, voice in enumerate(test_voices, 1):
        print(f"\nüé§ –¢–µ—Å—Ç –≥–æ–ª–æ—Å–∞ {voice_idx}: {voice['name']}")
        print(f"   üìä –†–∞–∑–º–µ—Ä: {voice['size']} –±–∞–π—Ç")
        
        voice_results = []
        
        for text_idx, text in enumerate(test_texts, 1):
            print(f"   {text_idx}. –¢–µ–∫—Å—Ç: '{text}'")
            
            try:
                # –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–∏–Ω—Ç–µ–∑ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –≥–æ–ª–æ—Å–æ–º
                payload = {
                    "text": text,
                    "language": "ru",
                    "reference_audio_path": voice['path'].replace('../', '')
                }
                
                response = requests.post(
                    f"{hier_url}/synthesize",
                    json=payload,
                    timeout=30
                )
                
                if response.status_code == 200:
                    result = response.json()
                    audio_path = result['audio_path']
                    duration = result['duration']
                    sample_rate = result['sample_rate']
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
                    actual_path = audio_path
                    if not os.path.exists(actual_path) and not actual_path.startswith('HierSpeech_TTS/'):
                        actual_path = f"HierSpeech_TTS/{audio_path}"
                    
                    if os.path.exists(actual_path):
                        file_size = os.path.getsize(actual_path)
                        print(f"      ‚úÖ –°–∏–Ω—Ç–µ–∑ —É—Å–ø–µ—à–µ–Ω")
                        print(f"      üìÅ –§–∞–π–ª: {os.path.basename(audio_path)}")
                        print(f"      ‚è±Ô∏è  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration:.2f} —Å–µ–∫")
                        print(f"      üìä –†–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç")
                        
                        voice_results.append({
                            "text": text,
                            "success": True,
                            "audio_path": actual_path,
                            "duration": duration,
                            "file_size": file_size
                        })
                    else:
                        print(f"      ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {audio_path}")
                        voice_results.append({
                            "text": text,
                            "success": False,
                            "error": "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
                        })
                else:
                    print(f"      ‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞: {response.status_code}")
                    voice_results.append({
                        "text": text,
                        "success": False,
                        "error": f"HTTP {response.status_code}"
                    })
                    
            except requests.exceptions.RequestException as e:
                print(f"      ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
                voice_results.append({
                    "text": text,
                    "success": False,
                    "error": str(e)
                })
            
            time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ –≥–æ–ª–æ—Å–∞
        successful = sum(1 for r in voice_results if r['success'])
        total = len(voice_results)
        
        print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–∞ {voice_idx}: {successful}/{total} —É—Å–ø–µ—à–Ω—ã—Ö")
        
        results.append({
            "voice": voice['name'],
            "voice_size": voice['size'],
            "results": voice_results,
            "successful": successful,
            "total": total
        })
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print("-" * 50)
    
    total_tests = sum(r['total'] for r in results)
    total_successful = sum(r['successful'] for r in results)
    
    print(f"üé§ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –≥–æ–ª–æ—Å–æ–≤: {len(results)}")
    print(f"üìù –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {total_successful}")
    print(f"‚ùå –û—à–∏–±–æ–∫: {total_tests - total_successful}")
    print(f"üìà –û–±—â–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å: {total_successful/total_tests*100:.1f}%")
    
    # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥–æ–ª–æ—Å–∞–º
    print("\nüé§ –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ì–û–õ–û–°–ê–ú:")
    print("-" * 50)
    
    for i, result in enumerate(results, 1):
        success_rate = result['successful'] / result['total'] * 100
        print(f"{i}. {result['voice']}: {result['successful']}/{result['total']} ({success_rate:.1f}%)")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    output_file = "test_results_new_training_data.json"
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump({
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
            "test_type": "new_training_data",
            "total_voices_tested": len(results),
            "total_tests": total_tests,
            "total_successful": total_successful,
            "overall_success_rate": total_successful/total_tests*100 if total_tests > 0 else 0,
            "results": results
        }, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_file}")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\nüéØ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print("-" * 50)
    
    if total_successful == total_tests:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("–ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—É—á–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –æ—Ç–ª–∏—á–Ω–æ!")
    elif total_successful > total_tests * 0.8:
        print("‚úÖ –ë–û–õ–¨–®–ò–ù–°–¢–í–û –¢–ï–°–¢–û–í –ü–†–û–ô–î–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print("–ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—É—á–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç —Ö–æ—Ä–æ—à–æ!")
    elif total_successful > total_tests * 0.5:
        print("‚ö†Ô∏è  –ß–ê–°–¢–ò–ß–ù–û –£–°–ü–ï–®–ù–û!")
        print("–ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ –≥–æ–ª–æ—Å–∞–º–∏.")
    else:
        print("‚ùå –ú–ù–û–ì–û –ü–†–û–ë–õ–ï–ú!")
        print("–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã.")
    
    return total_successful > total_tests * 0.5

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    success = test_new_training_data()
    
    if success:
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        print("\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—è–≤–∏–ª–æ –ø—Ä–æ–±–ª–µ–º—ã!")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 