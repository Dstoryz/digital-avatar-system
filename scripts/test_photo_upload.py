#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python scripts/test_photo_upload.py [–ø—É—Ç—å_–∫_—Ñ–æ—Ç–æ]

–ü—Ä–∏–º–µ—Ä:
    python scripts/test_photo_upload.py test_photos/avatar.jpg
"""

import sys
import os
import requests
import json
from pathlib import Path
from typing import List, Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API
API_BASE_URL = "http://localhost:8000/api/v1"
UPLOAD_ENDPOINT = f"{API_BASE_URL}/upload/photos"
STATUS_ENDPOINT = f"{API_BASE_URL}/upload/status"

def check_server_status() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞."""
    try:
        response = requests.get(f"{API_BASE_URL.replace('/api/v1', '')}/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
            return True
        else:
            print(f"‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            return False
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É: {e}")
        return False

def get_upload_status() -> Optional[dict]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã –∑–∞–≥—Ä—É–∑–∫–∏."""
    try:
        response = requests.get(STATUS_ENDPOINT, timeout=10)
        if response.status_code == 200:
            return response.json()
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {response.status_code}")
            return None
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return None

def validate_image_file(file_path: Path) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    if not file_path.exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        return False
    
    if not file_path.is_file():
        print(f"‚ùå –ù–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª–æ–º: {file_path}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ (–º–∞–∫—Å–∏–º—É–º 10MB)
    file_size = file_path.stat().st_size
    max_size = 10 * 1024 * 1024  # 10MB
    
    if file_size > max_size:
        print(f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {file_size / 1024 / 1024:.1f}MB (–º–∞–∫—Å–∏–º—É–º 10MB)")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    allowed_extensions = {'.jpg', '.jpeg', '.png', '.webp'}
    if file_path.suffix.lower() not in allowed_extensions:
        print(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: {file_path.suffix}")
        print(f"   –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: {', '.join(allowed_extensions)}")
        return False
    
    print(f"‚úÖ –§–∞–π–ª –≤–∞–ª–∏–¥–µ–Ω: {file_path.name} ({file_size / 1024:.1f}KB)")
    return True

def upload_photos(file_paths: List[Path]) -> Optional[dict]:
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —á–µ—Ä–µ–∑ API."""
    if not file_paths:
        print("‚ùå –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
        return None
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
    files = []
    for file_path in file_paths:
        if validate_image_file(file_path):
            files.append(('files', (file_path.name, open(file_path, 'rb'), 'image/jpeg')))
        else:
            return None
    
    try:
        print(f"üì§ –ó–∞–≥—Ä—É–∑–∫–∞ {len(files)} —Ñ–∞–π–ª–æ–≤...")
        response = requests.post(
            UPLOAD_ENDPOINT,
            files=files,
            data={'description': '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ'},
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–∞!")
            print(f"   Session ID: {result.get('session_id')}")
            print(f"   –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {result.get('total_files')}")
            return result
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response.text}")
            return None
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
        for _, file_tuple in files:
            file_tuple[1].close()

def get_uploaded_photos(session_id: str) -> Optional[dict]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö."""
    try:
        response = requests.get(f"{UPLOAD_ENDPOINT}/{session_id}", timeout=10)
        if response.status_code == 200:
            return response.json()
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {response.status_code}")
            return None
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    if not check_server_status():
        print("\nüí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω:")
        print("   cd backend && uvicorn app.main:app --reload")
        return
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
    status = get_upload_status()
    if status:
        print(f"üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:")
        print(f"   –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {status.get('photos_count', 0)}")
        print(f"   –ê–≤–∞—Ç–∞—Ä–æ–≤: {status.get('avatars_count', 0)}")
        print(f"   –°–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ: {status.get('disk_space', {}).get('free_gb', 0)}GB")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if len(sys.argv) < 2:
        print("\nüìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print(f"   {sys.argv[0]} [–ø—É—Ç—å_–∫_—Ñ–æ—Ç–æ1] [–ø—É—Ç—å_–∫_—Ñ–æ—Ç–æ2] ...")
        print("\nüí° –ü—Ä–∏–º–µ—Ä—ã:")
        print(f"   {sys.argv[0]} test_photos/avatar.jpg")
        print(f"   {sys.argv[0]} photo1.jpg photo2.png photo3.webp")
        return
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º
    file_paths = []
    for arg in sys.argv[1:]:
        file_path = Path(arg)
        if file_path.exists():
            file_paths.append(file_path)
        else:
            print(f"‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {arg}")
    
    if not file_paths:
        print("‚ùå –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
        return
    
    print(f"\nüìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(file_paths)}")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
    result = upload_photos(file_paths)
    if result:
        session_id = result.get('session_id')
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö
        print(f"\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö:")
        files_info = get_uploaded_photos(session_id)
        if files_info:
            for i, file_info in enumerate(files_info.get('files', []), 1):
                print(f"   {i}. {file_info.get('original_name', 'Unknown')}")
                print(f"      –†–∞–∑–º–µ—Ä: {file_info.get('size', 0) / 1024:.1f}KB")
                print(f"      –†–∞–∑–º–µ—Ä—ã: {file_info.get('dimensions', 'Unknown')}")
        
        print(f"\nüéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"   Session ID: {session_id}")
        print(f"   API endpoint: {UPLOAD_ENDPOINT}")
    else:
        print("\n‚ùå –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏")

if __name__ == "__main__":
    main() 