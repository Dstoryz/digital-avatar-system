#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∂–µ–Ω—Å–∫–æ–≥–æ –≥–æ–ª–æ—Å–∞
"""

import os
import sys
import requests
import json
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

def test_specific_female_voice(voice_path: str, test_text: str = "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç –∂–µ–Ω—Å–∫–æ–≥–æ –≥–æ–ª–æ—Å–∞."):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∂–µ–Ω—Å–∫–æ–≥–æ –≥–æ–ª–æ—Å–∞"""
    
    print(f"üé§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∂–µ–Ω—Å–∫–æ–≥–æ –≥–æ–ª–æ—Å–∞: {os.path.basename(voice_path)}")
    print("=" * 60)
    
    # URL –¥–ª—è HierSpeech_TTS API
    hier_url = "http://127.0.0.1:8001"
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≥–æ–ª–æ—Å–∞
    actual_voice_path = voice_path
    if voice_path.startswith('../'):
        actual_voice_path = voice_path[3:]  # –£–±–∏—Ä–∞–µ–º ../
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –≥–æ–ª–æ—Å–∞
    if not os.path.exists(actual_voice_path):
        print(f"‚ùå –§–∞–π–ª –≥–æ–ª–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {actual_voice_path}")
        return False
    
    print(f"‚úÖ –§–∞–π–ª –≥–æ–ª–æ—Å–∞ –Ω–∞–π–¥–µ–Ω: {actual_voice_path}")
    print(f"üìä –†–∞–∑–º–µ—Ä: {os.path.getsize(actual_voice_path)} –±–∞–π—Ç")
    
    try:
        # –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–∏–Ω—Ç–µ–∑ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –≥–æ–ª–æ—Å–æ–º
        payload = {
            "text": test_text,
            "language": "ru",
            "reference_audio_path": actual_voice_path
        }
        
        print(f"üìù –¢–µ–∫—Å—Ç: '{test_text}'")
        print("üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...")
        
        response = requests.post(
            f"{hier_url}/synthesize",
            json=payload,
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            audio_path = result['audio_path']
            duration = result['duration']
            sample_rate = result['sample_rate']
            
            print(f"‚úÖ –°–∏–Ω—Ç–µ–∑ —É—Å–ø–µ—à–µ–Ω")
            print(f"üìÅ –§–∞–π–ª: {audio_path}")
            print(f"‚è±Ô∏è  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration:.2f} —Å–µ–∫")
            print(f"üîä –ß–∞—Å—Ç–æ—Ç–∞: {sample_rate} Hz")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            actual_path = audio_path
            if not os.path.exists(actual_path) and not actual_path.startswith('HierSpeech_TTS/'):
                actual_path = f"HierSpeech_TTS/{audio_path}"
            
            if os.path.exists(actual_path):
                file_size = os.path.getsize(actual_path)
                print(f"üìä –†–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç")
                
                # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫
                print("üîä –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞...")
                os.system(f"aplay {actual_path}")
                
                return True
            else:
                print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {audio_path}")
                return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞: {response.status_code}")
            print(f"üìù –û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return False

def list_available_voices():
    """–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∂–µ–Ω—Å–∫–∏—Ö –≥–æ–ª–æ—Å–æ–≤"""
    
    print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∂–µ–Ω—Å–∫–∏–µ –≥–æ–ª–æ—Å–∞:")
    print("-" * 40)
    
    hier_url = "http://127.0.0.1:8001"
    
    try:
        response = requests.get(f"{hier_url}/voices", timeout=5)
        if response.status_code == 200:
            voices_data = response.json()
            
            for i, voice in enumerate(voices_data['voices'][:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                print(f"{i:2d}. {voice['name']} ({voice['size']} –±–∞–π—Ç)")
            
            if len(voices_data['voices']) > 10:
                print(f"... –∏ –µ—â—ë {len(voices_data['voices']) - 10} –≥–æ–ª–æ—Å–æ–≤")
            
            return voices_data['voices']
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤: {response.status_code}")
            return []
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return []

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üé§ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–ù–ö–†–ï–¢–ù–û–ì–û –ñ–ï–ù–°–ö–û–ì–û –ì–û–õ–û–°–ê")
    print("=" * 60)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞
    voices = list_available_voices()
    
    if not voices:
        print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤")
        return False
    
    # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –≥–æ–ª–æ—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_voice = voices[0]['path']
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
    test_texts = [
        "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?",
        "–°–µ–≥–æ–¥–Ω—è –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞—è –ø–æ–≥–æ–¥–∞.",
        "–Ø –æ—á–µ–Ω—å —Ä–∞–¥–∞ –≤–∞—Å –≤–∏–¥–µ—Ç—å.",
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–Ω–∏–º–∞–Ω–∏–µ.",
        "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!"
    ]
    
    print(f"\nüéµ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞: {os.path.basename(test_voice)}")
    print("-" * 40)
    
    success_count = 0
    
    for i, text in enumerate(test_texts, 1):
        print(f"\n{i}. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞: '{text}'")
        if test_specific_female_voice(test_voice, text):
            success_count += 1
        else:
            print("‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à—ë–ª")
        
        time.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {success_count}/{len(test_texts)} —É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤")
    
    if success_count == len(test_texts):
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("–ñ–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print("‚ö†Ô∏è  –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ –° –ì–û–õ–û–°–û–ú")
    
    return success_count == len(test_texts)

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 