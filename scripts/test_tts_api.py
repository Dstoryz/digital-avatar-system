#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ TTS API endpoints.

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É ElevenLabs TTS –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ backend.

–ê–≤—Ç–æ—Ä: AI Assistant
–í–µ—Ä—Å–∏—è: 1.0.0
"""

import requests
import json
import os
from typing import Dict, Any

class TTSAPITester:
    """–¢–µ—Å—Ç–µ—Ä –¥–ª—è TTS API."""
    
    def __init__(self, base_url: str = "http://127.0.0.1:8000"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–µ—Ä–∞.
        
        Args:
            base_url: –ë–∞–∑–æ–≤—ã–π URL API
        """
        self.base_url = base_url
        self.api_prefix = "/api/v1/tts"
        print(f"üé§ TTS API –¢–µ—Å—Ç–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        print(f"üåê –ë–∞–∑–æ–≤—ã–π URL: {base_url}")
    
    def test_health(self) -> bool:
        """–¢–µ—Å—Ç health check."""
        print("\nüè• –¢–µ—Å—Ç health check...")
        
        try:
            response = requests.get(f"{self.base_url}/health")
            
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ Health check —É—Å–ø–µ—à–µ–Ω: {data}")
                return True
            else:
                print(f"‚ùå Health check –ø—Ä–æ–≤–∞–ª–µ–Ω: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ health check: {e}")
            return False
    
    def test_tts_status(self) -> bool:
        """–¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ TTS —Å–µ—Ä–≤–∏—Å–∞."""
        print("\nüìä –¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ TTS...")
        
        try:
            response = requests.get(f"{self.base_url}{self.api_prefix}/status")
            
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ TTS —Å—Ç–∞—Ç—É—Å: {data}")
                return data.get("available", False)
            else:
                print(f"‚ùå TTS —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–∞–ª–µ–Ω: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ TTS —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return False
    
    def test_voices_endpoint(self) -> bool:
        """–¢–µ—Å—Ç endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤."""
        print("\nüé≠ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤...")
        
        try:
            response = requests.get(f"{self.base_url}{self.api_prefix}/voices")
            
            if response.status_code == 200:
                data = response.json()
                voices_count = len(data.get("voices", []))
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤: {voices_count}")
                return True
            elif response.status_code == 503:
                print("‚ö†Ô∏è  ElevenLabs API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: export ELEVENLABS_API_KEY='–≤–∞—à_–∫–ª—é—á'")
                return False
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤: {e}")
            return False
    
    def test_russian_synthesis(self) -> bool:
        """–¢–µ—Å—Ç —Å–∏–Ω—Ç–µ–∑–∞ —Ä—É—Å—Å–∫–æ–π —Ä–µ—á–∏."""
        print("\nüá∑üá∫ –¢–µ—Å—Ç —Å–∏–Ω—Ç–µ–∑–∞ —Ä—É—Å—Å–∫–æ–π —Ä–µ—á–∏...")
        
        try:
            response = requests.post(f"{self.base_url}{self.api_prefix}/test-russian")
            
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ –¢–µ—Å—Ç —Ä—É—Å—Å–∫–æ–π —Ä–µ—á–∏ —É—Å–ø–µ—à–µ–Ω: {data}")
                return True
            elif response.status_code == 503:
                print("‚ö†Ô∏è  ElevenLabs API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                return False
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —Ä—É—Å—Å–∫–æ–π —Ä–µ—á–∏: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —Ä—É—Å—Å–∫–æ–π —Ä–µ—á–∏: {e}")
            return False
    
    def test_synthesis_with_params(self, text: str, voice_id: str) -> bool:
        """–¢–µ—Å—Ç —Å–∏–Ω—Ç–µ–∑–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏."""
        print(f"\nüé§ –¢–µ—Å—Ç —Å–∏–Ω—Ç–µ–∑–∞: '{text[:30]}...'")
        
        try:
            data = {
                "text": text,
                "voice_id": voice_id,
                "output_filename": "test_synthesis.wav"
            }
            
            response = requests.post(
                f"{self.base_url}{self.api_prefix}/synthesize",
                data=data
            )
            
            if response.status_code == 200:
                result = response.json()
                print(f"‚úÖ –°–∏–Ω—Ç–µ–∑ —É—Å–ø–µ—à–µ–Ω: {result}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞: {e}")
            return False
    
    def run_all_tests(self) -> Dict[str, bool]:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤."""
        print("üß™ –ó–ê–ü–£–°–ö –í–°–ï–• –¢–ï–°–¢–û–í TTS API")
        print("=" * 50)
        
        results = {}
        
        # –¢–µ—Å—Ç 1: Health check
        results["health"] = self.test_health()
        
        # –¢–µ—Å—Ç 2: TTS —Å—Ç–∞—Ç—É—Å
        results["tts_status"] = self.test_tts_status()
        
        # –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤
        results["voices"] = self.test_voices_endpoint()
        
        # –¢–µ—Å—Ç 4: –¢–µ—Å—Ç —Ä—É—Å—Å–∫–æ–π —Ä–µ—á–∏
        results["russian_test"] = self.test_russian_synthesis()
        
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í:")
        print("=" * 30)
        
        for test_name, success in results.items():
            status = "‚úÖ –£–°–ü–ï–®–ï–ù" if success else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
            print(f"   {test_name}: {status}")
        
        success_count = sum(results.values())
        total_count = len(results)
        
        print(f"\nüìà –ò–¢–û–ì–û: {success_count}/{total_count} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
        
        if success_count == total_count:
            print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        elif success_count > 0:
            print("‚ö†Ô∏è  –ß–∞—Å—Ç—å —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å")
        else:
            print("‚ùå –í–°–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ò–õ–ò–°–¨")
        
        return results

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üé§ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï TTS API")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ backend
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ backend...")
    
    try:
        response = requests.get("http://127.0.0.1:8000/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Backend –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            print("‚ùå Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ backend: python -m uvicorn backend.app.main:app --reload")
            return
    except Exception as e:
        print("‚ùå Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ backend: python -m uvicorn backend.app.main:app --reload")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    tester = TTSAPITester()
    results = tester.run_all_tests()
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    
    if not results.get("voices", False):
        print("   1. –ü–æ–ª—É—á–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π API –∫–ª—é—á –Ω–∞ https://elevenlabs.io")
        print("   2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: export ELEVENLABS_API_KEY='–≤–∞—à_–∫–ª—é—á'")
        print("   3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ backend")
    
    if results.get("health", False) and results.get("tts_status", False):
        print("   ‚úÖ Backend –∏ TTS API —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("   üéØ –ì–æ—Ç–æ–≤–æ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ frontend")

if __name__ == "__main__":
    main() 