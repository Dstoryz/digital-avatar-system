#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ API endpoints
"""

import os
import sys
import json
import asyncio
import logging
from pathlib import Path
from typing import List, Dict, Any
import requests
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class CorrectAPITester:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ API endpoints"""
    
    def __init__(self):
        self.base_dir = Path(__file__).parent.parent
        self.test_data_dir = self.base_dir / "test_data"
        self.audio_dir = self.test_data_dir / "audio"
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ endpoints
        self.config = {
            "backend_url": "http://127.0.0.1:8000",
            "hier_speech_url": "http://127.0.0.1:8001",
            "test_phrases": [
                "–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞",
                "–°–µ–≥–æ–¥–Ω—è –º—ã —Ç–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏",
                "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç —Å–æ–∑–¥–∞–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—É—é —Ä–µ—á—å"
            ]
        }
    
    def get_available_voices(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤"""
        logger.info("üé§ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤...")
        
        try:
            response = requests.get(f"{self.config['backend_url']}/api/v1/tts/voices")
            if response.status_code == 200:
                voices = response.json()
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(voices)} –≥–æ–ª–æ—Å–æ–≤")
                return voices
            else:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤: {response.status_code}")
                return []
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤: {e}")
            return []
    
    async def test_voice_cloning(self, audio_file_path: str) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º endpoint"""
        logger.info(f"üé§ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞...")
        
        try:
            audio_file = Path(audio_file_path)
            with open(audio_file, 'rb') as f:
                files = {'audio': (audio_file.name, f, 'audio/ogg')}
                
                response = requests.post(
                    f"{self.config['backend_url']}/api/v1/tts/clone-voice",
                    files=files,
                    timeout=60
                )
                
                if response.status_code == 200:
                    result = response.json()
                    logger.info("‚úÖ –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞ —É—Å–ø–µ—à–Ω–æ")
                    return {
                        "success": True,
                        "voice_id": result.get('voice_id'),
                        "message": result.get('message', 'OK'),
                        "processing_time": result.get('processing_time', 0)
                    }
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {response.status_code}")
                    return {"success": False, "error": f"HTTP {response.status_code}"}
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            return {"success": False, "error": str(e)}
    
    async def test_tts_synthesis(self, text: str, voice_id: str = "default") -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º endpoint"""
        logger.info(f"üîä –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏: '{text[:30]}...'")
        
        try:
            response = requests.post(
                f"{self.config['backend_url']}/api/v1/tts/synthesize",
                json={
                    "text": text,
                    "voice_id": voice_id,
                    "language": "ru"
                },
                timeout=30
            )
            
            if response.status_code == 200:
                result = response.json()
                logger.info("‚úÖ –°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ —É—Å–ø–µ—à–µ–Ω")
                return {
                    "success": True,
                    "audio_path": result.get('audio_path'),
                    "processing_time": result.get('processing_time', 0),
                    "voice_id": voice_id
                }
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞: {response.status_code}")
                return {"success": False, "error": f"HTTP {response.status_code}"}
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ç–µ–∑–µ: {e}")
            return {"success": False, "error": str(e)}
    
    async def test_hier_speech_direct(self, text: str) -> Dict[str, Any]:
        """–ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HierSpeech TTS"""
        logger.info(f"üîä –ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HierSpeech: '{text[:30]}...'")
        
        try:
            response = requests.post(
                f"{self.config['hier_speech_url']}/synthesize",
                json={
                    "text": text,
                    "voice_id": "default",
                    "language": "ru"
                },
                timeout=30
            )
            
            if response.status_code == 200:
                result = response.json()
                logger.info("‚úÖ HierSpeech TTS —Å–∏–Ω—Ç–µ–∑ —É—Å–ø–µ—à–µ–Ω")
                return {
                    "success": True,
                    "audio_path": result.get('audio_path'),
                    "processing_time": result.get('processing_time', 0)
                }
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ HierSpeech: {response.status_code}")
                return {"success": False, "error": f"HTTP {response.status_code}"}
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ HierSpeech —Å–∏–Ω—Ç–µ–∑–µ: {e}")
            return {"success": False, "error": str(e)}
    
    async def test_russian_tts(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—É—Å—Å–∫–æ–≥–æ TTS"""
        logger.info("üá∑üá∫ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä—É—Å—Å–∫–∏–π TTS...")
        
        try:
            response = requests.get(f"{self.config['backend_url']}/api/v1/tts/test-russian")
            if response.status_code == 200:
                result = response.json()
                logger.info("‚úÖ –†—É—Å—Å–∫–∏–π TTS —Ç–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω")
                return {
                    "success": True,
                    "result": result
                }
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä—É—Å—Å–∫–æ–≥–æ TTS: {response.status_code}")
                return {"success": False, "error": f"HTTP {response.status_code}"}
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–µ —Ä—É—Å—Å–∫–æ–≥–æ TTS: {e}")
            return {"success": False, "error": str(e)}
    
    async def run_comprehensive_test(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ API...")
        
        results = {
            "timestamp": datetime.now().isoformat(),
            "available_voices": [],
            "voice_cloning": {},
            "backend_tts": [],
            "hier_speech_tts": [],
            "russian_tts_test": {},
            "overall_score": 0
        }
        
        # 1. –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞
        results["available_voices"] = self.get_available_voices()
        
        # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞
        audio_files = list(self.audio_dir.glob("*.ogg"))
        if audio_files:
            test_file = audio_files[0]  # –ü–µ—Ä–≤—ã–π —Ñ–∞–π–ª
            results["voice_cloning"] = await self.test_voice_cloning(str(test_file))
        
        # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º TTS —á–µ—Ä–µ–∑ backend
        voice_id = results["voice_cloning"].get("voice_id", "default")
        for phrase in self.config["test_phrases"]:
            tts_result = await self.test_tts_synthesis(phrase, voice_id)
            tts_result["phrase"] = phrase
            results["backend_tts"].append(tts_result)
        
        # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º HierSpeech –Ω–∞–ø—Ä—è–º—É—é
        for phrase in self.config["test_phrases"][:2]:  # –ü–µ—Ä–≤—ã–µ 2 —Ñ—Ä–∞–∑—ã
            hier_result = await self.test_hier_speech_direct(phrase)
            hier_result["phrase"] = phrase
            results["hier_speech_tts"].append(hier_result)
        
        # 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä—É—Å—Å–∫–∏–π TTS
        results["russian_tts_test"] = await self.test_russian_tts()
        
        # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π –±–∞–ª–ª
        scores = []
        
        # –ë–∞–ª–ª –∑–∞ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞
        if results["available_voices"]:
            scores.append(1.0)
        else:
            scores.append(0.0)
        
        # –ë–∞–ª–ª –∑–∞ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        if results["voice_cloning"].get("success"):
            scores.append(1.0)
        else:
            scores.append(0.0)
        
        # –ë–∞–ª–ª –∑–∞ backend TTS
        backend_success = sum(1 for r in results["backend_tts"] if r.get("success"))
        backend_score = backend_success / len(results["backend_tts"]) if results["backend_tts"] else 0
        scores.append(backend_score)
        
        # –ë–∞–ª–ª –∑–∞ HierSpeech TTS
        hier_success = sum(1 for r in results["hier_speech_tts"] if r.get("success"))
        hier_score = hier_success / len(results["hier_speech_tts"]) if results["hier_speech_tts"] else 0
        scores.append(hier_score)
        
        # –ë–∞–ª–ª –∑–∞ —Ä—É—Å—Å–∫–∏–π TTS
        if results["russian_tts_test"].get("success"):
            scores.append(1.0)
        else:
            scores.append(0.0)
        
        results["overall_score"] = sum(scores) / len(scores)
        
        logger.info(f"üìä –û–±—â–∏–π –±–∞–ª–ª: {results['overall_score']:.2f}/1.0")
        
        return results
    
    def save_results(self, results: Dict[str, Any]):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        results_file = self.base_dir / f"correct_api_test_results_{timestamp}.json"
        
        with open(results_file, 'w', encoding='utf-8') as f:
            json.dump(results, f, ensure_ascii=False, indent=2)
        
        logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {results_file}")
        
        # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç
        print("\n" + "="*50)
        print("–û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò –° –ü–†–ê–í–ò–õ–¨–ù–´–ú–ò API")
        print("="*50)
        print(f"–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"–î–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤: {len(results['available_voices'])}")
        print(f"–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞: {'‚úÖ' if results['voice_cloning'].get('success') else '‚ùå'}")
        print(f"Backend TTS: {sum(1 for r in results['backend_tts'] if r.get('success'))}/{len(results['backend_tts'])}")
        print(f"HierSpeech TTS: {sum(1 for r in results['hier_speech_tts'] if r.get('success'))}/{len(results['hier_speech_tts'])}")
        print(f"–†—É—Å—Å–∫–∏–π TTS: {'‚úÖ' if results['russian_tts_test'].get('success') else '‚ùå'}")
        print(f"–û–±—â–∏–π –±–∞–ª–ª: {results['overall_score']:.2f}/1.0")
        
        if results['overall_score'] >= 0.8:
            print("üéâ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!")
        elif results['overall_score'] >= 0.6:
            print("üëç –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ")
        else:
            print("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü§ñ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –° –ü–†–ê–í–ò–õ–¨–ù–´–ú–ò API ENDPOINTS")
    print("=" * 50)
    
    tester = CorrectAPITester()
    results = await tester.run_comprehensive_test()
    tester.save_results(results)

if __name__ == "__main__":
    asyncio.run(main()) 