#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞
–Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã—Ö
"""

import os
import sys
import json
import asyncio
import logging
from pathlib import Path
from typing import List, Dict, Any
import subprocess
import time
import requests
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('training_log.txt'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class DigitalAvatarTrainer:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞"""
    
    def __init__(self):
        self.base_dir = Path(__file__).parent.parent
        self.test_data_dir = self.base_dir / "test_data"
        self.audio_dir = self.test_data_dir / "audio"
        self.results_dir = self.base_dir / "training_results"
        self.results_dir.mkdir(exist_ok=True)
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.config = {
            "backend_url": "http://127.0.0.1:8000",
            "hier_speech_url": "http://127.0.0.1:8001",
            "test_phrases": [
                "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?",
                "–°–µ–≥–æ–¥–Ω—è –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞—è –ø–æ–≥–æ–¥–∞",
                "–Ø –∏–∑—É—á–∞—é –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç",
                "–¶–∏—Ñ—Ä–æ–≤–æ–π –∞–≤–∞—Ç–∞—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ",
                "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –±—É–¥—É—â–µ–≥–æ —É–∂–µ –∑–¥–µ—Å—å"
            ],
            "training_samples": 10,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
            "test_samples": 5        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        }
        
    def analyze_audio_data(self) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
        logger.info("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã–µ...")
        
        audio_files = list(self.audio_dir.glob("*.ogg"))
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(audio_files)} –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤")
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ñ–∞–π–ª–æ–≤
        file_sizes = []
        for file in audio_files:
            size_mb = file.stat().st_size / (1024 * 1024)
            file_sizes.append(size_mb)
        
        analysis = {
            "total_files": len(audio_files),
            "total_size_mb": sum(file_sizes),
            "avg_size_mb": sum(file_sizes) / len(file_sizes) if file_sizes else 0,
            "min_size_mb": min(file_sizes) if file_sizes else 0,
            "max_size_mb": max(file_sizes) if file_sizes else 0,
            "file_list": [f.name for f in audio_files[:20]]  # –ü–µ—Ä–≤—ã–µ 20 —Ñ–∞–π–ª–æ–≤
        }
        
        logger.info(f"üìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö: {analysis}")
        return analysis
    
    def select_training_files(self, analysis: Dict[str, Any]) -> List[Path]:
        """–í—ã–±–æ—Ä —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
        logger.info("üìÅ –í—ã–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è...")
        
        audio_files = list(self.audio_dir.glob("*.ogg"))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É (–≤—ã–±–∏—Ä–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ –ø–æ —Ä–∞–∑–º–µ—Ä—É —Ñ–∞–π–ª—ã)
        audio_files.sort(key=lambda x: x.stat().st_size)
        
        # –í—ã–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è (—Å—Ä–µ–¥–Ω–∏–µ –ø–æ —Ä–∞–∑–º–µ—Ä—É)
        start_idx = len(audio_files) // 4
        training_files = audio_files[start_idx:start_idx + self.config["training_samples"]]
        
        logger.info(f"–í—ã–±—Ä–∞–Ω–æ {len(training_files)} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è:")
        for file in training_files:
            size_mb = file.stat().st_size / (1024 * 1024)
            logger.info(f"  - {file.name} ({size_mb:.2f} MB)")
        
        return training_files
    
    def prepare_training_data(self, training_files: List[Path]) -> Dict[str, Any]:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
        logger.info("‚öôÔ∏è –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è...")
        
        training_data = {
            "files": [],
            "total_duration": 0,
            "formats": set(),
            "sample_rates": []
        }
        
        for file in training_files:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
                size_mb = file.stat().st_size / (1024 * 1024)
                
                # –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)
                # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ 1 MB ‚âà 1 –º–∏–Ω—É—Ç–∞ –∞—É–¥–∏–æ
                estimated_duration = size_mb * 60
                
                file_info = {
                    "name": file.name,
                    "path": str(file),
                    "size_mb": size_mb,
                    "estimated_duration_sec": estimated_duration,
                    "format": file.suffix[1:]  # —É–±–∏—Ä–∞–µ–º —Ç–æ—á–∫—É
                }
                
                training_data["files"].append(file_info)
                training_data["total_duration"] += estimated_duration
                training_data["formats"].add(file.suffix[1:])
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {file}: {e}")
        
        training_data["formats"] = list(training_data["formats"])
        
        logger.info(f"üìã –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(training_data['files'])} —Ñ–∞–π–ª–æ–≤")
        logger.info(f"‚è±Ô∏è –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {training_data['total_duration']/60:.1f} –º–∏–Ω—É—Ç")
        
        return training_data
    
    async def test_hier_speech_connection(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ HierSpeech TTS"""
        logger.info("üîó –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ HierSpeech TTS...")
        
        try:
            response = requests.get(f"{self.config['hier_speech_url']}/health", timeout=5)
            if response.status_code == 200:
                logger.info("‚úÖ HierSpeech TTS –¥–æ—Å—Ç—É–ø–µ–Ω")
                return True
            else:
                logger.warning(f"‚ö†Ô∏è HierSpeech TTS –æ—Ç–≤–µ—Ç–∏–ª —Å –∫–æ–¥–æ–º {response.status_code}")
                return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ HierSpeech TTS: {e}")
            return False
    
    async def test_backend_connection(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É backend"""
        logger.info("üîó –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ backend...")
        
        try:
            response = requests.get(f"{self.config['backend_url']}/health", timeout=5)
            if response.status_code == 200:
                logger.info("‚úÖ Backend –¥–æ—Å—Ç—É–ø–µ–Ω")
                return True
            else:
                logger.warning(f"‚ö†Ô∏è Backend –æ—Ç–≤–µ—Ç–∏–ª —Å –∫–æ–¥–æ–º {response.status_code}")
                return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ backend: {e}")
            return False
    
    async def test_voice_cloning(self, audio_file: Path) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞"""
        logger.info(f"üé§ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞ –¥–ª—è {audio_file.name}")
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
            with open(audio_file, 'rb') as f:
                files = {'audio': (audio_file.name, f, 'audio/ogg')}
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                response = requests.post(
                    f"{self.config['backend_url']}/api/voice/clone",
                    files=files,
                    timeout=30
                )
                
                if response.status_code == 200:
                    result = response.json()
                    logger.info(f"‚úÖ –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ: {result.get('message', 'OK')}")
                    return {
                        "success": True,
                        "voice_id": result.get('voice_id'),
                        "duration_ms": result.get('processing_time', 0)
                    }
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {response.status_code}")
                    return {"success": False, "error": f"HTTP {response.status_code}"}
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –≥–æ–ª–æ—Å–∞: {e}")
            return {"success": False, "error": str(e)}
    
    async def test_tts_synthesis(self, text: str, voice_id: str | None = None) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏"""
        logger.info(f"üîä –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏: '{text[:50]}...'")
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º HierSpeech TTS
            hier_response = requests.post(
                f"{self.config['hier_speech_url']}/synthesize",
                json={
                    "text": text,
                    "voice_id": voice_id or "default",
                    "language": "ru"
                },
                timeout=30
            )
            
            if hier_response.status_code == 200:
                hier_result = hier_response.json()
                logger.info(f"‚úÖ HierSpeech TTS —Å–∏–Ω—Ç–µ–∑ —É—Å–ø–µ—à–µ–Ω")
                return {
                    "success": True,
                    "hier_speech": {
                        "audio_path": hier_result.get('audio_path'),
                        "duration_ms": hier_result.get('processing_time', 0)
                    }
                }
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ HierSpeech TTS: {hier_response.status_code}")
                return {"success": False, "error": f"HierSpeech HTTP {hier_response.status_code}"}
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ç–µ–∑–µ —Ä–µ—á–∏: {e}")
            return {"success": False, "error": str(e)}
    
    async def run_comprehensive_test(self, training_data: Dict[str, Any]) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã...")
        
        test_results = {
            "timestamp": datetime.now().isoformat(),
            "connections": {},
            "voice_cloning": [],
            "tts_synthesis": [],
            "overall_score": 0
        }
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        test_results["connections"]["hier_speech"] = await self.test_hier_speech_connection()
        test_results["connections"]["backend"] = await self.test_backend_connection()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–π–ª–∞—Ö
        for i, file_info in enumerate(training_data["files"][:3]):  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ñ–∞–π–ª–∞
            audio_file = Path(file_info["path"])
            clone_result = await self.test_voice_cloning(audio_file)
            clone_result["file"] = file_info["name"]
            test_results["voice_cloning"].append(clone_result)
            
            # –ï—Å–ª–∏ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏–Ω—Ç–µ–∑
            if clone_result.get("success"):
                voice_id = clone_result.get("voice_id")
                if voice_id:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ voice_id –Ω–µ None
                    for phrase in self.config["test_phrases"][:2]:  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 2 —Ñ—Ä–∞–∑—ã
                        tts_result = await self.test_tts_synthesis(phrase, voice_id)
                    tts_result["phrase"] = phrase
                    tts_result["voice_id"] = voice_id
                    test_results["tts_synthesis"].append(tts_result)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π –±–∞–ª–ª
        connection_score = sum(test_results["connections"].values()) / len(test_results["connections"])
        cloning_score = sum(1 for r in test_results["voice_cloning"] if r.get("success")) / len(test_results["voice_cloning"]) if test_results["voice_cloning"] else 0
        tts_score = sum(1 for r in test_results["tts_synthesis"] if r.get("success")) / len(test_results["tts_synthesis"]) if test_results["tts_synthesis"] else 0
        
        test_results["overall_score"] = (connection_score + cloning_score + tts_score) / 3
        
        logger.info(f"üìä –û–±—â–∏–π –±–∞–ª–ª —Å–∏—Å—Ç–µ–º—ã: {test_results['overall_score']:.2f}/1.0")
        
        return test_results
    
    def save_results(self, analysis: Dict[str, Any], training_data: Dict[str, Any], test_results: Dict[str, Any]):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        logger.info("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...")
        
        results = {
            "analysis": analysis,
            "training_data": training_data,
            "test_results": test_results,
            "config": self.config
        }
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        results_file = self.results_dir / f"training_results_{timestamp}.json"
        
        with open(results_file, 'w', encoding='utf-8') as f:
            json.dump(results, f, ensure_ascii=False, indent=2)
        
        logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {results_file}")
        
        # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç
        report_file = self.results_dir / f"training_report_{timestamp}.txt"
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write("–û–¢–ß–ï–¢ –û–ë –û–ë–£–ß–ï–ù–ò–ò –ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò –°–ò–°–¢–ï–ú–´ –¶–ò–§–†–û–í–û–ì–û –ê–í–ê–¢–ê–†–ê\n")
            f.write("=" * 60 + "\n\n")
            
            f.write(f"–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
            
            f.write("–ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–•:\n")
            f.write(f"- –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {analysis['total_files']}\n")
            f.write(f"- –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {analysis['total_size_mb']:.1f} MB\n")
            f.write(f"- –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {analysis['avg_size_mb']:.2f} MB\n\n")
            
            f.write("–î–ê–ù–ù–´–ï –î–õ–Ø –û–ë–£–ß–ï–ù–ò–Ø:\n")
            f.write(f"- –§–∞–π–ª–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è: {len(training_data['files'])}\n")
            f.write(f"- –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {training_data['total_duration']/60:.1f} –º–∏–Ω—É—Ç\n")
            f.write(f"- –§–æ—Ä–º–∞—Ç—ã: {', '.join(training_data['formats'])}\n\n")
            
            f.write("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:\n")
            f.write(f"- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {sum(test_results['connections'].values())}/{len(test_results['connections'])}\n")
            f.write(f"- –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞: {sum(1 for r in test_results['voice_cloning'] if r.get('success'))}/{len(test_results['voice_cloning'])}\n")
            f.write(f"- –°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏: {sum(1 for r in test_results['tts_synthesis'] if r.get('success'))}/{len(test_results['tts_synthesis'])}\n")
            f.write(f"- –û–±—â–∏–π –±–∞–ª–ª: {test_results['overall_score']:.2f}/1.0\n\n")
            
            f.write("–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n")
            if test_results['overall_score'] >= 0.8:
                f.write("- –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ! –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ.\n")
            elif test_results['overall_score'] >= 0.6:
                f.write("- –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ, –Ω–æ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è.\n")
            else:
                f.write("- –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º.\n")
        
        logger.info(f"‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {report_file}")
    
    async def run_training_pipeline(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ –æ–±—É—á–µ–Ω–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logger.info("üéØ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞–π–ø–ª–∞–π–Ω –æ–±—É—á–µ–Ω–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
        
        try:
            # 1. –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
            analysis = self.analyze_audio_data()
            
            # 2. –í—ã–±–æ—Ä —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
            training_files = self.select_training_files(analysis)
            
            # 3. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            training_data = self.prepare_training_data(training_files)
            
            # 4. –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            test_results = await self.run_comprehensive_test(training_data)
            
            # 5. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            self.save_results(analysis, training_data, test_results)
            
            logger.info("üéâ –ü–∞–π–ø–ª–∞–π–Ω –æ–±—É—á–µ–Ω–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω!")
            
            return {
                "success": True,
                "overall_score": test_results["overall_score"],
                "summary": f"–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞ —Å –±–∞–ª–ª–æ–º {test_results['overall_score']:.2f}/1.0"
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–∞–π–ø–ª–∞–π–Ω–µ –æ–±—É—á–µ–Ω–∏—è: {e}")
            return {"success": False, "error": str(e)}

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü§ñ –°–ò–°–¢–ï–ú–ê –û–ë–£–ß–ï–ù–ò–Ø –ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –¶–ò–§–†–û–í–û–ì–û –ê–í–ê–¢–ê–†–ê")
    print("=" * 60)
    
    trainer = DigitalAvatarTrainer()
    result = await trainer.run_training_pipeline()
    
    if result["success"]:
        print(f"\n‚úÖ {result['summary']}")
        print("\nüìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ training_results/")
    else:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {result['error']}")

if __name__ == "__main__":
    asyncio.run(main()) 