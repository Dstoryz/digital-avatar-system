#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è TTS –º–æ–¥–µ–ª–∏ –Ω–∞ –∞—É–¥–∏–æ—Å—ç–º–ø–ª–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""

import os
import sys
import json
import subprocess
import shutil
from pathlib import Path
from datetime import datetime
import librosa
import soundfile as sf

def setup_tts_environment():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è TTS"""
    print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è TTS...")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    os.makedirs("models/tts_data", exist_ok=True)
    os.makedirs("models/tts_data/wavs", exist_ok=True)
    os.makedirs("models/tts_data/metadata", exist_ok=True)
    os.makedirs("models/tts_output", exist_ok=True)
    
    print("‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã")

def convert_ogg_to_wav():
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç OGG —Ñ–∞–π–ª—ã –≤ WAV"""
    print("üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è OGG –≤ WAV...")
    
    input_dir = Path("data/audio")
    output_dir = Path("models/tts_data/wavs")
    
    if not input_dir.exists():
        print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –∞—É–¥–∏–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    ogg_files = list(input_dir.glob("*.ogg"))
    if not ogg_files:
        print("‚ùå OGG —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return False
    
    converted_count = 0
    for ogg_file in ogg_files:
        wav_file = output_dir / f"{ogg_file.stem}.wav"
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ
            y, sr = librosa.load(ogg_file, sr=22050)
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å
            y = librosa.util.normalize(y)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ WAV
            sf.write(wav_file, y, sr)
            converted_count += 1
            
            print(f"‚úÖ {ogg_file.name} -> {wav_file.name}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ {ogg_file.name}: {e}")
    
    print(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {converted_count} —Ñ–∞–π–ª–æ–≤")
    return converted_count > 0

def create_metadata():
    """–°–æ–∑–¥–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
    print("üìù –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö...")
    
    wav_dir = Path("models/tts_data/wavs")
    metadata_file = Path("models/tts_data/metadata/metadata.csv")
    
    if not wav_dir.exists():
        print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å WAV —Ñ–∞–π–ª–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    wav_files = list(wav_dir.glob("*.wav"))
    if not wav_files:
        print("‚ùå WAV —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return False
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    metadata_lines = []
    for wav_file in wav_files:
        # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        y, sr = librosa.load(wav_file, sr=22050)
        duration = len(y) / sr
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
        text = "–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –∞—É–¥–∏–æ—Å—ç–º–ø–ª –¥–ª—è –æ–±—É—á–µ–Ω–∏—è TTS –º–æ–¥–µ–ª–∏."
        
        # –§–æ—Ä–º–∞—Ç: filename|text|normalized_text
        line = f"{wav_file.name}|{text}|{text}"
        metadata_lines.append(line)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    with open(metadata_file, 'w', encoding='utf-8') as f:
        f.write('\n'.join(metadata_lines))
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω—ã –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è {len(wav_files)} —Ñ–∞–π–ª–æ–≤")
    return True

def create_tts_config():
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è TTS"""
    print("‚öôÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ TTS...")
    
    config = {
        "model": "tts_models/multilingual/multi-dataset/your_tts",
        "run_name": "custom_voice_training",
        "run_description": "–û–±—É—á–µ–Ω–∏–µ TTS –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∞—É–¥–∏–æ—Å—ç–º–ø–ª–∞—Ö",
        
        "audio": {
            "sample_rate": 22050,
            "max_wav_value": 32768.0,
            "mel_channels": 80,
            "mel_fmin": 0.0,
            "mel_fmax": 8000.0,
            "hop_length": 256,
            "win_length": 1024,
            "fft_size": 1024,
            "preemphasis": 0.0,
            "ref_level_db": 20,
            "signal_norm": True,
            "symmetric_norm": True,
            "max_norm": 4.0,
            "clip_norm": True,
            "griffin_lim_iters": 60,
            "do_trim_silence": True,
            "trim_silence_threshold": 0.1,
            "trim_silence_ratio": 0.5,
        },
        
        "training": {
            "batch_size": 32,
            "eval_batch_size": 16,
            "num_loader_workers": 4,
            "num_eval_loader_workers": 4,
            "run_eval": True,
            "test_delay_epochs": -1,
            "epochs": 1000,
            "text_cleaner": "multilingual_cleaners",
            "use_phonemes": False,
            "phoneme_language": "ru",
            "phoneme_cache_path": "models/tts_data/phoneme_cache",
            "print_step": 25,
            "print_eval": True,
            "mixed_precision": True,
            "output_path": "models/tts_output",
            "datasets": [
                {
                    "name": "custom_voice",
                    "path": "models/tts_data/metadata/metadata.csv",
                    "meta_file_train": "",
                    "meta_file_val": ""
                }
            ]
        },
        
        "optimizer": {
            "type": "AdamW",
            "params": {
                "lr": 0.001,
                "weight_decay": 0.01,
                "betas": [0.9, 0.998]
            }
        },
        
        "scheduler": {
            "type": "NoamLR",
            "params": {
                "warmup_steps": 4000,
                "last_epoch": -1
            }
        }
    }
    
    config_file = Path("models/tts_data/config.json")
    with open(config_file, 'w', encoding='utf-8') as f:
        json.dump(config, f, indent=2, ensure_ascii=False)
    
    print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞")
    return True

def train_tts_model():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—É—á–µ–Ω–∏–µ TTS –º–æ–¥–µ–ª–∏"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è TTS –º–æ–¥–µ–ª–∏...")
    
    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    env = os.environ.copy()
    env['PATH'] = f"{os.getcwd()}/ai_env/bin:{env['PATH']}"
    
    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
    cmd = [
        "python", "-m", "TTS.bin.train_tts",
        "--config_path", "models/tts_data/config.json",
        "--coqpit.datasets.0.path", "models/tts_data/metadata/metadata.csv",
        "--coqpit.output_path", "models/tts_output",
        "--coqpit.audio.sample_rate", "22050",
        "--coqpit.training.batch_size", "16",  # –£–º–µ–Ω—å—à–∞–µ–º –¥–ª—è RTX 3060
        "--coqpit.training.epochs", "100",
        "--coqpit.training.mixed_precision", "True"
    ]
    
    try:
        print("‚è≥ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ...")
        print("üí° –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤")
        print("üí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        process = subprocess.Popen(
            cmd,
            env=env,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            universal_newlines=True
        )
        
        # –í—ã–≤–æ–¥–∏–º –ª–æ–≥–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        for line in process.stdout:
            print(line.rstrip())
        
        process.wait()
        
        if process.returncode == 0:
            print("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏")
            return False
            
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –û–±—É—á–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        process.terminate()
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {e}")
        return False

def test_trained_model():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏...")
    
    # –ò—â–µ–º –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
    model_dir = Path("models/tts_output")
    if not model_dir.exists():
        print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –º–æ–¥–µ–ª—å—é –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    # –ò—â–µ–º checkpoint
    checkpoints = list(model_dir.rglob("*.pth"))
    if not checkpoints:
        print("‚ùå Checkpoint –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    latest_checkpoint = max(checkpoints, key=lambda x: x.stat().st_mtime)
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω checkpoint: {latest_checkpoint}")
    
    # –¢–µ—Å—Ç–æ–≤—ã–π —Å–∏–Ω—Ç–µ–∑
    test_text = "–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ —Ç–µ—Å—Ç –æ–±—É—á–µ–Ω–Ω–æ–π TTS –º–æ–¥–µ–ª–∏."
    test_file = "models/tts_output/test_synthesis.wav"
    
    try:
        from TTS.api import TTS
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
        tts = TTS(model_path=str(latest_checkpoint))
        
        # –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ–º —Ä–µ—á—å
        tts.tts_to_file(
            text=test_text,
            file_path=test_file,
            speaker_wav="models/tts_data/wavs/audio_001.wav"  # –†–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã–π –≥–æ–ª–æ—Å
        )
        
        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Å–∏–Ω—Ç–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {test_file}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üé§ –û–±—É—á–µ–Ω–∏–µ TTS –º–æ–¥–µ–ª–∏ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∞—É–¥–∏–æ—Å—ç–º–ø–ª–∞—Ö")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤
    audio_dir = Path("data/audio")
    if not audio_dir.exists():
        print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è data/audio –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ data/audio/")
        return 1
    
    ogg_files = list(audio_dir.glob("*.ogg"))
    if not ogg_files:
        print("‚ùå OGG —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ data/audio/")
        return 1
    
    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(ogg_files)} –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not setup_tts_environment():
        return 1
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∞—É–¥–∏–æ
    if not convert_ogg_to_wav():
        return 1
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    if not create_metadata():
        return 1
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if not create_tts_config():
        return 1
    
    # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
    print("\nüéØ –ì–æ—Ç–æ–≤ –∫ –æ–±—É—á–µ–Ω–∏—é!")
    print("üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:")
    print("   - –ú–∏–Ω–∏–º—É–º 10-20 –∞—É–¥–∏–æ—Å—ç–º–ø–ª–æ–≤")
    print("   - –ö–∞—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–∏ 16kHz+")
    print("   - –†–∞–∑–Ω–∞—è –∏–Ω—Ç–æ–Ω–∞—Ü–∏—è –∏ —ç–º–æ—Ü–∏–∏")
    print("   - –ß–∏—Å—Ç–∞—è —Ä–µ—á—å –±–µ–∑ —à—É–º–æ–≤")
    
    response = input("\nü§î –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ? (y/n): ").lower().strip()
    if response != 'y':
        print("‚ùå –û–±—É—á–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        return 0
    
    # –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è
    if train_tts_model():
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
        test_trained_model()
        
        print("\nüéâ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print("üìÅ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ models/tts_output/")
        print("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")
        
        return 0
    else:
        print("\n‚ùå –û–±—É—á–µ–Ω–∏–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        return 1

if __name__ == "__main__":
    sys.exit(main()) 