#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è TODO-–ª–∏—Å—Ç–∞.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python scripts/update_todo.py --completed "–ù–∞–∑–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏"
    python scripts/update_todo.py --add "–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞" --priority high
    python scripts/update_todo.py --stats
"""

import argparse
import re
from datetime import datetime
from pathlib import Path
from typing import List, Tuple, Optional

TODO_FILE = Path("TODO.md")
TEMPLATE_FILE = Path("TEMPLATES/todo_update_template.md")

def read_todo_file() -> str:
    """–ß—Ç–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ TODO.md."""
    if not TODO_FILE.exists():
        raise FileNotFoundError(f"–§–∞–π–ª {TODO_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    with open(TODO_FILE, 'r', encoding='utf-8') as f:
        return f.read()

def write_todo_file(content: str):
    """–ó–∞–ø–∏—Å—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤ TODO.md."""
    with open(TODO_FILE, 'w', encoding='utf-8') as f:
        f.write(content)

def find_todo_sections(content: str) -> Tuple[str, str, str]:
    """–ü–æ–∏—Å–∫ —Å–µ–∫—Ü–∏–π TODO —Ñ–∞–π–ª–∞."""
    # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ —Å–µ–∫—Ü–∏–∏
    sections = content.split('## ')
    
    completed_section = ""
    in_progress_section = ""
    todo_section = ""
    
    for section in sections:
        if section.startswith('‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ') or section.startswith('‚úÖ'):
            completed_section = section
        elif section.startswith('üîÑ –í —Ä–∞–±–æ—Ç–µ') or section.startswith('üîÑ'):
            in_progress_section = section
        elif section.startswith('üìã –ü—Ä–µ–¥—Å—Ç–æ–∏—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å') or section.startswith('üìã'):
            todo_section = section
    
    return completed_section, in_progress_section, todo_section

def mark_task_completed(content: str, task_name: str) -> str:
    """–û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é."""
    # –ò—â–µ–º –∑–∞–¥–∞—á—É –≤ —Å–µ–∫—Ü–∏–∏ "–ü—Ä–µ–¥—Å—Ç–æ–∏—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å"
    pattern = rf'(\s*)- \[ \] {re.escape(task_name)}'
    replacement = rf'\1- [x] {task_name} ({datetime.now().strftime("%Y-%m-%d")})'
    
    if re.search(pattern, content):
        content = re.sub(pattern, replacement, content)
        
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∑–∞–¥–∞—á—É –≤ —Å–µ–∫—Ü–∏—é "–í—ã–ø–æ–ª–Ω–µ–Ω–æ"
        # –ù–∞—Ö–æ–¥–∏–º —Å–µ–∫—Ü–∏—é "–í—ã–ø–æ–ª–Ω–µ–Ω–æ"
        completed_pattern = r'(## ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ.*?)(## üîÑ –í —Ä–∞–±–æ—Ç–µ)'
        match = re.search(completed_pattern, content, re.DOTALL)
        
        if match:
            completed_section = match.group(1)
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –∫–æ–Ω–µ—Ü —Å–µ–∫—Ü–∏–∏ "–í—ã–ø–æ–ª–Ω–µ–Ω–æ"
            new_completed_section = completed_section.rstrip() + f'\n- [x] {task_name} ({datetime.now().strftime("%Y-%m-%d")})\n\n'
            content = re.sub(completed_pattern, new_completed_section + r'\2', content, flags=re.DOTALL)
        
        print(f"‚úÖ –ó–∞–¥–∞—á–∞ '{task_name}' –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è")
    else:
        print(f"‚ö†Ô∏è  –ó–∞–¥–∞—á–∞ '{task_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ")
    
    return content

def add_new_task(content: str, task_name: str, priority: str = "medium", category: str = "–û–±—â–µ–µ") -> str:
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É."""
    priority_emoji = {
        "high": "üî•",
        "medium": "üî∂", 
        "low": "üîµ"
    }.get(priority, "üî∂")
    
    new_task = f"- [ ] {priority_emoji} {task_name}"
    
    # –ù–∞—Ö–æ–¥–∏–º —Å–µ–∫—Ü–∏—é "–ü—Ä–µ–¥—Å—Ç–æ–∏—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å"
    todo_pattern = r'(## üìã –ü—Ä–µ–¥—Å—Ç–æ–∏—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å.*?)(## üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã)'
    match = re.search(todo_pattern, content, re.DOTALL)
    
    if match:
        todo_section = match.group(1)
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –∫–æ–Ω–µ—Ü —Å–µ–∫—Ü–∏–∏
        new_todo_section = todo_section.rstrip() + f'\n{new_task}\n\n'
        content = re.sub(todo_pattern, new_todo_section + r'\2', content, flags=re.DOTALL)
        
        print(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: {priority_emoji} {task_name}")
    else:
        print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–µ–∫—Ü–∏—é '–ü—Ä–µ–¥—Å—Ç–æ–∏—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å'")
    
    return content

def update_progress_stats(content: str) -> str:
    """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á–∏
    completed_tasks = len(re.findall(r'- \[x\]', content))
    in_progress_tasks = len(re.findall(r'- \[ \].*üîÑ', content))
    todo_tasks = len(re.findall(r'- \[ \]', content)) - in_progress_tasks
    
    total_tasks = completed_tasks + in_progress_tasks + todo_tasks
    progress_percent = round((completed_tasks / total_tasks * 100) if total_tasks > 0 else 0, 1)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–∫—Ü–∏—é –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    progress_pattern = r'(## üìä –ü—Ä–æ–≥—Ä–µ—Å—Å\n\n- \*\*–í—ã–ø–æ–ª–Ω–µ–Ω–æ\*\*: ).*?(\n- \*\*–í —Ä–∞–±–æ—Ç–µ\*\*: ).*?(\n- \*\*–ü—Ä–µ–¥—Å—Ç–æ–∏—Ç\*\*: ).*?(\n- \*\*–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å\*\*: ).*?(\n\n---)'
    replacement = rf'\1{completed_tasks} –∑–∞–¥–∞—á ({round(completed_tasks/total_tasks*100, 1)}%)\2{in_progress_tasks} –∑–∞–¥–∞—á ({round(in_progress_tasks/total_tasks*100, 1)}%)\3{todo_tasks} –∑–∞–¥–∞—á ({round(todo_tasks/total_tasks*100, 1)}%)\4~{progress_percent}%\5'
    
    content = re.sub(progress_pattern, replacement, content)
    
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {completed_tasks}/{total_tasks} –∑–∞–¥–∞—á ({progress_percent}%)")
    return content

def update_last_modified(content: str, description: str, next_step: str = ""):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å–µ–∫—Ü–∏—é '–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ'."""
    last_modified_pattern = r'(---\n\n\*\*–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ\*\*: ).*?(\n\*\*–°–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø\*\*: ).*?(\n)'
    
    if next_step:
        replacement = rf'\1{description}\2{next_step}\3'
    else:
        replacement = rf'\1{description}\2–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏\3'
    
    content = re.sub(last_modified_pattern, replacement, content)
    return content

def show_stats(content: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
    completed_tasks = len(re.findall(r'- \[x\]', content))
    in_progress_tasks = len(re.findall(r'- \[ \].*üîÑ', content))
    todo_tasks = len(re.findall(r'- \[ \]', content)) - in_progress_tasks
    
    total_tasks = completed_tasks + in_progress_tasks + todo_tasks
    progress_percent = round((completed_tasks / total_tasks * 100) if total_tasks > 0 else 0, 1)
    
    print("üìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞:")
    print(f"   ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed_tasks} –∑–∞–¥–∞—á")
    print(f"   üîÑ –í —Ä–∞–±–æ—Ç–µ: {in_progress_tasks} –∑–∞–¥–∞—á")
    print(f"   üìã –ü—Ä–µ–¥—Å—Ç–æ–∏—Ç: {todo_tasks} –∑–∞–¥–∞—á")
    print(f"   üìà –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {progress_percent}%")
    print(f"   üìä –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {total_tasks}")

def main():
    parser = argparse.ArgumentParser(description="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ TODO-–ª–∏—Å—Ç–∞")
    parser.add_argument("--completed", help="–û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é")
    parser.add_argument("--add", help="–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É")
    parser.add_argument("--priority", choices=["high", "medium", "low"], default="medium", 
                       help="–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏")
    parser.add_argument("--category", default="–û–±—â–µ–µ", help="–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏")
    parser.add_argument("--stats", action="store_true", help="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    parser.add_argument("--description", help="–û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è '–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ'")
    parser.add_argument("--next-step", help="–°–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø")
    
    args = parser.parse_args()
    
    try:
        content = read_todo_file()
        
        if args.completed:
            content = mark_task_completed(content, args.completed)
        
        if args.add:
            content = add_new_task(content, args.add, args.priority, args.category)
        
        if args.completed or args.add:
            content = update_progress_stats(content)
            
            if args.description:
                content = update_last_modified(content, args.description, args.next_step)
            else:
                description = f"–û–±–Ω–æ–≤–ª–µ–Ω TODO-–ª–∏—Å—Ç"
                if args.completed:
                    description += f" - –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∑–∞–¥–∞—á–∞: {args.completed}"
                if args.add:
                    description += f" - –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞: {args.add}"
                
                content = update_last_modified(content, description, args.next_step)
            
            write_todo_file(content)
            print("üíæ TODO.md –æ–±–Ω–æ–≤–ª–µ–Ω")
        
        if args.stats:
            show_stats(content)
        
        if not any([args.completed, args.add, args.stats]):
            parser.print_help()
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main() 