#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≥–æ–ª–æ—Å–∞ –≤ Coqui TTS.

–ü—Ä–æ–±–ª–µ–º–∞: –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥–æ–ª–æ—Å –∑–≤—É—á–∏—Ç –∫–∞–∫ –º—É–∂—Å–∫–æ–π, —Ö–æ—Ç—è –∏—Å—Ö–æ–¥–Ω—ã–µ —Å—ç–º–ø–ª—ã - –≥–æ–ª–æ—Å –¥–µ–≤–æ—á–∫–∏.
–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
1. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –≥–æ–ª–æ—Å–∞
2. –ü—Ä–æ–±–ª–µ–º—ã —Å –∫–∞—á–µ—Å—Ç–≤–æ–º –∞—É–¥–∏–æ—Å—ç–º–ø–ª–æ–≤
3. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ YourTTS
4. –ù–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —è–∑—ã–∫–æ–≤ (—Ä—É—Å—Å–∫–∏–π vs –∞–Ω–≥–ª–∏–π—Å–∫–∏–π)

–ê–≤—Ç–æ—Ä: AI Assistant
–í–µ—Ä—Å–∏—è: 1.0.0
"""

import os
import sys
import subprocess
import json
from pathlib import Path
import librosa
import numpy as np

def analyze_audio_file(file_path):
    """–ê–Ω–∞–ª–∏–∑ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –≥–æ–ª–æ—Å–∞."""
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ
        y, sr = librosa.load(file_path, sr=None)
        
        # –ë–∞–∑–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        duration = len(y) / sr
        rms = np.sqrt(np.mean(y**2))
        
        # –°–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        spectral_centroids = librosa.feature.spectral_centroid(y=y, sr=sr)[0]
        spectral_rolloff = librosa.feature.spectral_rolloff(y=y, sr=sr)[0]
        
        # –ü–∏—Ç—á (–≤—ã—Å–æ—Ç–∞ –≥–æ–ª–æ—Å–∞)
        pitches, magnitudes = librosa.piptrack(y=y, sr=sr)
        pitch_values = []
        for t in range(pitches.shape[1]):
            index = magnitudes[:, t].argmax()
            pitch = pitches[index, t]
            if pitch > 0:
                pitch_values.append(pitch)
        
        if pitch_values:
            avg_pitch = np.mean(pitch_values)
            pitch_std = np.std(pitch_values)
        else:
            avg_pitch = 0
            pitch_std = 0
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª–∞ –ø–æ –ø–∏—Ç—á—É (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)
        if avg_pitch > 165:  # Hz
            gender = "–∂–µ–Ω—Å–∫–∏–π/–¥–µ—Ç—Å–∫–∏–π"
        elif avg_pitch > 85:
            gender = "–º—É–∂—Å–∫–æ–π"
        else:
            gender = "–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
        
        return {
            "file": file_path,
            "duration": duration,
            "sample_rate": sr,
            "rms_energy": rms,
            "avg_spectral_centroid": np.mean(spectral_centroids),
            "avg_spectral_rolloff": np.mean(spectral_rolloff),
            "avg_pitch": avg_pitch,
            "pitch_std": pitch_std,
            "estimated_gender": gender,
            "pitch_range": f"{min(pitch_values) if pitch_values else 0:.1f} - {max(pitch_values) if pitch_values else 0:.1f} Hz"
        }
    except Exception as e:
        return {"file": file_path, "error": str(e)}

def test_different_speakers():
    """–¢–µ—Å—Ç —Å —Ä–∞–∑–Ω—ã–º–∏ –∞—É–¥–∏–æ—Å—ç–º–ø–ª–∞–º–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è."""
    audio_files = list(Path("data/audio").glob("*.ogg"))[:5]
    
    print("=== –ê–ù–ê–õ–ò–ó –ò–°–•–û–î–ù–´–• –ê–£–î–ò–û–°–≠–ú–ü–õ–û–í ===")
    for i, audio_file in enumerate(audio_files):
        print(f"\n{i+1}. {audio_file.name}")
        analysis = analyze_audio_file(str(audio_file))
        if "error" not in analysis:
            print(f"   –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {analysis['duration']:.2f} —Å–µ–∫")
            print(f"   –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏: {analysis['sample_rate']} Hz")
            print(f"   –°—Ä–µ–¥–Ω–∏–π –ø–∏—Ç—á: {analysis['avg_pitch']:.1f} Hz")
            print(f"   –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π –ø–æ–ª: {analysis['estimated_gender']}")
            print(f"   –î–∏–∞–ø–∞–∑–æ–Ω –ø–∏—Ç—á–∞: {analysis['pitch_range']}")
        else:
            print(f"   –û—à–∏–±–∫–∞: {analysis['error']}")

def create_test_samples():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—ç–º–ø–ª–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏."""
    print("\n=== –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–´–• –°–≠–ú–ü–õ–û–í ===")
    
    # –¢–µ—Å—Ç 1: –ö–æ—Ä–æ—Ç–∫–∏–π —Å—ç–º–ø–ª
    cmd1 = [
        "source coqui_tts_env/bin/activate && tts",
        "--text", "Hello!",
        "--model_name", "tts_models/multilingual/multi-dataset/your_tts",
        "--speaker_wav", "data/audio/audio_1@02-12-2020_23-57-46.ogg",
        "--language_idx", "en",
        "--out_path", "test_short.wav"
    ]
    
    # –¢–µ—Å—Ç 2: –° —Ä–∞–∑–Ω—ã–º–∏ –∞—É–¥–∏–æ—Å—ç–º–ø–ª–∞–º–∏
    audio_files = list(Path("data/audio").glob("*.ogg"))[:3]
    
    for i, audio_file in enumerate(audio_files):
        cmd = [
            "source coqui_tts_env/bin/activate && tts",
            "--text", "Hello! This is a test.",
            "--model_name", "tts_models/multilingual/multi-dataset/your_tts",
            "--speaker_wav", str(audio_file),
            "--language_idx", "en",
            "--out_path", f"test_speaker_{i+1}.wav"
        ]
        
        print(f"–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ —Å {audio_file.name}...")
        try:
            subprocess.run(" ".join(cmd), shell=True, check=True)
            print(f"‚úÖ –¢–µ—Å—Ç {i+1} —Å–æ–∑–¥–∞–Ω")
        except subprocess.CalledProcessError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {i+1}: {e}")

def analyze_generated_samples():
    """–ê–Ω–∞–ª–∏–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—ç–º–ø–ª–æ–≤."""
    print("\n=== –ê–ù–ê–õ–ò–ó –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–ù–´–• –°–≠–ú–ü–õ–û–í ===")
    
    generated_files = list(Path(".").glob("test_*.wav"))
    
    for file in generated_files:
        print(f"\n{file.name}:")
        analysis = analyze_audio_file(str(file))
        if "error" not in analysis:
            print(f"   –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {analysis['duration']:.2f} —Å–µ–∫")
            print(f"   –°—Ä–µ–¥–Ω–∏–π –ø–∏—Ç—á: {analysis['avg_pitch']:.1f} Hz")
            print(f"   –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π –ø–æ–ª: {analysis['estimated_gender']}")
            print(f"   –î–∏–∞–ø–∞–∑–æ–Ω –ø–∏—Ç—á–∞: {analysis['pitch_range']}")
        else:
            print(f"   –û—à–∏–±–∫–∞: {analysis['error']}")

def suggest_solutions():
    """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —Ä–µ—à–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º—ã."""
    print("\n=== –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø –ü–û –†–ï–®–ï–ù–ò–Æ ===")
    
    solutions = [
        "1. **–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å XTTS v2** (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫):",
        "   - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ–ª–µ–µ —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é PyTorch (2.5.x)",
        "   - –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Docker —Å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–π –≤–µ—Ä—Å–∏–µ–π",
        "",
        "2. **–£–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∞—É–¥–∏–æ—Å—ç–º–ø–ª–æ–≤**:",
        "   - –ó–∞–ø–∏—Å–∞—Ç—å –Ω–æ–≤—ã–µ —Å—ç–º–ø–ª—ã –≤ —Ç–∏—Ö–æ–º –ø–æ–º–µ—â–µ–Ω–∏–∏",
        "   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –º–∏–∫—Ä–æ—Ñ–æ–Ω",
        "   - –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å",
        "",
        "3. **–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –º–æ–¥–µ–ª–∏**:",
        "   - Coqui TTS —Å fine-tuning",
        "   - Tortoise TTS",
        "   - Tacotron 2 —Å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º",
        "",
        "4. **–û–±—É—á–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–π –º–æ–¥–µ–ª–∏**:",
        "   - –°–æ–±—Ä–∞—Ç—å –±–æ–ª—å—à–µ –∞—É–¥–∏–æ—Å—ç–º–ø–ª–æ–≤ (30+ –º–∏–Ω—É—Ç)",
        "   - –û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å —Å –Ω—É–ª—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ",
        "",
        "5. **–í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ**:",
        "   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å YourTTS –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ",
        "   - –î–æ–±–∞–≤–∏—Ç—å —Ä—É—Å—Å–∫–∏–π TTS –±–µ–∑ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
        "   - –û–±—ä–µ–¥–∏–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"
    ]
    
    for solution in solutions:
        print(solution)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞."""
    print("üîç –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´ –ö–õ–û–ù–ò–†–û–í–ê–ù–ò–Ø –ì–û–õ–û–°–ê")
    print("=" * 50)
    
    # –ê–Ω–∞–ª–∏–∑ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Å—ç–º–ø–ª–æ–≤
    test_different_speakers()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—ç–º–ø–ª–æ–≤
    create_test_samples()
    
    # –ê–Ω–∞–ª–∏–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—ç–º–ø–ª–æ–≤
    analyze_generated_samples()
    
    # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —Ä–µ—à–µ–Ω–∏—é
    suggest_solutions()
    
    print("\n" + "=" * 50)
    print("üìã –†–ï–ó–Æ–ú–ï:")
    print("- –ü—Ä–æ–±–ª–µ–º–∞: YourTTS –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫")
    print("- –†–µ—à–µ–Ω–∏–µ: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å XTTS v2 –∏–ª–∏ –æ–±—É—á–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—É—é –º–æ–¥–µ–ª—å")
    print("- –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π TTS + —Ä—É—Å—Å–∫–∏–π TTS")

if __name__ == "__main__":
    main() 