#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ —Å–∏—Å—Ç–µ–º—ã —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞
# –ê–≤—Ç–æ—Ä: –ê–≤–∞–±–æ—Ç
# –í–µ—Ä—Å–∏—è: 1.0.0

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    if ! command -v python3 &> /dev/null; then
        log_error "Python3 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi
    
    if ! command -v node &> /dev/null; then
        log_error "Node.js –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi
    
    if ! command -v npm &> /dev/null; then
        log_error "npm –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi
    
    log_success "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏–π
check_environments() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏–π..."
    
    if [ ! -d "ai_env" ]; then
        log_error "–û–∫—Ä—É–∂–µ–Ω–∏–µ ai_env –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        exit 1
    fi
    
    if [ ! -d "sadtalker_env310" ]; then
        log_error "–û–∫—Ä—É–∂–µ–Ω–∏–µ sadtalker_env310 –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        exit 1
    fi
    
    log_success "–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞
wait_for_service() {
    local url=$1
    local service_name=$2
    local max_attempts=30
    local attempt=1
    
    log_info "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ $service_name..."
    
    while [ $attempt -le $max_attempts ]; do
        if curl -s "$url" > /dev/null 2>&1; then
            log_success "$service_name –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ"
            return 0
        fi
        
        log_info "–ü–æ–ø—ã—Ç–∫–∞ $attempt/$max_attempts - $service_name –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤..."
        sleep 2
        ((attempt++))
    done
    
    log_error "$service_name –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è"
    return 1
}

# –ó–∞–ø—É—Å–∫ Backend API
start_backend() {
    log_info "–ó–∞–ø—É—Å–∫ Backend API (–ø–æ—Ä—Ç 8000)..."
    
    cd backend
    source ../ai_env/bin/activate
    
    # –ó–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–µ —Å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –≤—ã–≤–æ–¥–∞
    nohup python -m uvicorn app.main:app --reload --port 8000 --host 0.0.0.0 > ../logs/backend.log 2>&1 &
    BACKEND_PID=$!
    echo $BACKEND_PID > ../logs/backend.pid
    
    cd ..
    
    # –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    if wait_for_service "http://localhost:8000/health" "Backend API"; then
        log_success "Backend API –∑–∞–ø—É—â–µ–Ω (PID: $BACKEND_PID)"
    else
        log_error "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Backend API"
        exit 1
    fi
}

# –ó–∞–ø—É—Å–∫ HierSpeech_TTS
start_hier_tts() {
    log_info "–ó–∞–ø—É—Å–∫ HierSpeech_TTS (–ø–æ—Ä—Ç 8001)..."
    
    cd HierSpeech_TTS
    source ../ai_env/bin/activate
    
    # –ó–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–µ —Å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –≤—ã–≤–æ–¥–∞
    nohup python hier_api_server.py > ../logs/hier_tts.log 2>&1 &
    HIER_TTS_PID=$!
    echo $HIER_TTS_PID > ../logs/hier_tts.pid
    
    cd ..
    
    # –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    if wait_for_service "http://localhost:8001/health" "HierSpeech_TTS"; then
        log_success "HierSpeech_TTS –∑–∞–ø—É—â–µ–Ω (PID: $HIER_TTS_PID)"
    else
        log_error "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ HierSpeech_TTS"
        exit 1
    fi
}

# –ó–∞–ø—É—Å–∫ SadTalker
start_sadtalker() {
    log_info "–ó–∞–ø—É—Å–∫ SadTalker (–ø–æ—Ä—Ç 8002)..."
    
    cd SadTalker
    source ../sadtalker_env310/bin/activate
    
    # –ó–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–µ —Å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –≤—ã–≤–æ–¥–∞
    nohup python sadtalker_api_server.py > ../logs/sadtalker.log 2>&1 &
    SADTALKER_PID=$!
    echo $SADTALKER_PID > ../logs/sadtalker.pid
    
    cd ..
    
    # –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    if wait_for_service "http://localhost:8002/health" "SadTalker"; then
        log_success "SadTalker –∑–∞–ø—É—â–µ–Ω (PID: $SADTALKER_PID)"
    else
        log_error "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ SadTalker"
        exit 1
    fi
}

# –ó–∞–ø—É—Å–∫ Frontend
start_frontend() {
    log_info "–ó–∞–ø—É—Å–∫ Frontend (–ø–æ—Ä—Ç 3000)..."
    
    cd frontend
    
    # –ó–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–µ —Å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –≤—ã–≤–æ–¥–∞
    nohup npm run dev > ../logs/frontend.log 2>&1 &
    FRONTEND_PID=$!
    echo $FRONTEND_PID > ../logs/frontend.pid
    
    cd ..
    
    # –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    if wait_for_service "http://localhost:3000" "Frontend"; then
        log_success "Frontend –∑–∞–ø—É—â–µ–Ω (PID: $FRONTEND_PID)"
    else
        log_error "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Frontend"
        exit 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
check_all_services() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    local services=(
        "Backend API:http://localhost:8000/health"
        "HierSpeech_TTS:http://localhost:8001/health"
        "SadTalker:http://localhost:8002/health"
        "Frontend:http://localhost:3000"
    )
    
    local all_ok=true
    
    for service in "${services[@]}"; do
        IFS=':' read -r name url <<< "$service"
        
        if curl -s "$url" > /dev/null 2>&1; then
            log_success "$name —Ä–∞–±–æ—Ç–∞–µ—Ç"
        else
            log_error "$name –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
            all_ok=false
        fi
    done
    
    if [ "$all_ok" = true ]; then
        log_success "–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!"
        echo ""
        echo "üåê –î–æ—Å—Ç—É–ø–Ω—ã–µ URL:"
        echo "   Frontend: http://localhost:3000"
        echo "   Backend API: http://localhost:8000"
        echo "   HierSpeech_TTS: http://localhost:8001"
        echo "   SadTalker: http://localhost:8002"
        echo ""
        echo "üìã –õ–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–æ–≤:"
        echo "   Backend: logs/backend.log"
        echo "   HierSpeech_TTS: logs/hier_tts.log"
        echo "   SadTalker: logs/sadtalker.log"
        echo "   Frontend: logs/frontend.log"
        echo ""
        echo "üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: ./stop_all_services.sh"
    else
        log_error "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç"
        exit 1
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤
create_logs_directory() {
    if [ ! -d "logs" ]; then
        mkdir -p logs
        log_info "–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è logs"
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo "üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞"
    echo "=================================="
    echo ""
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    check_dependencies
    check_environments
    create_logs_directory
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    log_info "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤..."
    ./stop_all_services.sh 2>/dev/null || true
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
    start_backend
    start_hier_tts
    start_sadtalker
    start_frontend
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    check_all_services
    
    log_success "–°–∏—Å—Ç–µ–º–∞ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞!"
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
trap 'log_info "–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã..."; exit 0' SIGINT SIGTERM

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@" 