#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞.

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É backend, frontend, TTS, —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ –∏ –ò–ò-—á–∞—Ç–∞.

–ê–≤—Ç–æ—Ä: –ê–≤–∞–±–æ—Ç
–í–µ—Ä—Å–∏—è: 1.0.0
"""

import asyncio
import json
import logging
import requests
import subprocess
import sys
import time
from datetime import datetime
from typing import Dict, Any, List

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class SystemTester:
    """–¢–µ—Å—Ç–µ—Ä —Å–∏—Å—Ç–µ–º—ã —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞."""
    
    def __init__(self):
        self.backend_url = "http://127.0.0.1:8000"
        self.frontend_url = "http://localhost:3000"
        self.hier_tts_url = "http://127.0.0.1:8001"
        self.test_results = {}
    
    def test_backend_health(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è backend."""
        try:
            logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ backend...")
            
            response = requests.get(f"{self.backend_url}/health", timeout=5)
            
            if response.status_code == 200:
                data = response.json()
                logger.info("‚úÖ Backend —Ä–∞–±–æ—Ç–∞–µ—Ç")
                return {
                    "status": "success",
                    "data": data,
                    "response_time": response.elapsed.total_seconds()
                }
            else:
                logger.error(f"‚ùå Backend –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status_code}")
                return {
                    "status": "error",
                    "error": f"HTTP {response.status_code}"
                }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ backend: {e}")
            return {
                "status": "error",
                "error": str(e)
            }
    
    def test_frontend_health(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è frontend."""
        try:
            logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ frontend...")
            
            response = requests.get(self.frontend_url, timeout=5)
            
            if response.status_code == 200:
                logger.info("‚úÖ Frontend —Ä–∞–±–æ—Ç–∞–µ—Ç")
                return {
                    "status": "success",
                    "response_time": response.elapsed.total_seconds()
                }
            else:
                logger.error(f"‚ùå Frontend –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status_code}")
                return {
                    "status": "error",
                    "error": f"HTTP {response.status_code}"
                }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ frontend: {e}")
            return {
                "status": "error",
                "error": str(e)
            }
    
    def test_hier_tts(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HierSpeech_TTS."""
        try:
            logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HierSpeech_TTS...")
            
            response = requests.get(f"{self.hier_tts_url}/health", timeout=5)
            
            if response.status_code == 200:
                logger.info("‚úÖ HierSpeech_TTS —Ä–∞–±–æ—Ç–∞–µ—Ç")
                return {
                    "status": "success",
                    "response_time": response.elapsed.total_seconds()
                }
            else:
                logger.error(f"‚ùå HierSpeech_TTS –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status_code}")
                return {
                    "status": "error",
                    "error": f"HTTP {response.status_code}"
                }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ HierSpeech_TTS: {e}")
            return {
                "status": "error",
                "error": str(e)
            }
    
    def test_whisper_service(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ Whisper."""
        try:
            logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Whisper...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å endpoint
            response = requests.get(f"{self.backend_url}/api/v1/speech/health", timeout=5)
            
            if response.status_code == 200:
                data = response.json()
                logger.info("‚úÖ Whisper API —Ä–∞–±–æ—Ç–∞–µ—Ç")
                return {
                    "status": "success",
                    "data": data
                }
            else:
                logger.error(f"‚ùå Whisper API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status_code}")
                return {
                    "status": "error",
                    "error": f"HTTP {response.status_code}"
                }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Whisper: {e}")
            return {
                "status": "error",
                "error": str(e)
            }
    
    async def test_ollama_service(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ Ollama."""
        try:
            logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Ollama...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å endpoint
            response = requests.get(f"{self.backend_url}/api/v1/chat/health", timeout=5)
            
            if response.status_code == 200:
                data = response.json()
                logger.info("‚úÖ Ollama API —Ä–∞–±–æ—Ç–∞–µ—Ç")
                return {
                    "status": "success",
                    "data": data
                }
            else:
                logger.error(f"‚ùå Ollama API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status_code}")
                return {
                    "status": "error",
                    "error": f"HTTP {response.status_code}"
                }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Ollama: {e}")
            return {
                "status": "error",
                "error": str(e)
            }
    
    def test_ports(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –ø–æ—Ä—Ç–æ–≤."""
        try:
            logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤...")
            
            import psutil
            
            ports_to_check = [8000, 3000, 8001]
            port_status = {}
            
            for port in ports_to_check:
                is_used = False
                for conn in psutil.net_connections():
                    if conn.laddr.port == port and conn.status == 'LISTEN':
                        is_used = True
                        break
                
                port_status[f"port_{port}"] = "used" if is_used else "free"
            
            logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            return {
                "status": "success",
                "ports": port_status
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–æ–≤: {e}")
            return {
                "status": "error",
                "error": str(e)
            }
    
    def test_gpu(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GPU."""
        try:
            logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ GPU...")
            
            import torch
            
            if torch.cuda.is_available():
                gpu_count = torch.cuda.device_count()
                gpu_info = []
                
                for i in range(gpu_count):
                    props = torch.cuda.get_device_properties(i)
                    gpu_info.append({
                        "id": i,
                        "name": props.name,
                        "memory_total": props.total_memory / 1024**3,  # GB
                        "memory_allocated": torch.cuda.memory_allocated(i) / 1024**3,  # GB
                    })
                
                logger.info(f"‚úÖ GPU –¥–æ—Å—Ç—É–ø–µ–Ω: {gpu_count} —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
                return {
                    "status": "success",
                    "cuda_available": True,
                    "gpu_count": gpu_count,
                    "gpus": gpu_info
                }
            else:
                logger.warning("‚ö†Ô∏è GPU –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return {
                    "status": "warning",
                    "cuda_available": False,
                    "message": "GPU –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è CPU"
                }
                
        except ImportError:
            logger.warning("‚ö†Ô∏è PyTorch –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return {
                "status": "warning",
                "error": "PyTorch –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ GPU: {e}")
            return {
                "status": "error",
                "error": str(e)
            }
    
    async def run_all_tests(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤."""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã...")
        
        results = {
            "timestamp": datetime.now().isoformat(),
            "tests": {}
        }
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        results["tests"]["backend"] = self.test_backend_health()
        results["tests"]["frontend"] = self.test_frontend_health()
        results["tests"]["hier_tts"] = self.test_hier_tts()
        results["tests"]["whisper"] = self.test_whisper_service()
        results["tests"]["ollama"] = await self.test_ollama_service()
        results["tests"]["ports"] = self.test_ports()
        results["tests"]["gpu"] = self.test_gpu()
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_tests = len(results["tests"])
        successful_tests = sum(1 for test in results["tests"].values() if test["status"] == "success")
        warning_tests = sum(1 for test in results["tests"].values() if test["status"] == "warning")
        failed_tests = sum(1 for test in results["tests"].values() if test["status"] == "error")
        
        results["summary"] = {
            "total": total_tests,
            "successful": successful_tests,
            "warnings": warning_tests,
            "failed": failed_tests,
            "success_rate": (successful_tests / total_tests) * 100 if total_tests > 0 else 0
        }
        
        return results
    
    def print_results(self, results: Dict[str, Any]):
        """–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
        print("\n" + "="*60)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("="*60)
        print(f"–í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {results['timestamp']}")
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º
        for component, result in results["tests"].items():
            status_icon = "‚úÖ" if result["status"] == "success" else "‚ö†Ô∏è" if result["status"] == "warning" else "‚ùå"
            print(f"\n{status_icon} {component.upper()}: {result['status']}")
            
            if result["status"] == "error":
                print(f"   –û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            elif result["status"] == "success":
                if "response_time" in result:
                    print(f"   –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {result['response_time']:.3f} —Å–µ–∫")
        
        # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É
        summary = results["summary"]
        print(f"\nüìà –°–í–û–î–ö–ê:")
        print(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {summary['total']}")
        print(f"   –£—Å–ø–µ—à–Ω–æ: {summary['successful']} ‚úÖ")
        print(f"   –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {summary['warnings']} ‚ö†Ô∏è")
        print(f"   –û—à–∏–±–∫–∏: {summary['failed']} ‚ùå")
        print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {summary['success_rate']:.1f}%")
        
        # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
        if summary["success_rate"] >= 80:
            print(f"\nüéâ –û–¢–õ–ò–ß–ù–û! –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ")
        elif summary["success_rate"] >= 60:
            print(f"\nüî∂ –•–û–†–û–®–û! –ï—Å—Ç—å –Ω–µ–±–æ–ª—å—à–∏–µ –ø—Ä–æ–±–ª–µ–º—ã")
        else:
            print(f"\nüî¥ –¢–†–ï–ë–£–ï–¢ –í–ù–ò–ú–ê–ù–ò–Ø! –ú–Ω–æ–≥–æ –ø—Ä–æ–±–ª–µ–º")
        
        print("="*60)


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    tester = SystemTester()
    
    try:
        results = await tester.run_all_tests()
        tester.print_results(results)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        results_file = f"test_results_{timestamp}.json"
        
        with open(results_file, 'w', encoding='utf-8') as f:
            json.dump(results, f, ensure_ascii=False, indent=2)
        
        print(f"\nüìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {results_file}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
        if results["summary"]["success_rate"] >= 80:
            sys.exit(0)  # –£—Å–ø–µ—Ö
        elif results["summary"]["success_rate"] >= 60:
            sys.exit(1)  # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        else:
            sys.exit(2)  # –û—à–∏–±–∫–∞
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        sys.exit(3)


if __name__ == "__main__":
    asyncio.run(main()) 