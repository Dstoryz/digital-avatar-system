#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞.

–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
1. Backend (FastAPI) - –ø–æ—Ä—Ç 8000
2. HierSpeech_TTS - –ø–æ—Ä—Ç 8001  
3. SadTalker - –ø–æ—Ä—Ç 8002
4. Frontend - –ø–æ—Ä—Ç 3001
5. WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
6. –ê—É–¥–∏–æ —Å–∏–Ω—Ç–µ–∑ –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ

–ê–≤—Ç–æ—Ä: –ê–≤–∞–±–æ—Ç
–í–µ—Ä—Å–∏—è: 1.0.0
"""

import asyncio
import aiohttp
import json
import time
import requests
from typing import Dict, List, Any
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class AvatarSystemTester:
    """–¢–µ—Å—Ç–µ—Ä —Å–∏—Å—Ç–µ–º—ã —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–µ—Ä–∞."""
        self.base_urls = {
            'backend': 'http://127.0.0.1:8000',
            'hier_tts': 'http://127.0.0.1:8001',
            'sadtalker': 'http://127.0.0.1:8002',
            'frontend': 'http://127.0.0.1:3001'
        }
        self.results = {}
        
    async def test_backend(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç backend API."""
        logger.info("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Backend API...")
        
        try:
            # Health check
            response = await self._make_request(f"{self.base_urls['backend']}/health")
            if response and response.get('status') == 'healthy':
                logger.info("‚úÖ Backend API —Ä–∞–±–æ—Ç–∞–µ—Ç")
                return {'status': 'success', 'message': 'Backend API —Ä–∞–±–æ—Ç–∞–µ—Ç'}
            else:
                logger.error("‚ùå Backend API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
                return {'status': 'error', 'message': 'Backend API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç'}
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Backend: {e}")
            return {'status': 'error', 'message': str(e)}
    
    async def test_hier_tts(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç HierSpeech_TTS."""
        logger.info("üé§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HierSpeech_TTS...")
        
        try:
            # Health check
            response = await self._make_request(f"{self.base_urls['hier_tts']}/health")
            if response and response.get('status') == 'healthy':
                logger.info("‚úÖ HierSpeech_TTS —Ä–∞–±–æ—Ç–∞–µ—Ç")
                return {'status': 'success', 'message': 'HierSpeech_TTS —Ä–∞–±–æ—Ç–∞–µ—Ç'}
            else:
                logger.error("‚ùå HierSpeech_TTS –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
                return {'status': 'error', 'message': 'HierSpeech_TTS –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç'}
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è HierSpeech_TTS: {e}")
            return {'status': 'error', 'message': str(e)}
    
    async def test_sadtalker(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç SadTalker."""
        logger.info("üé≠ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SadTalker...")
        
        try:
            # Health check
            response = await self._make_request(f"{self.base_urls['sadtalker']}/health")
            if response and response.get('status') == 'healthy':
                logger.info("‚úÖ SadTalker —Ä–∞–±–æ—Ç–∞–µ—Ç")
                return {'status': 'success', 'message': 'SadTalker —Ä–∞–±–æ—Ç–∞–µ—Ç'}
            else:
                logger.error("‚ùå SadTalker –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
                return {'status': 'error', 'message': 'SadTalker –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç'}
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è SadTalker: {e}")
            return {'status': 'error', 'message': str(e)}
    
    async def test_frontend(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç Frontend."""
        logger.info("üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Frontend...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
            async with aiohttp.ClientSession() as session:
                async with session.get(self.base_urls['frontend']) as response:
                    if response.status == 200:
                        logger.info("‚úÖ Frontend –¥–æ—Å—Ç—É–ø–µ–Ω")
                        return {'status': 'success', 'message': 'Frontend –¥–æ—Å—Ç—É–ø–µ–Ω'}
                    else:
                        logger.error(f"‚ùå Frontend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status}")
                        return {'status': 'error', 'message': f'Frontend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status}'}
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Frontend: {e}")
            return {'status': 'error', 'message': str(e)}
    
    async def test_websocket(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è."""
        logger.info("üîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WebSocket...")
        
        try:
            import websockets
            
            uri = "ws://127.0.0.1:8000/ws"
            async with websockets.connect(uri) as websocket:
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                test_message = json.dumps({
                    'type': 'test',
                    'message': 'Hello from tester'
                })
                await websocket.send(test_message)
                
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
                response = await asyncio.wait_for(websocket.recv(), timeout=5.0)
                logger.info("‚úÖ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                return {'status': 'success', 'message': 'WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ WebSocket: {e}")
            return {'status': 'error', 'message': str(e)}
    
    async def test_audio_synthesis(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏."""
        logger.info("üéµ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏...")
        
        try:
            # –¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç
            test_text = "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏."
            
            # –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–∏–Ω—Ç–µ–∑
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{self.base_urls['hier_tts']}/synthesize",
                    json={
                        'text': test_text,
                        'language': 'ru',
                        'reference_audio': 'default'
                    }
                ) as response:
                    if response.status == 200:
                        audio_data = await response.read()
                        if len(audio_data) > 0:
                            logger.info("‚úÖ –°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                            return {'status': 'success', 'message': '–°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç'}
                        else:
                            logger.error("‚ùå –ü—É—Å—Ç–æ–π –∞—É–¥–∏–æ –æ—Ç–≤–µ—Ç")
                            return {'status': 'error', 'message': '–ü—É—Å—Ç–æ–π –∞—É–¥–∏–æ –æ—Ç–≤–µ—Ç'}
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏: {response.status}")
                        return {'status': 'error', 'message': f'–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏: {response.status}'}
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏: {e}")
            return {'status': 'error', 'message': str(e)}
    
    async def test_ai_chat(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç AI —á–∞—Ç–∞."""
        logger.info("üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI —á–∞—Ç–∞...")
        
        try:
            # –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            test_message = "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"
            
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{self.base_urls['backend']}/api/v1/chat/chat",
                    json={
                        'message': test_message,
                        'model': 'llama3.2:3b',
                        'max_tokens': 100,
                        'temperature': 0.7
                    }
                ) as response:
                    if response.status == 200:
                        result = await response.json()
                        if 'response' in result and len(result['response']) > 0:
                            logger.info("‚úÖ AI —á–∞—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç")
                            return {'status': 'success', 'message': 'AI —á–∞—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç'}
                        else:
                            logger.error("‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç AI")
                            return {'status': 'error', 'message': '–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç AI'}
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ AI —á–∞—Ç–∞: {response.status}")
                        return {'status': 'error', 'message': f'–û—à–∏–±–∫–∞ AI —á–∞—Ç–∞: {response.status}'}
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è AI —á–∞—Ç–∞: {e}")
            return {'status': 'error', 'message': str(e)}
    
    async def _make_request(self, url: str) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–∞."""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as response:
                    if response.status == 200:
                        return await response.json()
                    else:
                        return None
        except Exception:
            return None
    
    async def run_all_tests(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤."""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã...")
        
        tests = [
            ('backend', self.test_backend),
            ('hier_tts', self.test_hier_tts),
            ('sadtalker', self.test_sadtalker),
            ('frontend', self.test_frontend),
            ('websocket', self.test_websocket),
            ('audio_synthesis', self.test_audio_synthesis),
            ('ai_chat', self.test_ai_chat)
        ]
        
        for test_name, test_func in tests:
            self.results[test_name] = await test_func()
            await asyncio.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        
        return self.results
    
    def print_results(self):
        """–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
        print("\n" + "="*60)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–ò–°–¢–ï–ú–´ –¶–ò–§–†–û–í–û–ì–û –ê–í–ê–¢–ê–†–ê")
        print("="*60)
        
        total_tests = len(self.results)
        successful_tests = sum(1 for result in self.results.values() if result['status'] == 'success')
        
        for test_name, result in self.results.items():
            status_icon = "‚úÖ" if result['status'] == 'success' else "‚ùå"
            print(f"{status_icon} {test_name.upper()}: {result['message']}")
        
        print("\n" + "-"*60)
        print(f"üìà –ò–¢–û–ì–û: {successful_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
        
        if successful_tests == total_tests:
            print("üéâ –í–°–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ –†–ê–ë–û–¢–ê–Æ–¢ –û–¢–õ–ò–ß–ù–û!")
        elif successful_tests >= total_tests * 0.7:
            print("‚ö†Ô∏è  –ë–û–õ–¨–®–ò–ù–°–¢–í–û –ö–û–ú–ü–û–ù–ï–ù–¢–û–í –†–ê–ë–û–¢–ê–Æ–¢")
        else:
            print("üö® –ú–ù–û–ì–û –ü–†–û–ë–õ–ï–ú - –¢–†–ï–ë–£–ï–¢–°–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê")
        
        print("="*60)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    tester = AvatarSystemTester()
    results = await tester.run_all_tests()
    tester.print_results()
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    timestamp = time.strftime("%Y%m%d_%H%M%S")
    filename = f"complete_system_test_results_{timestamp}.json"
    
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(results, f, ensure_ascii=False, indent=2)
    
    print(f"\nüìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")

if __name__ == "__main__":
    asyncio.run(main()) 