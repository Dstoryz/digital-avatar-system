#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞.

–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã:
1. –ó–∞–ø–∏—Å—å –∞—É–¥–∏–æ
2. –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ —á–µ—Ä–µ–∑ Whisper
3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ Ollama
4. –°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ —á–µ—Ä–µ–∑ HierSpeech_TTS
5. –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ SadTalker
6. –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ

–ê–≤—Ç–æ—Ä: –ê–≤–∞–±–æ—Ç
–í–µ—Ä—Å–∏—è: 1.0.0
"""

import asyncio
import json
import time
import requests
import websockets
import logging
from pathlib import Path
from typing import Dict, Any, Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class AvatarSystemTester:
    """–¢–µ—Å—Ç–µ—Ä —Å–∏—Å—Ç–µ–º—ã —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞."""
    
    def __init__(self):
        self.base_urls = {
            'backend': 'http://localhost:8000',
            'hier_tts': 'http://localhost:8001',
            'sadtalker': 'http://localhost:8002',
            'frontend': 'http://localhost:3000'
        }
        self.test_results = {}
        
    def test_health_endpoints(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ health endpoints –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤."""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ health endpoints...")
        
        all_healthy = True
        
        for service, url in self.base_urls.items():
            try:
                response = requests.get(f"{url}/health", timeout=5)
                if response.status_code == 200:
                    data = response.json()
                    logger.info(f"‚úÖ {service}: {data.get('status', 'OK')}")
                    self.test_results[f"{service}_health"] = True
                else:
                    logger.error(f"‚ùå {service}: HTTP {response.status_code}")
                    self.test_results[f"{service}_health"] = False
                    all_healthy = False
            except Exception as e:
                logger.error(f"‚ùå {service}: {e}")
                self.test_results[f"{service}_health"] = False
                all_healthy = False
        
        return all_healthy
    
    def test_websocket_connection(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è."""
        logger.info("üîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
        
        try:
            async def test_ws():
                uri = "ws://localhost:8000/ws"
                async with websockets.connect(uri) as websocket:
                    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                    test_message = {
                        "type": "test",
                        "message": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
                    }
                    await websocket.send(json.dumps(test_message))
                    
                    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
                    response = await asyncio.wait_for(websocket.recv(), timeout=5.0)
                    logger.info(f"‚úÖ WebSocket –æ—Ç–≤–µ—Ç: {response}")
                    return True
            
            result = asyncio.run(test_ws())
            self.test_results["websocket"] = result
            return result
            
        except Exception as e:
            logger.error(f"‚ùå WebSocket –æ—à–∏–±–∫–∞: {e}")
            self.test_results["websocket"] = False
            return False
    
    def test_whisper_integration(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Whisper."""
        logger.info("üé§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Whisper (—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏)...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º health endpoint –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
            response = requests.get(f"{self.base_urls['backend']}/api/v1/speech/health", timeout=10)
            
            if response.status_code == 200:
                result = response.json()
                logger.info(f"‚úÖ Whisper health: {result}")
                self.test_results["whisper"] = True
                return True
            else:
                logger.error(f"‚ùå Whisper health –æ—à–∏–±–∫–∞: {response.status_code}")
                self.test_results["whisper"] = False
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Whisper —Ç–µ—Å—Ç –æ—à–∏–±–∫–∞: {e}")
            self.test_results["whisper"] = False
            return False
    
    def test_ollama_integration(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Ollama."""
        logger.info("üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Ollama (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤)...")
        
        try:
            test_message = "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"
            
            response = requests.post(
                f"{self.base_urls['backend']}/api/v1/chat/chat",
                json={"message": test_message},
                timeout=30
            )
            
            if response.status_code == 200:
                result = response.json()
                logger.info(f"‚úÖ Ollama –æ—Ç–≤–µ—Ç: {result.get('response', '')[:100]}...")
                self.test_results["ollama"] = True
                return True
            else:
                logger.error(f"‚ùå Ollama –æ—à–∏–±–∫–∞: {response.status_code}")
                self.test_results["ollama"] = False
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Ollama —Ç–µ—Å—Ç –æ—à–∏–±–∫–∞: {e}")
            self.test_results["ollama"] = False
            return False
    
    def test_hier_tts_integration(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ HierSpeech_TTS."""
        logger.info("üéµ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HierSpeech_TTS (—Å–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏)...")
        
        try:
            test_text = "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏."
            
            response = requests.post(
                f"{self.base_urls['hier_tts']}/synthesize",
                json={
                    "text": test_text,
                    "voice_id": "female_001",
                    "speed": 1.0
                },
                timeout=30
            )
            
            if response.status_code == 200:
                result = response.json()
                logger.info(f"‚úÖ HierSpeech_TTS —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result.get('status', 'OK')}")
                self.test_results["hier_tts"] = True
                return True
            else:
                logger.error(f"‚ùå HierSpeech_TTS –æ—à–∏–±–∫–∞: {response.status_code}")
                self.test_results["hier_tts"] = False
                return False
                
        except Exception as e:
            logger.error(f"‚ùå HierSpeech_TTS —Ç–µ—Å—Ç –æ—à–∏–±–∫–∞: {e}")
            self.test_results["hier_tts"] = False
            return False
    
    def test_sadtalker_integration(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ SadTalker."""
        logger.info("üé≠ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SadTalker (–∞–Ω–∏–º–∞—Ü–∏—è –ª–∏—Ü–∞)...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
            image_path = "SadTalker/examples/source_image/avatar.jpg"
            audio_path = "SadTalker/examples/driven_audio/test.wav"
            
            if not Path(image_path).exists():
                logger.warning(f"‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {image_path}")
                # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
                import numpy as np
                from PIL import Image
                test_image = Image.fromarray(np.random.randint(0, 255, (512, 512, 3), dtype=np.uint8))
                test_image.save(image_path)
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_path}")
            
            if not Path(audio_path).exists():
                logger.warning(f"‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤–æ–µ –∞—É–¥–∏–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {audio_path}")
                # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
                import numpy as np
                import soundfile as sf
                sample_rate = 16000
                duration = 3.0
                t = np.linspace(0, duration, int(sample_rate * duration), False)
                audio_data = np.sin(2 * np.pi * 440 * t) * 0.1
                sf.write(audio_path, audio_data, sample_rate)
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –∞—É–¥–∏–æ: {audio_path}")
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –∞–Ω–∏–º–∞—Ü–∏—é
            with open(image_path, 'rb') as img_file, open(audio_path, 'rb') as audio_file:
                files = {
                    'image': ('avatar.jpg', img_file, 'image/jpeg'),
                    'audio': ('test.wav', audio_file, 'audio/wav')
                }
                response = requests.post(
                    f"{self.base_urls['sadtalker']}/animate",
                    files=files,
                    timeout=60
                )
            
            if response.status_code == 200:
                result = response.json()
                logger.info(f"‚úÖ SadTalker —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result.get('status', 'OK')}")
                self.test_results["sadtalker"] = True
                return True
            else:
                logger.error(f"‚ùå SadTalker –æ—à–∏–±–∫–∞: {response.status_code}")
                self.test_results["sadtalker"] = False
                return False
                
        except Exception as e:
            logger.error(f"‚ùå SadTalker —Ç–µ—Å—Ç –æ—à–∏–±–∫–∞: {e}")
            self.test_results["sadtalker"] = False
            return False
    
    def test_full_pipeline(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞."""
        logger.info("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞...")
        
        try:
            # –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
            test_message = "–ü—Ä–∏–≤–µ—Ç! –†–∞—Å—Å–∫–∞–∂–∏ –∞–Ω–µ–∫–¥–æ—Ç."
            
            # 1. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket
            async def test_full_cycle():
                uri = "ws://localhost:8000/ws"
                async with websockets.connect(uri) as websocket:
                    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                    message = {
                        "type": "text_message",
                        "message": test_message
                    }
                    await websocket.send(json.dumps(message))
                    
                    # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
                    response = await asyncio.wait_for(websocket.recv(), timeout=60.0)
                    logger.info(f"‚úÖ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ—Ç–≤–µ—Ç: {response[:200]}...")
                    return True
            
            result = asyncio.run(test_full_cycle())
            self.test_results["full_pipeline"] = result
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –æ—à–∏–±–∫–∞: {e}")
            self.test_results["full_pipeline"] = False
            return False
    
    def run_all_tests(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤."""
        logger.info("üöÄ –ù–∞—á–∞–ª–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞")
        logger.info("=" * 60)
        
        start_time = time.time()
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        tests = [
            ("Health Endpoints", self.test_health_endpoints),
            ("WebSocket", self.test_websocket_connection),
            ("Whisper", self.test_whisper_integration),
            ("Ollama", self.test_ollama_integration),
            ("HierSpeech_TTS", self.test_hier_tts_integration),
            ("SadTalker", self.test_sadtalker_integration),
            ("Full Pipeline", self.test_full_pipeline)
        ]
        
        for test_name, test_func in tests:
            logger.info(f"\nüìã –¢–µ—Å—Ç: {test_name}")
            logger.info("-" * 40)
            
            try:
                result = test_func()
                status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
                logger.info(f"{status}: {test_name}")
            except Exception as e:
                logger.error(f"‚ùå –û–®–ò–ë–ö–ê: {test_name} - {e}")
                self.test_results[test_name.lower().replace(" ", "_")] = False
        
        # –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        total_tests = len(tests)
        passed_tests = sum(1 for result in self.test_results.values() if result)
        failed_tests = total_tests - passed_tests
        
        end_time = time.time()
        duration = end_time - start_time
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        logger.info("\n" + "=" * 60)
        logger.info("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
        logger.info("=" * 60)
        logger.info(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        logger.info(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
        logger.info(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tests}")
        logger.info(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(passed_tests/total_tests)*100:.1f}%")
        logger.info(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.2f} —Å–µ–∫—É–Ω–¥")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        logger.info("\nüìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        for test_name, result in self.test_results.items():
            status = "‚úÖ" if result else "‚ùå"
            logger.info(f"{status} {test_name}: {'–ü–†–û–ô–î–ï–ù' if result else '–ü–†–û–í–ê–õ–ï–ù'}")
        
        return {
            "total_tests": total_tests,
            "passed_tests": passed_tests,
            "failed_tests": failed_tests,
            "success_rate": (passed_tests/total_tests)*100,
            "duration": duration,
            "results": self.test_results
        }

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    tester = AvatarSystemTester()
    results = tester.run_all_tests()
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    with open("test_results.json", "w", encoding="utf-8") as f:
        json.dump(results, f, ensure_ascii=False, indent=2)
    
    logger.info(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ test_results.json")
    
    # –í–æ–∑–≤—Ä–∞—Ç –∫–æ–¥–∞ –≤—ã—Ö–æ–¥–∞
    if results["failed_tests"] == 0:
        logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        return 0
    else:
        logger.error(f"‚ö†Ô∏è {results['failed_tests']} –¢–ï–°–¢–û–í –ü–†–û–í–ê–õ–ï–ù–û")
        return 1

if __name__ == "__main__":
    exit(main()) 