#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏
"""

import requests
import json
import time
import os

def test_tts_synthesis():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ —á–µ—Ä–µ–∑ API"""
    
    base_url = "http://127.0.0.1:8001"
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã
    test_phrases = [
        "–ü—Ä–∏–≤–µ—Ç!",
        "–ö–∞–∫ –¥–µ–ª–∞?",
        "–°–µ–≥–æ–¥–Ω—è –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞—è –ø–æ–≥–æ–¥–∞.",
        "–Ø –æ—á–µ–Ω—å —Ä–∞–¥–∞ –≤–∞—Å –≤–∏–¥–µ—Ç—å.",
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–Ω–∏–º–∞–Ω–∏–µ.",
        "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!"
    ]
    
    print("üé§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏")
    print("=" * 50)
    
    results = []
    
    for i, phrase in enumerate(test_phrases, 1):
        print(f"\n{i}. –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ–º: '{phrase}'")
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–∏–Ω—Ç–µ–∑
            response = requests.post(
                f"{base_url}/synthesize",
                json={
                    "text": phrase,
                    "language": "ru"
                },
                timeout=30
            )
            
            if response.status_code == 200:
                result = response.json()
                print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ!")
                print(f"   üìÅ –§–∞–π–ª: {result['audio_path']}")
                print(f"   ‚è±Ô∏è  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {result['duration']:.2f} —Å–µ–∫")
                print(f"   üîä –ß–∞—Å—Ç–æ—Ç–∞: {result['sample_rate']} Hz")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ (–∏—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Ç—å)
                file_path = f"HierSpeech_TTS/{result['audio_path']}"
                if os.path.exists(file_path):
                    file_size = os.path.getsize(file_path)
                    print(f"   üìä –†–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç")
                    
                    # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∞—É–¥–∏–æ
                    print(f"   üéµ –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º...")
                    os.system(f"aplay {file_path}")
                    
                    results.append({
                        "phrase": phrase,
                        "success": True,
                        "file": file_path,
                        "duration": result['duration'],
                        "size": file_size
                    })
                else:
                    print(f"   ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
                    results.append({
                        "phrase": phrase,
                        "success": False,
                        "error": "–§–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω"
                    })
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status_code}")
                print(f"   üìÑ –û—Ç–≤–µ—Ç: {response.text}")
                results.append({
                    "phrase": phrase,
                    "success": False,
                    "error": f"HTTP {response.status_code}"
                })
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
            results.append({
                "phrase": phrase,
                "success": False,
                "error": str(e)
            })
        
        time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print("=" * 50)
    
    successful = sum(1 for r in results if r['success'])
    total = len(results)
    
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful}/{total}")
    print(f"‚ùå –û—à–∏–±–æ–∫: {total - successful}/{total}")
    print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {successful/total*100:.1f}%")
    
    if successful > 0:
        avg_duration = sum(r['duration'] for r in results if r['success']) / successful
        avg_size = sum(r['size'] for r in results if r['success']) / successful
        print(f"‚è±Ô∏è  –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {avg_duration:.2f} —Å–µ–∫")
        print(f"üìä –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä: {avg_size:.0f} –±–∞–π—Ç")
    
    # –°–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫
    errors = [r for r in results if not r['success']]
    if errors:
        print(f"\n‚ùå –û–®–ò–ë–ö–ò:")
        for error in errors:
            print(f"   - '{error['phrase']}': {error['error']}")
    
    return results

def test_health_check():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞"""
    
    print("\nüè• –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞")
    print("-" * 30)
    
    try:
        response = requests.get("http://127.0.0.1:8001/health")
        if response.status_code == 200:
            health = response.json()
            print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {health['status']}")
            print(f"ü§ñ –ú–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {health['models_loaded']}")
            print(f"üîä –î–æ—Å—Ç—É–ø–Ω–æ –≥–æ–ª–æ—Å–æ–≤: {health['available_female_voices']}")
            print(f"üéØ –í—Å–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤: {health['total_female_voices']}")
            print(f"üöÄ CUDA –¥–æ—Å—Ç—É–ø–µ–Ω: {health['cuda_available']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
    test_health_check()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏
    results = test_tts_synthesis()
    
    print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!") 