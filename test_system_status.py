#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞.

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
- Backend API
- Frontend
- TTS —Å–µ—Ä–≤–∏—Å—ã
- –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–æ–≤

–ê–≤—Ç–æ—Ä: AI Assistant
–í–µ—Ä—Å–∏—è: 1.0.0
"""

import requests
import subprocess
import json
import time
from datetime import datetime

def check_backend():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ backend API."""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Backend API...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ health endpoint
        response = requests.get("http://127.0.0.1:8001/health", timeout=5)
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Backend —Ä–∞–±–æ—Ç–∞–µ—Ç: {data['status']} (–≤–µ—Ä—Å–∏—è {data['version']})")
            return True
        else:
            print(f"‚ùå Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: —Å—Ç–∞—Ç—É—Å {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ backend: {e}")
        return False

def check_tts_service():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ TTS —Å–µ—Ä–≤–∏—Å–∞."""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ TTS —Å–µ—Ä–≤–∏—Å–∞...")
    
    try:
        response = requests.get("http://127.0.0.1:8001/api/v1/tts/status", timeout=5)
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ TTS —Å–µ—Ä–≤–∏—Å: {data['service']}")
            print(f"   - –î–æ—Å—Ç—É–ø–µ–Ω: {'‚úÖ' if data['available'] else '‚ùå'}")
            print(f"   - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä—É—Å—Å–∫–∏–π: {'‚úÖ' if data['supports_russian'] else '‚ùå'}")
            print(f"   - –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞: {'‚úÖ' if data['voice_cloning'] else '‚ùå'}")
            return data['available']
        else:
            print(f"‚ùå TTS —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: —Å—Ç–∞—Ç—É—Å {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ TTS: {e}")
        return False

def check_frontend():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ frontend."""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Frontend...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ—Ä—Ç—ã
    ports = [3000, 3001, 3002, 3003]
    
    for port in ports:
        try:
            response = requests.get(f"http://localhost:{port}", timeout=3)
            if response.status_code == 200:
                print(f"‚úÖ Frontend —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É {port}")
                return True
        except:
            continue
    
    print("‚ùå Frontend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –≤—Å–µ—Ö –ø–æ—Ä—Ç–∞—Ö")
    return False

def check_ports():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω—è—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤."""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤...")
    
    try:
        result = subprocess.run(
            ["netstat", "-tlnp"], 
            capture_output=True, 
            text=True, 
            timeout=5
        )
        
        if result.returncode == 0:
            lines = result.stdout.split('\n')
            
            # –ò—â–µ–º –Ω–∞—à–∏ —Å–µ—Ä–≤–∏—Å—ã
            backend_found = False
            frontend_found = False
            
            for line in lines:
                if ':8001' in line and 'python' in line:
                    print("‚úÖ Backend –ø–æ—Ä—Ç 8001 –∞–∫—Ç–∏–≤–µ–Ω")
                    backend_found = True
                elif any(f':{port}' in line and 'node' in line for port in ['3000', '3001', '3002', '3003']):
                    if not frontend_found:
                        print("‚úÖ Frontend –ø–æ—Ä—Ç –∞–∫—Ç–∏–≤–µ–Ω")
                        frontend_found = True
            
            if not backend_found:
                print("‚ùå Backend –ø–æ—Ä—Ç 8001 –Ω–µ –Ω–∞–π–¥–µ–Ω")
            if not frontend_found:
                print("‚ùå Frontend –ø–æ—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
            return backend_found and frontend_found
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Ä—Ç—ã")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–æ–≤: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏."""
    print("üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞")
    print("=" * 50)
    print(f"–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    backend_ok = check_backend()
    tts_ok = check_tts_service()
    frontend_ok = check_frontend()
    ports_ok = check_ports()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–û–í–´–ô –°–¢–ê–¢–£–°:")
    print(f"Backend API: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if backend_ok else '‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}")
    print(f"TTS —Å–µ—Ä–≤–∏—Å: {'‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' if tts_ok else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
    print(f"Frontend: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if frontend_ok else '‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}")
    print(f"–ü–æ—Ä—Ç—ã: {'‚úÖ –ê–∫—Ç–∏–≤–Ω—ã' if ports_ok else '‚ùå –ü—Ä–æ–±–ª–µ–º—ã'}")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    
    if not backend_ok:
        print("- –ó–∞–ø—É—Å—Ç–∏—Ç–µ backend: source ai_env/bin/activate && python -m uvicorn backend.app.main:app --reload --host 127.0.0.1 --port 8001")
    
    if not frontend_ok:
        print("- –ó–∞–ø—É—Å—Ç–∏—Ç–µ frontend: cd frontend && npm run dev")
    
    if not tts_ok:
        print("- –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ API –∫–ª—é—á ElevenLabs –¥–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ TTS")
    
    if backend_ok and frontend_ok:
        print("üéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("üì± –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä: http://localhost:3003")
        print("üìö API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://127.0.0.1:8001/docs")

if __name__ == "__main__":
    main() 